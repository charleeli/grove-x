/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef echoCmd_TYPES_H
#define echoCmd_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "httpCmd_types.h"


namespace EchoCmd {

class EchoReq;

class EchoRsp;


class EchoReq {
 public:

  static const char* ascii_fingerprint; // = "06A235020DFE310C434A71E9E6127848";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0xA2,0x35,0x02,0x0D,0xFE,0x31,0x0C,0x43,0x4A,0x71,0xE9,0xE6,0x12,0x78,0x48};

  EchoReq(const EchoReq&);
  EchoReq& operator=(const EchoReq&);
  EchoReq() : command("Echo"), foo() {
  }

  virtual ~EchoReq() throw();
  std::string command;
   ::HttpCmd::Header header;
  std::string foo;

  void __set_command(const std::string& val);

  void __set_header(const  ::HttpCmd::Header& val);

  void __set_foo(const std::string& val);

  bool operator == (const EchoReq & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    if (!(header == rhs.header))
      return false;
    if (!(foo == rhs.foo))
      return false;
    return true;
  }
  bool operator != (const EchoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EchoReq& obj);
};

void swap(EchoReq &a, EchoReq &b);

typedef struct _EchoRsp__isset {
  _EchoRsp__isset() : foo(true), pid(false) {}
  bool foo :1;
  bool pid :1;
} _EchoRsp__isset;

class EchoRsp {
 public:

  static const char* ascii_fingerprint; // = "E162B1F7953C55D6B978645D745A3B90";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x62,0xB1,0xF7,0x95,0x3C,0x55,0xD6,0xB9,0x78,0x64,0x5D,0x74,0x5A,0x3B,0x90};

  EchoRsp(const EchoRsp&);
  EchoRsp& operator=(const EchoRsp&);
  EchoRsp() : error(0), errmsg(), foo(""), pid(0) {
  }

  virtual ~EchoRsp() throw();
  int32_t error;
  std::string errmsg;
  std::string foo;
  int32_t pid;

  _EchoRsp__isset __isset;

  void __set_error(const int32_t val);

  void __set_errmsg(const std::string& val);

  void __set_foo(const std::string& val);

  void __set_pid(const int32_t val);

  bool operator == (const EchoRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(foo == rhs.foo))
      return false;
    if (!(pid == rhs.pid))
      return false;
    return true;
  }
  bool operator != (const EchoRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EchoRsp& obj);
};

void swap(EchoRsp &a, EchoRsp &b);

} // namespace

#endif
