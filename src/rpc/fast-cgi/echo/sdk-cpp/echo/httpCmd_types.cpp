/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "httpCmd_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace HttpCmd {

int _kSTATUSValues[] = {
  STATUS::SUCCESS,
  STATUS::FAILED,
  STATUS::EXCEPTION,
  STATUS::NO_COMMAND,
  STATUS::PARSE_FAIL,
  STATUS::CHECK_FAIL
};
const char* _kSTATUSNames[] = {
  "SUCCESS",
  "FAILED",
  "EXCEPTION",
  "NO_COMMAND",
  "PARSE_FAIL",
  "CHECK_FAIL"
};
const std::map<int, const char*> _STATUS_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSTATUSValues, _kSTATUSNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Header::~Header() throw() {
}


const char* Header::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t Header::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t Header::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Header");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Header &a, Header &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Header::Header(const Header& other0) {
  (void) other0;
}
Header& Header::operator=(const Header& other1) {
  (void) other1;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Header& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "Header(";
  out << ")";
  return out;
}


HttpRequest::~HttpRequest() throw() {
}


void HttpRequest::__set_command(const std::string& val) {
  this->command = val;
}

void HttpRequest::__set_header(const Header& val) {
  this->header = val;
}

const char* HttpRequest::ascii_fingerprint = "CD8BE83E651738586A465FCAD3542247";
const uint8_t HttpRequest::binary_fingerprint[16] = {0xCD,0x8B,0xE8,0x3E,0x65,0x17,0x38,0x58,0x6A,0x46,0x5F,0xCA,0xD3,0x54,0x22,0x47};

uint32_t HttpRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_command = false;
  bool isset_header = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->command);
          isset_command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          isset_header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_command)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_header)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HttpRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("HttpRequest");

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->header.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(HttpRequest &a, HttpRequest &b) {
  using ::std::swap;
  swap(a.command, b.command);
  swap(a.header, b.header);
}

HttpRequest::HttpRequest(const HttpRequest& other2) {
  command = other2.command;
  header = other2.header;
}
HttpRequest& HttpRequest::operator=(const HttpRequest& other3) {
  command = other3.command;
  header = other3.header;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const HttpRequest& obj) {
  using apache::thrift::to_string;
  out << "HttpRequest(";
  out << "command=" << to_string(obj.command);
  out << ", " << "header=" << to_string(obj.header);
  out << ")";
  return out;
}


HttpResponse::~HttpResponse() throw() {
}


void HttpResponse::__set_error(const int32_t val) {
  this->error = val;
}

void HttpResponse::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* HttpResponse::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t HttpResponse::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t HttpResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;
  bool isset_errmsg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          isset_errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_errmsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HttpResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("HttpResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(HttpResponse &a, HttpResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
}

HttpResponse::HttpResponse(const HttpResponse& other4) {
  error = other4.error;
  errmsg = other4.errmsg;
}
HttpResponse& HttpResponse::operator=(const HttpResponse& other5) {
  error = other5.error;
  errmsg = other5.errmsg;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const HttpResponse& obj) {
  using apache::thrift::to_string;
  out << "HttpResponse(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}

} // namespace
