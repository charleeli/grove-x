#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Error:
  OK = 0
  FAILED = -10001
  NO_DATA_YOU_EXPECTED = -10002
  MYSQL_DISCONNECTED = -10003
  MYSQL_EXECUTE_ERROR = -10004
  REDIS_DISCONNECTED = -10005
  REDIS_EXECUTE_ERROR = -10006
  COUNT_OVERLOAD = -10007
  WARE_LABEL_NOT_EXISTS = -10008
  GROUP_NOT_EXISTS = -10009
  INVALID_WARE_LABEL_ID = -10010
  INVALID_SUB_TYPE = -10011
  NO_USABLE_GROUP = -10012
  WARE_LABEL_ID_REUSE = -10013
  INVALID_RATE = -10014
  INVALID_STEP_FULL = -10015
  NO_STEP = -10016
  INVALID_TIME = -10017

  _VALUES_TO_NAMES = {
    0: "OK",
    -10001: "FAILED",
    -10002: "NO_DATA_YOU_EXPECTED",
    -10003: "MYSQL_DISCONNECTED",
    -10004: "MYSQL_EXECUTE_ERROR",
    -10005: "REDIS_DISCONNECTED",
    -10006: "REDIS_EXECUTE_ERROR",
    -10007: "COUNT_OVERLOAD",
    -10008: "WARE_LABEL_NOT_EXISTS",
    -10009: "GROUP_NOT_EXISTS",
    -10010: "INVALID_WARE_LABEL_ID",
    -10011: "INVALID_SUB_TYPE",
    -10012: "NO_USABLE_GROUP",
    -10013: "WARE_LABEL_ID_REUSE",
    -10014: "INVALID_RATE",
    -10015: "INVALID_STEP_FULL",
    -10016: "NO_STEP",
    -10017: "INVALID_TIME",
  }

  _NAMES_TO_VALUES = {
    "OK": 0,
    "FAILED": -10001,
    "NO_DATA_YOU_EXPECTED": -10002,
    "MYSQL_DISCONNECTED": -10003,
    "MYSQL_EXECUTE_ERROR": -10004,
    "REDIS_DISCONNECTED": -10005,
    "REDIS_EXECUTE_ERROR": -10006,
    "COUNT_OVERLOAD": -10007,
    "WARE_LABEL_NOT_EXISTS": -10008,
    "GROUP_NOT_EXISTS": -10009,
    "INVALID_WARE_LABEL_ID": -10010,
    "INVALID_SUB_TYPE": -10011,
    "NO_USABLE_GROUP": -10012,
    "WARE_LABEL_ID_REUSE": -10013,
    "INVALID_RATE": -10014,
    "INVALID_STEP_FULL": -10015,
    "NO_STEP": -10016,
    "INVALID_TIME": -10017,
  }


class InvalidOperation(TException):
  """
  Attributes:
   - fault
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fault', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, fault=None, why=None,):
    self.fault = fault
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.fault = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOperation')
    if self.fault is not None:
      oprot.writeFieldBegin('fault', TType.I32, 1)
      oprot.writeI32(self.fault)
      oprot.writeFieldEnd()
    if self.why is not None:
      oprot.writeFieldBegin('why', TType.STRING, 2)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fault)
    value = (value * 31) ^ hash(self.why)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MultipleCondition:
  """
  Attributes:
   - andCondList
   - orCondList
   - orderCondList
   - limitCond
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'andCondList', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'orCondList', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'orderCondList', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'limitCond', None, None, ), # 4
  )

  def __init__(self, andCondList=None, orCondList=None, orderCondList=None, limitCond=None,):
    self.andCondList = andCondList
    self.orCondList = orCondList
    self.orderCondList = orderCondList
    self.limitCond = limitCond

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.andCondList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.andCondList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.orCondList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.orCondList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.orderCondList = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.orderCondList.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.limitCond = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MultipleCondition')
    if self.andCondList is not None:
      oprot.writeFieldBegin('andCondList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.andCondList))
      for iter18 in self.andCondList:
        oprot.writeString(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orCondList is not None:
      oprot.writeFieldBegin('orCondList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.orCondList))
      for iter19 in self.orCondList:
        oprot.writeString(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orderCondList is not None:
      oprot.writeFieldBegin('orderCondList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.orderCondList))
      for iter20 in self.orderCondList:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.limitCond is not None:
      oprot.writeFieldBegin('limitCond', TType.STRING, 4)
      oprot.writeString(self.limitCond)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.andCondList)
    value = (value * 31) ^ hash(self.orCondList)
    value = (value * 31) ^ hash(self.orderCondList)
    value = (value * 31) ^ hash(self.limitCond)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabel:
  """
  Attributes:
   - name
   - label_type
   - scope_type
   - sub_type
   - seller_id
   - seller_slug
   - create_time
   - update_time
   - ware_label_id
   - create_man
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'label_type', None, None, ), # 2
    (3, TType.I32, 'scope_type', None, None, ), # 3
    (4, TType.I32, 'sub_type', None, None, ), # 4
    (5, TType.I64, 'seller_id', None, None, ), # 5
    (6, TType.STRING, 'seller_slug', None, None, ), # 6
    (7, TType.I32, 'create_time', None, None, ), # 7
    (8, TType.I32, 'update_time', None, None, ), # 8
    (9, TType.I32, 'ware_label_id', None, None, ), # 9
    (10, TType.STRING, 'create_man', None, None, ), # 10
  )

  def __init__(self, name=None, label_type=None, scope_type=None, sub_type=None, seller_id=None, seller_slug=None, create_time=None, update_time=None, ware_label_id=None, create_man=None,):
    self.name = name
    self.label_type = label_type
    self.scope_type = scope_type
    self.sub_type = sub_type
    self.seller_id = seller_id
    self.seller_slug = seller_slug
    self.create_time = create_time
    self.update_time = update_time
    self.ware_label_id = ware_label_id
    self.create_man = create_man

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.label_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.scope_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sub_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.seller_slug = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.create_man = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabel')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.label_type is not None:
      oprot.writeFieldBegin('label_type', TType.I32, 2)
      oprot.writeI32(self.label_type)
      oprot.writeFieldEnd()
    if self.scope_type is not None:
      oprot.writeFieldBegin('scope_type', TType.I32, 3)
      oprot.writeI32(self.scope_type)
      oprot.writeFieldEnd()
    if self.sub_type is not None:
      oprot.writeFieldBegin('sub_type', TType.I32, 4)
      oprot.writeI32(self.sub_type)
      oprot.writeFieldEnd()
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 5)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.seller_slug is not None:
      oprot.writeFieldBegin('seller_slug', TType.STRING, 6)
      oprot.writeString(self.seller_slug)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 7)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 8)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 9)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.create_man is not None:
      oprot.writeFieldBegin('create_man', TType.STRING, 10)
      oprot.writeString(self.create_man)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.label_type)
    value = (value * 31) ^ hash(self.scope_type)
    value = (value * 31) ^ hash(self.sub_type)
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.seller_slug)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.create_man)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabelWares:
  """
  Attributes:
   - ware_label_id
   - ware_id
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ware_label_id', None, None, ), # 1
    (2, TType.I64, 'ware_id', None, None, ), # 2
    (3, TType.I32, 'create_time', None, None, ), # 3
  )

  def __init__(self, ware_label_id=None, ware_id=None, create_time=None,):
    self.ware_label_id = ware_label_id
    self.ware_id = ware_id
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ware_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabelWares')
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 1)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.ware_id is not None:
      oprot.writeFieldBegin('ware_id', TType.I64, 2)
      oprot.writeI64(self.ware_id)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 3)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.ware_id)
    value = (value * 31) ^ hash(self.create_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Present:
  """
  Attributes:
   - step_id
   - sku_id
   - sku_price
   - sku_count
   - sku_slug
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'step_id', None, None, ), # 1
    (2, TType.I64, 'sku_id', None, None, ), # 2
    (3, TType.DOUBLE, 'sku_price', None, None, ), # 3
    (4, TType.I32, 'sku_count', None, None, ), # 4
    (5, TType.STRING, 'sku_slug', None, None, ), # 5
  )

  def __init__(self, step_id=None, sku_id=None, sku_price=None, sku_count=None, sku_slug=None,):
    self.step_id = step_id
    self.sku_id = sku_id
    self.sku_price = sku_price
    self.sku_count = sku_count
    self.sku_slug = sku_slug

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.step_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sku_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.sku_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sku_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sku_slug = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Present')
    if self.step_id is not None:
      oprot.writeFieldBegin('step_id', TType.I32, 1)
      oprot.writeI32(self.step_id)
      oprot.writeFieldEnd()
    if self.sku_id is not None:
      oprot.writeFieldBegin('sku_id', TType.I64, 2)
      oprot.writeI64(self.sku_id)
      oprot.writeFieldEnd()
    if self.sku_price is not None:
      oprot.writeFieldBegin('sku_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.sku_price)
      oprot.writeFieldEnd()
    if self.sku_count is not None:
      oprot.writeFieldBegin('sku_count', TType.I32, 4)
      oprot.writeI32(self.sku_count)
      oprot.writeFieldEnd()
    if self.sku_slug is not None:
      oprot.writeFieldBegin('sku_slug', TType.STRING, 5)
      oprot.writeString(self.sku_slug)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.step_id)
    value = (value * 31) ^ hash(self.sku_id)
    value = (value * 31) ^ hash(self.sku_price)
    value = (value * 31) ^ hash(self.sku_count)
    value = (value * 31) ^ hash(self.sku_slug)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Step:
  """
  Attributes:
   - onsale_group_id
   - full_credit
   - favor_credit
   - favor_rate
   - full_count
   - full_rate
   - full_price
   - step_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'onsale_group_id', None, None, ), # 1
    (2, TType.DOUBLE, 'full_credit', None, None, ), # 2
    (3, TType.DOUBLE, 'favor_credit', None, None, ), # 3
    (4, TType.DOUBLE, 'favor_rate', None, None, ), # 4
    (5, TType.I32, 'full_count', None, None, ), # 5
    (6, TType.DOUBLE, 'full_rate', None, None, ), # 6
    (7, TType.DOUBLE, 'full_price', None, None, ), # 7
    (8, TType.I32, 'step_id', None, None, ), # 8
  )

  def __init__(self, onsale_group_id=None, full_credit=None, favor_credit=None, favor_rate=None, full_count=None, full_rate=None, full_price=None, step_id=None,):
    self.onsale_group_id = onsale_group_id
    self.full_credit = full_credit
    self.favor_credit = favor_credit
    self.favor_rate = favor_rate
    self.full_count = full_count
    self.full_rate = full_rate
    self.full_price = full_price
    self.step_id = step_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.onsale_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.full_credit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.favor_credit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.favor_rate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.full_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.full_rate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.full_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.step_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Step')
    if self.onsale_group_id is not None:
      oprot.writeFieldBegin('onsale_group_id', TType.I32, 1)
      oprot.writeI32(self.onsale_group_id)
      oprot.writeFieldEnd()
    if self.full_credit is not None:
      oprot.writeFieldBegin('full_credit', TType.DOUBLE, 2)
      oprot.writeDouble(self.full_credit)
      oprot.writeFieldEnd()
    if self.favor_credit is not None:
      oprot.writeFieldBegin('favor_credit', TType.DOUBLE, 3)
      oprot.writeDouble(self.favor_credit)
      oprot.writeFieldEnd()
    if self.favor_rate is not None:
      oprot.writeFieldBegin('favor_rate', TType.DOUBLE, 4)
      oprot.writeDouble(self.favor_rate)
      oprot.writeFieldEnd()
    if self.full_count is not None:
      oprot.writeFieldBegin('full_count', TType.I32, 5)
      oprot.writeI32(self.full_count)
      oprot.writeFieldEnd()
    if self.full_rate is not None:
      oprot.writeFieldBegin('full_rate', TType.DOUBLE, 6)
      oprot.writeDouble(self.full_rate)
      oprot.writeFieldEnd()
    if self.full_price is not None:
      oprot.writeFieldBegin('full_price', TType.DOUBLE, 7)
      oprot.writeDouble(self.full_price)
      oprot.writeFieldEnd()
    if self.step_id is not None:
      oprot.writeFieldBegin('step_id', TType.I32, 8)
      oprot.writeI32(self.step_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.onsale_group_id)
    value = (value * 31) ^ hash(self.full_credit)
    value = (value * 31) ^ hash(self.favor_credit)
    value = (value * 31) ^ hash(self.favor_rate)
    value = (value * 31) ^ hash(self.full_count)
    value = (value * 31) ^ hash(self.full_rate)
    value = (value * 31) ^ hash(self.full_price)
    value = (value * 31) ^ hash(self.step_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OnsaleGroup:
  """
  Attributes:
   - id
   - slug
   - name
   - title
   - comment
   - favor_type
   - label_type
   - involve_count
   - ware_label_id
   - start_time
   - end_time
   - create_time
   - update_time
   - verify_status
   - applicant
   - approver
   - modifier
   - jump_label
   - jump_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'slug', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'title', None, None, ), # 4
    (5, TType.STRING, 'comment', None, None, ), # 5
    (6, TType.I32, 'favor_type', None, None, ), # 6
    (7, TType.I32, 'label_type', None, None, ), # 7
    (8, TType.I32, 'involve_count', None, None, ), # 8
    (9, TType.I32, 'ware_label_id', None, None, ), # 9
    (10, TType.I32, 'start_time', None, None, ), # 10
    (11, TType.I32, 'end_time', None, None, ), # 11
    (12, TType.I32, 'create_time', None, None, ), # 12
    (13, TType.I32, 'update_time', None, None, ), # 13
    (14, TType.I32, 'verify_status', None, None, ), # 14
    (15, TType.STRING, 'applicant', None, None, ), # 15
    (16, TType.STRING, 'approver', None, None, ), # 16
    (17, TType.STRING, 'modifier', None, None, ), # 17
    (18, TType.STRING, 'jump_label', None, None, ), # 18
    (19, TType.STRING, 'jump_data', None, None, ), # 19
  )

  def __init__(self, id=None, slug=None, name=None, title=None, comment=None, favor_type=None, label_type=None, involve_count=None, ware_label_id=None, start_time=None, end_time=None, create_time=None, update_time=None, verify_status=None, applicant=None, approver=None, modifier=None, jump_label=None, jump_data=None,):
    self.id = id
    self.slug = slug
    self.name = name
    self.title = title
    self.comment = comment
    self.favor_type = favor_type
    self.label_type = label_type
    self.involve_count = involve_count
    self.ware_label_id = ware_label_id
    self.start_time = start_time
    self.end_time = end_time
    self.create_time = create_time
    self.update_time = update_time
    self.verify_status = verify_status
    self.applicant = applicant
    self.approver = approver
    self.modifier = modifier
    self.jump_label = jump_label
    self.jump_data = jump_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.slug = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.favor_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.label_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.involve_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.verify_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.applicant = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.approver = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.modifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OnsaleGroup')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.slug is not None:
      oprot.writeFieldBegin('slug', TType.STRING, 2)
      oprot.writeString(self.slug)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 4)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 5)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.favor_type is not None:
      oprot.writeFieldBegin('favor_type', TType.I32, 6)
      oprot.writeI32(self.favor_type)
      oprot.writeFieldEnd()
    if self.label_type is not None:
      oprot.writeFieldBegin('label_type', TType.I32, 7)
      oprot.writeI32(self.label_type)
      oprot.writeFieldEnd()
    if self.involve_count is not None:
      oprot.writeFieldBegin('involve_count', TType.I32, 8)
      oprot.writeI32(self.involve_count)
      oprot.writeFieldEnd()
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 9)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 10)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 11)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 12)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 13)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.verify_status is not None:
      oprot.writeFieldBegin('verify_status', TType.I32, 14)
      oprot.writeI32(self.verify_status)
      oprot.writeFieldEnd()
    if self.applicant is not None:
      oprot.writeFieldBegin('applicant', TType.STRING, 15)
      oprot.writeString(self.applicant)
      oprot.writeFieldEnd()
    if self.approver is not None:
      oprot.writeFieldBegin('approver', TType.STRING, 16)
      oprot.writeString(self.approver)
      oprot.writeFieldEnd()
    if self.modifier is not None:
      oprot.writeFieldBegin('modifier', TType.STRING, 17)
      oprot.writeString(self.modifier)
      oprot.writeFieldEnd()
    if self.jump_label is not None:
      oprot.writeFieldBegin('jump_label', TType.STRING, 18)
      oprot.writeString(self.jump_label)
      oprot.writeFieldEnd()
    if self.jump_data is not None:
      oprot.writeFieldBegin('jump_data', TType.STRING, 19)
      oprot.writeString(self.jump_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.slug)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.favor_type)
    value = (value * 31) ^ hash(self.label_type)
    value = (value * 31) ^ hash(self.involve_count)
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.verify_status)
    value = (value * 31) ^ hash(self.applicant)
    value = (value * 31) ^ hash(self.approver)
    value = (value * 31) ^ hash(self.modifier)
    value = (value * 31) ^ hash(self.jump_label)
    value = (value * 31) ^ hash(self.jump_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
