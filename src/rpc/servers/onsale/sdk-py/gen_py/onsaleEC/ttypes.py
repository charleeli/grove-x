#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import onsale.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PriceInfo:
  """
  Attributes:
   - market_price
   - sale_price
   - pay_price
   - favor_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'market_price', None, None, ), # 1
    (2, TType.DOUBLE, 'sale_price', None, None, ), # 2
    (3, TType.DOUBLE, 'pay_price', None, None, ), # 3
    (4, TType.DOUBLE, 'favor_price', None, None, ), # 4
  )

  def __init__(self, market_price=None, sale_price=None, pay_price=None, favor_price=None,):
    self.market_price = market_price
    self.sale_price = sale_price
    self.pay_price = pay_price
    self.favor_price = favor_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.market_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.pay_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.favor_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceInfo')
    if self.market_price is not None:
      oprot.writeFieldBegin('market_price', TType.DOUBLE, 1)
      oprot.writeDouble(self.market_price)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 2)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.pay_price is not None:
      oprot.writeFieldBegin('pay_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.pay_price)
      oprot.writeFieldEnd()
    if self.favor_price is not None:
      oprot.writeFieldBegin('favor_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.favor_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.market_price)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.pay_price)
    value = (value * 31) ^ hash(self.favor_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkuInfo:
  """
  Attributes:
   - sku_id
   - sku_count
   - sale_price
   - market_price
   - ware_id
   - seller_id
   - item_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sku_id', None, None, ), # 1
    (2, TType.I32, 'sku_count', None, None, ), # 2
    (3, TType.DOUBLE, 'sale_price', None, None, ), # 3
    (4, TType.DOUBLE, 'market_price', None, None, ), # 4
    (5, TType.I64, 'ware_id', None, None, ), # 5
    (6, TType.I64, 'seller_id', None, None, ), # 6
    (7, TType.I64, 'item_id', None, None, ), # 7
  )

  def __init__(self, sku_id=None, sku_count=None, sale_price=None, market_price=None, ware_id=None, seller_id=None, item_id=None,):
    self.sku_id = sku_id
    self.sku_count = sku_count
    self.sale_price = sale_price
    self.market_price = market_price
    self.ware_id = ware_id
    self.seller_id = seller_id
    self.item_id = item_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sku_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sku_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.market_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.ware_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.item_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkuInfo')
    if self.sku_id is not None:
      oprot.writeFieldBegin('sku_id', TType.I64, 1)
      oprot.writeI64(self.sku_id)
      oprot.writeFieldEnd()
    if self.sku_count is not None:
      oprot.writeFieldBegin('sku_count', TType.I32, 2)
      oprot.writeI32(self.sku_count)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.market_price is not None:
      oprot.writeFieldBegin('market_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.market_price)
      oprot.writeFieldEnd()
    if self.ware_id is not None:
      oprot.writeFieldBegin('ware_id', TType.I64, 5)
      oprot.writeI64(self.ware_id)
      oprot.writeFieldEnd()
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 6)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.item_id is not None:
      oprot.writeFieldBegin('item_id', TType.I64, 7)
      oprot.writeI64(self.item_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sku_id)
    value = (value * 31) ^ hash(self.sku_count)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.market_price)
    value = (value * 31) ^ hash(self.ware_id)
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.item_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Apport:
  """
  Attributes:
   - sku_info
   - price_info
   - has_onsale_group
   - onsale_group
   - has_ware_label
   - ware_label
   - first_step
   - has_curr_step
   - curr_step
   - has_next_step
   - next_step
   - differ_credit
   - differ_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sku_info', (SkuInfo, SkuInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'price_info', (PriceInfo, PriceInfo.thrift_spec), None, ), # 2
    (3, TType.BOOL, 'has_onsale_group', None, None, ), # 3
    (4, TType.STRUCT, 'onsale_group', (onsale.ttypes.OnsaleGroup, onsale.ttypes.OnsaleGroup.thrift_spec), None, ), # 4
    (5, TType.BOOL, 'has_ware_label', None, None, ), # 5
    (6, TType.STRUCT, 'ware_label', (onsale.ttypes.WareLabel, onsale.ttypes.WareLabel.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'first_step', (onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec), None, ), # 7
    (8, TType.BOOL, 'has_curr_step', None, None, ), # 8
    (9, TType.STRUCT, 'curr_step', (onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec), None, ), # 9
    (10, TType.BOOL, 'has_next_step', None, None, ), # 10
    (11, TType.STRUCT, 'next_step', (onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec), None, ), # 11
    (12, TType.DOUBLE, 'differ_credit', None, None, ), # 12
    (13, TType.I32, 'differ_count', None, None, ), # 13
  )

  def __init__(self, sku_info=None, price_info=None, has_onsale_group=None, onsale_group=None, has_ware_label=None, ware_label=None, first_step=None, has_curr_step=None, curr_step=None, has_next_step=None, next_step=None, differ_credit=None, differ_count=None,):
    self.sku_info = sku_info
    self.price_info = price_info
    self.has_onsale_group = has_onsale_group
    self.onsale_group = onsale_group
    self.has_ware_label = has_ware_label
    self.ware_label = ware_label
    self.first_step = first_step
    self.has_curr_step = has_curr_step
    self.curr_step = curr_step
    self.has_next_step = has_next_step
    self.next_step = next_step
    self.differ_credit = differ_credit
    self.differ_count = differ_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sku_info = SkuInfo()
          self.sku_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.price_info = PriceInfo()
          self.price_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.has_onsale_group = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.onsale_group = onsale.ttypes.OnsaleGroup()
          self.onsale_group.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.has_ware_label = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ware_label = onsale.ttypes.WareLabel()
          self.ware_label.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.first_step = onsale.ttypes.Step()
          self.first_step.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.has_curr_step = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.curr_step = onsale.ttypes.Step()
          self.curr_step.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.has_next_step = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.next_step = onsale.ttypes.Step()
          self.next_step.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.differ_credit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.differ_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Apport')
    if self.sku_info is not None:
      oprot.writeFieldBegin('sku_info', TType.STRUCT, 1)
      self.sku_info.write(oprot)
      oprot.writeFieldEnd()
    if self.price_info is not None:
      oprot.writeFieldBegin('price_info', TType.STRUCT, 2)
      self.price_info.write(oprot)
      oprot.writeFieldEnd()
    if self.has_onsale_group is not None:
      oprot.writeFieldBegin('has_onsale_group', TType.BOOL, 3)
      oprot.writeBool(self.has_onsale_group)
      oprot.writeFieldEnd()
    if self.onsale_group is not None:
      oprot.writeFieldBegin('onsale_group', TType.STRUCT, 4)
      self.onsale_group.write(oprot)
      oprot.writeFieldEnd()
    if self.has_ware_label is not None:
      oprot.writeFieldBegin('has_ware_label', TType.BOOL, 5)
      oprot.writeBool(self.has_ware_label)
      oprot.writeFieldEnd()
    if self.ware_label is not None:
      oprot.writeFieldBegin('ware_label', TType.STRUCT, 6)
      self.ware_label.write(oprot)
      oprot.writeFieldEnd()
    if self.first_step is not None:
      oprot.writeFieldBegin('first_step', TType.STRUCT, 7)
      self.first_step.write(oprot)
      oprot.writeFieldEnd()
    if self.has_curr_step is not None:
      oprot.writeFieldBegin('has_curr_step', TType.BOOL, 8)
      oprot.writeBool(self.has_curr_step)
      oprot.writeFieldEnd()
    if self.curr_step is not None:
      oprot.writeFieldBegin('curr_step', TType.STRUCT, 9)
      self.curr_step.write(oprot)
      oprot.writeFieldEnd()
    if self.has_next_step is not None:
      oprot.writeFieldBegin('has_next_step', TType.BOOL, 10)
      oprot.writeBool(self.has_next_step)
      oprot.writeFieldEnd()
    if self.next_step is not None:
      oprot.writeFieldBegin('next_step', TType.STRUCT, 11)
      self.next_step.write(oprot)
      oprot.writeFieldEnd()
    if self.differ_credit is not None:
      oprot.writeFieldBegin('differ_credit', TType.DOUBLE, 12)
      oprot.writeDouble(self.differ_credit)
      oprot.writeFieldEnd()
    if self.differ_count is not None:
      oprot.writeFieldBegin('differ_count', TType.I32, 13)
      oprot.writeI32(self.differ_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sku_info)
    value = (value * 31) ^ hash(self.price_info)
    value = (value * 31) ^ hash(self.has_onsale_group)
    value = (value * 31) ^ hash(self.onsale_group)
    value = (value * 31) ^ hash(self.has_ware_label)
    value = (value * 31) ^ hash(self.ware_label)
    value = (value * 31) ^ hash(self.first_step)
    value = (value * 31) ^ hash(self.has_curr_step)
    value = (value * 31) ^ hash(self.curr_step)
    value = (value * 31) ^ hash(self.has_next_step)
    value = (value * 31) ^ hash(self.next_step)
    value = (value * 31) ^ hash(self.differ_credit)
    value = (value * 31) ^ hash(self.differ_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsableOnsaleGroupsReq:
  """
  Attributes:
   - sku_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sku_list', (TType.STRUCT,(SkuInfo, SkuInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, sku_list=None,):
    self.sku_list = sku_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sku_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = SkuInfo()
            _elem5.read(iprot)
            self.sku_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsableOnsaleGroupsReq')
    if self.sku_list is not None:
      oprot.writeFieldBegin('sku_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.sku_list))
      for iter6 in self.sku_list:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sku_list is None:
      raise TProtocol.TProtocolException(message='Required field sku_list is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sku_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsableOnsaleGroupsRsp:
  """
  Attributes:
   - error
   - errmsg
   - sku_list
   - order_price
   - skuID_priceInfo_map
   - sku_map
   - skuID_sellerID_map
   - skuID_wareID_map
   - wareID_wareLabelID_map
   - wareLabelID_wareLabel_map
   - wareLabelID_onsaleGroupID_map
   - onsaleGroupID_onsaleGroup_map
   - skuID_onsaleGroup_map
   - skuID_onsaleGroupID_map
   - onsaleGroupID_skuIDSet_map
   - onsaleGroupID_totalSalePrice_map
   - onsaleGroupID_totalCount_map
   - onsaleGroupID_totalFavorPrice_map
   - onsaleGroupID_stepList_map
   - onsaleGroupID_firstStep_map
   - onsaleGroupID_currStep_map
   - onsaleGroupID_nextStep_map
   - present_list
   - onsaleGroupID_currStepID_map
   - currStepID_presentList_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.LIST, 'sku_list', (TType.STRUCT,(SkuInfo, SkuInfo.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'order_price', (PriceInfo, PriceInfo.thrift_spec), None, ), # 4
    (5, TType.MAP, 'skuID_priceInfo_map', (TType.I64,None,TType.STRUCT,(PriceInfo, PriceInfo.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'sku_map', (TType.I64,None,TType.STRUCT,(SkuInfo, SkuInfo.thrift_spec)), None, ), # 6
    (7, TType.MAP, 'skuID_sellerID_map', (TType.I64,None,TType.I64,None), None, ), # 7
    (8, TType.MAP, 'skuID_wareID_map', (TType.I64,None,TType.I64,None), None, ), # 8
    (9, TType.MAP, 'wareID_wareLabelID_map', (TType.I64,None,TType.I32,None), None, ), # 9
    (10, TType.MAP, 'wareLabelID_wareLabel_map', (TType.I32,None,TType.STRUCT,(onsale.ttypes.WareLabel, onsale.ttypes.WareLabel.thrift_spec)), None, ), # 10
    (11, TType.MAP, 'wareLabelID_onsaleGroupID_map', (TType.I64,None,TType.I32,None), None, ), # 11
    (12, TType.MAP, 'onsaleGroupID_onsaleGroup_map', (TType.I32,None,TType.STRUCT,(onsale.ttypes.OnsaleGroup, onsale.ttypes.OnsaleGroup.thrift_spec)), None, ), # 12
    (13, TType.MAP, 'skuID_onsaleGroup_map', (TType.I64,None,TType.STRUCT,(onsale.ttypes.OnsaleGroup, onsale.ttypes.OnsaleGroup.thrift_spec)), None, ), # 13
    (14, TType.MAP, 'skuID_onsaleGroupID_map', (TType.I64,None,TType.I32,None), None, ), # 14
    (15, TType.MAP, 'onsaleGroupID_skuIDSet_map', (TType.I32,None,TType.SET,(TType.I64,None)), None, ), # 15
    (16, TType.MAP, 'onsaleGroupID_totalSalePrice_map', (TType.I32,None,TType.DOUBLE,None), None, ), # 16
    (17, TType.MAP, 'onsaleGroupID_totalCount_map', (TType.I32,None,TType.I32,None), None, ), # 17
    (18, TType.MAP, 'onsaleGroupID_totalFavorPrice_map', (TType.I32,None,TType.DOUBLE,None), None, ), # 18
    (19, TType.MAP, 'onsaleGroupID_stepList_map', (TType.I32,None,TType.LIST,(TType.STRUCT,(onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec))), None, ), # 19
    (20, TType.MAP, 'onsaleGroupID_firstStep_map', (TType.I32,None,TType.STRUCT,(onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec)), None, ), # 20
    (21, TType.MAP, 'onsaleGroupID_currStep_map', (TType.I32,None,TType.STRUCT,(onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec)), None, ), # 21
    (22, TType.MAP, 'onsaleGroupID_nextStep_map', (TType.I32,None,TType.STRUCT,(onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec)), None, ), # 22
    (23, TType.LIST, 'present_list', (TType.STRUCT,(onsale.ttypes.Present, onsale.ttypes.Present.thrift_spec)), None, ), # 23
    (24, TType.MAP, 'onsaleGroupID_currStepID_map', (TType.I32,None,TType.I32,None), None, ), # 24
    (25, TType.MAP, 'currStepID_presentList_map', (TType.I32,None,TType.LIST,(TType.STRUCT,(onsale.ttypes.Present, onsale.ttypes.Present.thrift_spec))), None, ), # 25
  )

  def __init__(self, error=None, errmsg=None, sku_list=None, order_price=None, skuID_priceInfo_map=None, sku_map=None, skuID_sellerID_map=None, skuID_wareID_map=None, wareID_wareLabelID_map=None, wareLabelID_wareLabel_map=None, wareLabelID_onsaleGroupID_map=None, onsaleGroupID_onsaleGroup_map=None, skuID_onsaleGroup_map=None, skuID_onsaleGroupID_map=None, onsaleGroupID_skuIDSet_map=None, onsaleGroupID_totalSalePrice_map=None, onsaleGroupID_totalCount_map=None, onsaleGroupID_totalFavorPrice_map=None, onsaleGroupID_stepList_map=None, onsaleGroupID_firstStep_map=None, onsaleGroupID_currStep_map=None, onsaleGroupID_nextStep_map=None, present_list=None, onsaleGroupID_currStepID_map=None, currStepID_presentList_map=None,):
    self.error = error
    self.errmsg = errmsg
    self.sku_list = sku_list
    self.order_price = order_price
    self.skuID_priceInfo_map = skuID_priceInfo_map
    self.sku_map = sku_map
    self.skuID_sellerID_map = skuID_sellerID_map
    self.skuID_wareID_map = skuID_wareID_map
    self.wareID_wareLabelID_map = wareID_wareLabelID_map
    self.wareLabelID_wareLabel_map = wareLabelID_wareLabel_map
    self.wareLabelID_onsaleGroupID_map = wareLabelID_onsaleGroupID_map
    self.onsaleGroupID_onsaleGroup_map = onsaleGroupID_onsaleGroup_map
    self.skuID_onsaleGroup_map = skuID_onsaleGroup_map
    self.skuID_onsaleGroupID_map = skuID_onsaleGroupID_map
    self.onsaleGroupID_skuIDSet_map = onsaleGroupID_skuIDSet_map
    self.onsaleGroupID_totalSalePrice_map = onsaleGroupID_totalSalePrice_map
    self.onsaleGroupID_totalCount_map = onsaleGroupID_totalCount_map
    self.onsaleGroupID_totalFavorPrice_map = onsaleGroupID_totalFavorPrice_map
    self.onsaleGroupID_stepList_map = onsaleGroupID_stepList_map
    self.onsaleGroupID_firstStep_map = onsaleGroupID_firstStep_map
    self.onsaleGroupID_currStep_map = onsaleGroupID_currStep_map
    self.onsaleGroupID_nextStep_map = onsaleGroupID_nextStep_map
    self.present_list = present_list
    self.onsaleGroupID_currStepID_map = onsaleGroupID_currStepID_map
    self.currStepID_presentList_map = currStepID_presentList_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.sku_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = SkuInfo()
            _elem12.read(iprot)
            self.sku_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.order_price = PriceInfo()
          self.order_price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.skuID_priceInfo_map = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
          for _i17 in xrange(_size13):
            _key18 = iprot.readI64();
            _val19 = PriceInfo()
            _val19.read(iprot)
            self.skuID_priceInfo_map[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.sku_map = {}
          (_ktype21, _vtype22, _size20 ) = iprot.readMapBegin()
          for _i24 in xrange(_size20):
            _key25 = iprot.readI64();
            _val26 = SkuInfo()
            _val26.read(iprot)
            self.sku_map[_key25] = _val26
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.skuID_sellerID_map = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin()
          for _i31 in xrange(_size27):
            _key32 = iprot.readI64();
            _val33 = iprot.readI64();
            self.skuID_sellerID_map[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.skuID_wareID_map = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin()
          for _i38 in xrange(_size34):
            _key39 = iprot.readI64();
            _val40 = iprot.readI64();
            self.skuID_wareID_map[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.wareID_wareLabelID_map = {}
          (_ktype42, _vtype43, _size41 ) = iprot.readMapBegin()
          for _i45 in xrange(_size41):
            _key46 = iprot.readI64();
            _val47 = iprot.readI32();
            self.wareID_wareLabelID_map[_key46] = _val47
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.wareLabelID_wareLabel_map = {}
          (_ktype49, _vtype50, _size48 ) = iprot.readMapBegin()
          for _i52 in xrange(_size48):
            _key53 = iprot.readI32();
            _val54 = onsale.ttypes.WareLabel()
            _val54.read(iprot)
            self.wareLabelID_wareLabel_map[_key53] = _val54
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.MAP:
          self.wareLabelID_onsaleGroupID_map = {}
          (_ktype56, _vtype57, _size55 ) = iprot.readMapBegin()
          for _i59 in xrange(_size55):
            _key60 = iprot.readI64();
            _val61 = iprot.readI32();
            self.wareLabelID_onsaleGroupID_map[_key60] = _val61
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.MAP:
          self.onsaleGroupID_onsaleGroup_map = {}
          (_ktype63, _vtype64, _size62 ) = iprot.readMapBegin()
          for _i66 in xrange(_size62):
            _key67 = iprot.readI32();
            _val68 = onsale.ttypes.OnsaleGroup()
            _val68.read(iprot)
            self.onsaleGroupID_onsaleGroup_map[_key67] = _val68
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.MAP:
          self.skuID_onsaleGroup_map = {}
          (_ktype70, _vtype71, _size69 ) = iprot.readMapBegin()
          for _i73 in xrange(_size69):
            _key74 = iprot.readI64();
            _val75 = onsale.ttypes.OnsaleGroup()
            _val75.read(iprot)
            self.skuID_onsaleGroup_map[_key74] = _val75
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.MAP:
          self.skuID_onsaleGroupID_map = {}
          (_ktype77, _vtype78, _size76 ) = iprot.readMapBegin()
          for _i80 in xrange(_size76):
            _key81 = iprot.readI64();
            _val82 = iprot.readI32();
            self.skuID_onsaleGroupID_map[_key81] = _val82
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.MAP:
          self.onsaleGroupID_skuIDSet_map = {}
          (_ktype84, _vtype85, _size83 ) = iprot.readMapBegin()
          for _i87 in xrange(_size83):
            _key88 = iprot.readI32();
            _val89 = set()
            (_etype93, _size90) = iprot.readSetBegin()
            for _i94 in xrange(_size90):
              _elem95 = iprot.readI64();
              _val89.add(_elem95)
            iprot.readSetEnd()
            self.onsaleGroupID_skuIDSet_map[_key88] = _val89
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.MAP:
          self.onsaleGroupID_totalSalePrice_map = {}
          (_ktype97, _vtype98, _size96 ) = iprot.readMapBegin()
          for _i100 in xrange(_size96):
            _key101 = iprot.readI32();
            _val102 = iprot.readDouble();
            self.onsaleGroupID_totalSalePrice_map[_key101] = _val102
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.MAP:
          self.onsaleGroupID_totalCount_map = {}
          (_ktype104, _vtype105, _size103 ) = iprot.readMapBegin()
          for _i107 in xrange(_size103):
            _key108 = iprot.readI32();
            _val109 = iprot.readI32();
            self.onsaleGroupID_totalCount_map[_key108] = _val109
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.MAP:
          self.onsaleGroupID_totalFavorPrice_map = {}
          (_ktype111, _vtype112, _size110 ) = iprot.readMapBegin()
          for _i114 in xrange(_size110):
            _key115 = iprot.readI32();
            _val116 = iprot.readDouble();
            self.onsaleGroupID_totalFavorPrice_map[_key115] = _val116
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.MAP:
          self.onsaleGroupID_stepList_map = {}
          (_ktype118, _vtype119, _size117 ) = iprot.readMapBegin()
          for _i121 in xrange(_size117):
            _key122 = iprot.readI32();
            _val123 = []
            (_etype127, _size124) = iprot.readListBegin()
            for _i128 in xrange(_size124):
              _elem129 = onsale.ttypes.Step()
              _elem129.read(iprot)
              _val123.append(_elem129)
            iprot.readListEnd()
            self.onsaleGroupID_stepList_map[_key122] = _val123
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.MAP:
          self.onsaleGroupID_firstStep_map = {}
          (_ktype131, _vtype132, _size130 ) = iprot.readMapBegin()
          for _i134 in xrange(_size130):
            _key135 = iprot.readI32();
            _val136 = onsale.ttypes.Step()
            _val136.read(iprot)
            self.onsaleGroupID_firstStep_map[_key135] = _val136
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.MAP:
          self.onsaleGroupID_currStep_map = {}
          (_ktype138, _vtype139, _size137 ) = iprot.readMapBegin()
          for _i141 in xrange(_size137):
            _key142 = iprot.readI32();
            _val143 = onsale.ttypes.Step()
            _val143.read(iprot)
            self.onsaleGroupID_currStep_map[_key142] = _val143
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.MAP:
          self.onsaleGroupID_nextStep_map = {}
          (_ktype145, _vtype146, _size144 ) = iprot.readMapBegin()
          for _i148 in xrange(_size144):
            _key149 = iprot.readI32();
            _val150 = onsale.ttypes.Step()
            _val150.read(iprot)
            self.onsaleGroupID_nextStep_map[_key149] = _val150
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.present_list = []
          (_etype154, _size151) = iprot.readListBegin()
          for _i155 in xrange(_size151):
            _elem156 = onsale.ttypes.Present()
            _elem156.read(iprot)
            self.present_list.append(_elem156)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.MAP:
          self.onsaleGroupID_currStepID_map = {}
          (_ktype158, _vtype159, _size157 ) = iprot.readMapBegin()
          for _i161 in xrange(_size157):
            _key162 = iprot.readI32();
            _val163 = iprot.readI32();
            self.onsaleGroupID_currStepID_map[_key162] = _val163
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.MAP:
          self.currStepID_presentList_map = {}
          (_ktype165, _vtype166, _size164 ) = iprot.readMapBegin()
          for _i168 in xrange(_size164):
            _key169 = iprot.readI32();
            _val170 = []
            (_etype174, _size171) = iprot.readListBegin()
            for _i175 in xrange(_size171):
              _elem176 = onsale.ttypes.Present()
              _elem176.read(iprot)
              _val170.append(_elem176)
            iprot.readListEnd()
            self.currStepID_presentList_map[_key169] = _val170
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsableOnsaleGroupsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.sku_list is not None:
      oprot.writeFieldBegin('sku_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.sku_list))
      for iter177 in self.sku_list:
        iter177.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.order_price is not None:
      oprot.writeFieldBegin('order_price', TType.STRUCT, 4)
      self.order_price.write(oprot)
      oprot.writeFieldEnd()
    if self.skuID_priceInfo_map is not None:
      oprot.writeFieldBegin('skuID_priceInfo_map', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.skuID_priceInfo_map))
      for kiter178,viter179 in self.skuID_priceInfo_map.items():
        oprot.writeI64(kiter178)
        viter179.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sku_map is not None:
      oprot.writeFieldBegin('sku_map', TType.MAP, 6)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sku_map))
      for kiter180,viter181 in self.sku_map.items():
        oprot.writeI64(kiter180)
        viter181.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.skuID_sellerID_map is not None:
      oprot.writeFieldBegin('skuID_sellerID_map', TType.MAP, 7)
      oprot.writeMapBegin(TType.I64, TType.I64, len(self.skuID_sellerID_map))
      for kiter182,viter183 in self.skuID_sellerID_map.items():
        oprot.writeI64(kiter182)
        oprot.writeI64(viter183)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.skuID_wareID_map is not None:
      oprot.writeFieldBegin('skuID_wareID_map', TType.MAP, 8)
      oprot.writeMapBegin(TType.I64, TType.I64, len(self.skuID_wareID_map))
      for kiter184,viter185 in self.skuID_wareID_map.items():
        oprot.writeI64(kiter184)
        oprot.writeI64(viter185)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.wareID_wareLabelID_map is not None:
      oprot.writeFieldBegin('wareID_wareLabelID_map', TType.MAP, 9)
      oprot.writeMapBegin(TType.I64, TType.I32, len(self.wareID_wareLabelID_map))
      for kiter186,viter187 in self.wareID_wareLabelID_map.items():
        oprot.writeI64(kiter186)
        oprot.writeI32(viter187)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.wareLabelID_wareLabel_map is not None:
      oprot.writeFieldBegin('wareLabelID_wareLabel_map', TType.MAP, 10)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.wareLabelID_wareLabel_map))
      for kiter188,viter189 in self.wareLabelID_wareLabel_map.items():
        oprot.writeI32(kiter188)
        viter189.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.wareLabelID_onsaleGroupID_map is not None:
      oprot.writeFieldBegin('wareLabelID_onsaleGroupID_map', TType.MAP, 11)
      oprot.writeMapBegin(TType.I64, TType.I32, len(self.wareLabelID_onsaleGroupID_map))
      for kiter190,viter191 in self.wareLabelID_onsaleGroupID_map.items():
        oprot.writeI64(kiter190)
        oprot.writeI32(viter191)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_onsaleGroup_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_onsaleGroup_map', TType.MAP, 12)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.onsaleGroupID_onsaleGroup_map))
      for kiter192,viter193 in self.onsaleGroupID_onsaleGroup_map.items():
        oprot.writeI32(kiter192)
        viter193.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.skuID_onsaleGroup_map is not None:
      oprot.writeFieldBegin('skuID_onsaleGroup_map', TType.MAP, 13)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.skuID_onsaleGroup_map))
      for kiter194,viter195 in self.skuID_onsaleGroup_map.items():
        oprot.writeI64(kiter194)
        viter195.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.skuID_onsaleGroupID_map is not None:
      oprot.writeFieldBegin('skuID_onsaleGroupID_map', TType.MAP, 14)
      oprot.writeMapBegin(TType.I64, TType.I32, len(self.skuID_onsaleGroupID_map))
      for kiter196,viter197 in self.skuID_onsaleGroupID_map.items():
        oprot.writeI64(kiter196)
        oprot.writeI32(viter197)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_skuIDSet_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_skuIDSet_map', TType.MAP, 15)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.onsaleGroupID_skuIDSet_map))
      for kiter198,viter199 in self.onsaleGroupID_skuIDSet_map.items():
        oprot.writeI32(kiter198)
        oprot.writeSetBegin(TType.I64, len(viter199))
        for iter200 in viter199:
          oprot.writeI64(iter200)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_totalSalePrice_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_totalSalePrice_map', TType.MAP, 16)
      oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.onsaleGroupID_totalSalePrice_map))
      for kiter201,viter202 in self.onsaleGroupID_totalSalePrice_map.items():
        oprot.writeI32(kiter201)
        oprot.writeDouble(viter202)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_totalCount_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_totalCount_map', TType.MAP, 17)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.onsaleGroupID_totalCount_map))
      for kiter203,viter204 in self.onsaleGroupID_totalCount_map.items():
        oprot.writeI32(kiter203)
        oprot.writeI32(viter204)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_totalFavorPrice_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_totalFavorPrice_map', TType.MAP, 18)
      oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.onsaleGroupID_totalFavorPrice_map))
      for kiter205,viter206 in self.onsaleGroupID_totalFavorPrice_map.items():
        oprot.writeI32(kiter205)
        oprot.writeDouble(viter206)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_stepList_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_stepList_map', TType.MAP, 19)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.onsaleGroupID_stepList_map))
      for kiter207,viter208 in self.onsaleGroupID_stepList_map.items():
        oprot.writeI32(kiter207)
        oprot.writeListBegin(TType.STRUCT, len(viter208))
        for iter209 in viter208:
          iter209.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_firstStep_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_firstStep_map', TType.MAP, 20)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.onsaleGroupID_firstStep_map))
      for kiter210,viter211 in self.onsaleGroupID_firstStep_map.items():
        oprot.writeI32(kiter210)
        viter211.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_currStep_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_currStep_map', TType.MAP, 21)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.onsaleGroupID_currStep_map))
      for kiter212,viter213 in self.onsaleGroupID_currStep_map.items():
        oprot.writeI32(kiter212)
        viter213.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_nextStep_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_nextStep_map', TType.MAP, 22)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.onsaleGroupID_nextStep_map))
      for kiter214,viter215 in self.onsaleGroupID_nextStep_map.items():
        oprot.writeI32(kiter214)
        viter215.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.present_list is not None:
      oprot.writeFieldBegin('present_list', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.present_list))
      for iter216 in self.present_list:
        iter216.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.onsaleGroupID_currStepID_map is not None:
      oprot.writeFieldBegin('onsaleGroupID_currStepID_map', TType.MAP, 24)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.onsaleGroupID_currStepID_map))
      for kiter217,viter218 in self.onsaleGroupID_currStepID_map.items():
        oprot.writeI32(kiter217)
        oprot.writeI32(viter218)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.currStepID_presentList_map is not None:
      oprot.writeFieldBegin('currStepID_presentList_map', TType.MAP, 25)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.currStepID_presentList_map))
      for kiter219,viter220 in self.currStepID_presentList_map.items():
        oprot.writeI32(kiter219)
        oprot.writeListBegin(TType.STRUCT, len(viter220))
        for iter221 in viter220:
          iter221.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.sku_list)
    value = (value * 31) ^ hash(self.order_price)
    value = (value * 31) ^ hash(self.skuID_priceInfo_map)
    value = (value * 31) ^ hash(self.sku_map)
    value = (value * 31) ^ hash(self.skuID_sellerID_map)
    value = (value * 31) ^ hash(self.skuID_wareID_map)
    value = (value * 31) ^ hash(self.wareID_wareLabelID_map)
    value = (value * 31) ^ hash(self.wareLabelID_wareLabel_map)
    value = (value * 31) ^ hash(self.wareLabelID_onsaleGroupID_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_onsaleGroup_map)
    value = (value * 31) ^ hash(self.skuID_onsaleGroup_map)
    value = (value * 31) ^ hash(self.skuID_onsaleGroupID_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_skuIDSet_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_totalSalePrice_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_totalCount_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_totalFavorPrice_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_stepList_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_firstStep_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_currStep_map)
    value = (value * 31) ^ hash(self.onsaleGroupID_nextStep_map)
    value = (value * 31) ^ hash(self.present_list)
    value = (value * 31) ^ hash(self.onsaleGroupID_currStepID_map)
    value = (value * 31) ^ hash(self.currStepID_presentList_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApportionReq:
  """
  Attributes:
   - sku_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sku_list', (TType.STRUCT,(SkuInfo, SkuInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, sku_list=None,):
    self.sku_list = sku_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sku_list = []
          (_etype225, _size222) = iprot.readListBegin()
          for _i226 in xrange(_size222):
            _elem227 = SkuInfo()
            _elem227.read(iprot)
            self.sku_list.append(_elem227)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApportionReq')
    if self.sku_list is not None:
      oprot.writeFieldBegin('sku_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.sku_list))
      for iter228 in self.sku_list:
        iter228.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sku_list is None:
      raise TProtocol.TProtocolException(message='Required field sku_list is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sku_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApportionRsp:
  """
  Attributes:
   - error
   - errmsg
   - usableOnsaleGroupsRsp
   - order_price
   - present_list
   - sku_apport_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRUCT, 'usableOnsaleGroupsRsp', (UsableOnsaleGroupsRsp, UsableOnsaleGroupsRsp.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'order_price', (PriceInfo, PriceInfo.thrift_spec), None, ), # 4
    (5, TType.LIST, 'present_list', (TType.STRUCT,(onsale.ttypes.Present, onsale.ttypes.Present.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'sku_apport_map', (TType.I64,None,TType.STRUCT,(Apport, Apport.thrift_spec)), None, ), # 6
  )

  def __init__(self, error=None, errmsg=None, usableOnsaleGroupsRsp=None, order_price=None, present_list=None, sku_apport_map=None,):
    self.error = error
    self.errmsg = errmsg
    self.usableOnsaleGroupsRsp = usableOnsaleGroupsRsp
    self.order_price = order_price
    self.present_list = present_list
    self.sku_apport_map = sku_apport_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.usableOnsaleGroupsRsp = UsableOnsaleGroupsRsp()
          self.usableOnsaleGroupsRsp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.order_price = PriceInfo()
          self.order_price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.present_list = []
          (_etype232, _size229) = iprot.readListBegin()
          for _i233 in xrange(_size229):
            _elem234 = onsale.ttypes.Present()
            _elem234.read(iprot)
            self.present_list.append(_elem234)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.sku_apport_map = {}
          (_ktype236, _vtype237, _size235 ) = iprot.readMapBegin()
          for _i239 in xrange(_size235):
            _key240 = iprot.readI64();
            _val241 = Apport()
            _val241.read(iprot)
            self.sku_apport_map[_key240] = _val241
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApportionRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.usableOnsaleGroupsRsp is not None:
      oprot.writeFieldBegin('usableOnsaleGroupsRsp', TType.STRUCT, 3)
      self.usableOnsaleGroupsRsp.write(oprot)
      oprot.writeFieldEnd()
    if self.order_price is not None:
      oprot.writeFieldBegin('order_price', TType.STRUCT, 4)
      self.order_price.write(oprot)
      oprot.writeFieldEnd()
    if self.present_list is not None:
      oprot.writeFieldBegin('present_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.present_list))
      for iter242 in self.present_list:
        iter242.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sku_apport_map is not None:
      oprot.writeFieldBegin('sku_apport_map', TType.MAP, 6)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sku_apport_map))
      for kiter243,viter244 in self.sku_apport_map.items():
        oprot.writeI64(kiter243)
        viter244.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.usableOnsaleGroupsRsp)
    value = (value * 31) ^ hash(self.order_price)
    value = (value * 31) ^ hash(self.present_list)
    value = (value * 31) ^ hash(self.sku_apport_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StepInfoReq:
  """
  Attributes:
   - onsale_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'onsale_group_id', None, None, ), # 1
  )

  def __init__(self, onsale_group_id=None,):
    self.onsale_group_id = onsale_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.onsale_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StepInfoReq')
    if self.onsale_group_id is not None:
      oprot.writeFieldBegin('onsale_group_id', TType.I32, 1)
      oprot.writeI32(self.onsale_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.onsale_group_id is None:
      raise TProtocol.TProtocolException(message='Required field onsale_group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.onsale_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StepInfoRsp:
  """
  Attributes:
   - error
   - errmsg
   - onsale_group
   - step_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRUCT, 'onsale_group', (onsale.ttypes.OnsaleGroup, onsale.ttypes.OnsaleGroup.thrift_spec), None, ), # 3
    (4, TType.LIST, 'step_list', (TType.STRUCT,(onsale.ttypes.Step, onsale.ttypes.Step.thrift_spec)), None, ), # 4
  )

  def __init__(self, error=None, errmsg=None, onsale_group=None, step_list=None,):
    self.error = error
    self.errmsg = errmsg
    self.onsale_group = onsale_group
    self.step_list = step_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.onsale_group = onsale.ttypes.OnsaleGroup()
          self.onsale_group.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.step_list = []
          (_etype248, _size245) = iprot.readListBegin()
          for _i249 in xrange(_size245):
            _elem250 = onsale.ttypes.Step()
            _elem250.read(iprot)
            self.step_list.append(_elem250)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StepInfoRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.onsale_group is not None:
      oprot.writeFieldBegin('onsale_group', TType.STRUCT, 3)
      self.onsale_group.write(oprot)
      oprot.writeFieldEnd()
    if self.step_list is not None:
      oprot.writeFieldBegin('step_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.step_list))
      for iter251 in self.step_list:
        iter251.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.onsale_group)
    value = (value * 31) ^ hash(self.step_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
