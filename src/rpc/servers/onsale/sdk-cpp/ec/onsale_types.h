/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef onsale_TYPES_H
#define onsale_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace onsale {

struct Error {
  enum type {
    OK = 0,
    FAILED = -10001,
    NO_DATA_YOU_EXPECTED = -10002,
    MYSQL_DISCONNECTED = -10003,
    MYSQL_EXECUTE_ERROR = -10004,
    REDIS_DISCONNECTED = -10005,
    REDIS_EXECUTE_ERROR = -10006,
    COUNT_OVERLOAD = -10007,
    WARE_LABEL_NOT_EXISTS = -10008,
    GROUP_NOT_EXISTS = -10009,
    INVALID_WARE_LABEL_ID = -10010,
    INVALID_SUB_TYPE = -10011,
    NO_USABLE_GROUP = -10012,
    WARE_LABEL_ID_REUSE = -10013,
    INVALID_RATE = -10014,
    INVALID_STEP_FULL = -10015,
    NO_STEP = -10016,
    INVALID_TIME = -10017
  };
};

extern const std::map<int, const char*> _Error_VALUES_TO_NAMES;

class InvalidOperation;

class MultipleCondition;

class WareLabel;

class WareLabelWares;

class Present;

class Step;

class OnsaleGroup;

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : fault(false), why(false) {}
  bool fault :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : fault((Error::type)0), why() {
  }

  virtual ~InvalidOperation() throw();
  Error::type fault;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_fault(const Error::type val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(fault == rhs.fault))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);
};

void swap(InvalidOperation &a, InvalidOperation &b);

typedef struct _MultipleCondition__isset {
  _MultipleCondition__isset() : andCondList(false), orCondList(false), orderCondList(false), limitCond(false) {}
  bool andCondList :1;
  bool orCondList :1;
  bool orderCondList :1;
  bool limitCond :1;
} _MultipleCondition__isset;

class MultipleCondition {
 public:

  static const char* ascii_fingerprint; // = "F723F4943AF7A19B3FC99469709BE072";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0x23,0xF4,0x94,0x3A,0xF7,0xA1,0x9B,0x3F,0xC9,0x94,0x69,0x70,0x9B,0xE0,0x72};

  MultipleCondition(const MultipleCondition&);
  MultipleCondition& operator=(const MultipleCondition&);
  MultipleCondition() : limitCond() {
  }

  virtual ~MultipleCondition() throw();
  std::vector<std::string>  andCondList;
  std::vector<std::string>  orCondList;
  std::vector<std::string>  orderCondList;
  std::string limitCond;

  _MultipleCondition__isset __isset;

  void __set_andCondList(const std::vector<std::string> & val);

  void __set_orCondList(const std::vector<std::string> & val);

  void __set_orderCondList(const std::vector<std::string> & val);

  void __set_limitCond(const std::string& val);

  bool operator == (const MultipleCondition & rhs) const
  {
    if (!(andCondList == rhs.andCondList))
      return false;
    if (!(orCondList == rhs.orCondList))
      return false;
    if (!(orderCondList == rhs.orderCondList))
      return false;
    if (!(limitCond == rhs.limitCond))
      return false;
    return true;
  }
  bool operator != (const MultipleCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultipleCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MultipleCondition& obj);
};

void swap(MultipleCondition &a, MultipleCondition &b);

typedef struct _WareLabel__isset {
  _WareLabel__isset() : name(false), label_type(false), scope_type(false), sub_type(false), seller_id(false), seller_slug(false), create_time(false), update_time(false), ware_label_id(false), create_man(false) {}
  bool name :1;
  bool label_type :1;
  bool scope_type :1;
  bool sub_type :1;
  bool seller_id :1;
  bool seller_slug :1;
  bool create_time :1;
  bool update_time :1;
  bool ware_label_id :1;
  bool create_man :1;
} _WareLabel__isset;

class WareLabel {
 public:

  static const char* ascii_fingerprint; // = "E5C0F8E0C1200E0DE5F29F2A65B00482";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xC0,0xF8,0xE0,0xC1,0x20,0x0E,0x0D,0xE5,0xF2,0x9F,0x2A,0x65,0xB0,0x04,0x82};

  WareLabel(const WareLabel&);
  WareLabel& operator=(const WareLabel&);
  WareLabel() : name(), label_type(0), scope_type(0), sub_type(0), seller_id(0), seller_slug(), create_time(0), update_time(0), ware_label_id(0), create_man() {
  }

  virtual ~WareLabel() throw();
  std::string name;
  int32_t label_type;
  int32_t scope_type;
  int32_t sub_type;
  int64_t seller_id;
  std::string seller_slug;
  int32_t create_time;
  int32_t update_time;
  int32_t ware_label_id;
  std::string create_man;

  _WareLabel__isset __isset;

  void __set_name(const std::string& val);

  void __set_label_type(const int32_t val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_seller_id(const int64_t val);

  void __set_seller_slug(const std::string& val);

  void __set_create_time(const int32_t val);

  void __set_update_time(const int32_t val);

  void __set_ware_label_id(const int32_t val);

  void __set_create_man(const std::string& val);

  bool operator == (const WareLabel & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(label_type == rhs.label_type))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(seller_slug == rhs.seller_slug))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(create_man == rhs.create_man))
      return false;
    return true;
  }
  bool operator != (const WareLabel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabel& obj);
};

void swap(WareLabel &a, WareLabel &b);

typedef struct _WareLabelWares__isset {
  _WareLabelWares__isset() : ware_label_id(false), ware_id(false), create_time(false) {}
  bool ware_label_id :1;
  bool ware_id :1;
  bool create_time :1;
} _WareLabelWares__isset;

class WareLabelWares {
 public:

  static const char* ascii_fingerprint; // = "A4A0F95E131942F14FC4C720956834FA";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xA0,0xF9,0x5E,0x13,0x19,0x42,0xF1,0x4F,0xC4,0xC7,0x20,0x95,0x68,0x34,0xFA};

  WareLabelWares(const WareLabelWares&);
  WareLabelWares& operator=(const WareLabelWares&);
  WareLabelWares() : ware_label_id(0), ware_id(0), create_time(0) {
  }

  virtual ~WareLabelWares() throw();
  int32_t ware_label_id;
  int64_t ware_id;
  int32_t create_time;

  _WareLabelWares__isset __isset;

  void __set_ware_label_id(const int32_t val);

  void __set_ware_id(const int64_t val);

  void __set_create_time(const int32_t val);

  bool operator == (const WareLabelWares & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(ware_id == rhs.ware_id))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    return true;
  }
  bool operator != (const WareLabelWares &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWares & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWares& obj);
};

void swap(WareLabelWares &a, WareLabelWares &b);

typedef struct _Present__isset {
  _Present__isset() : step_id(false), sku_id(false), sku_price(false), sku_count(false), sku_slug(false) {}
  bool step_id :1;
  bool sku_id :1;
  bool sku_price :1;
  bool sku_count :1;
  bool sku_slug :1;
} _Present__isset;

class Present {
 public:

  static const char* ascii_fingerprint; // = "92F43D58D7D46787A3D50FF88B115B77";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0xF4,0x3D,0x58,0xD7,0xD4,0x67,0x87,0xA3,0xD5,0x0F,0xF8,0x8B,0x11,0x5B,0x77};

  Present(const Present&);
  Present& operator=(const Present&);
  Present() : step_id(0), sku_id(0), sku_price(0), sku_count(0), sku_slug() {
  }

  virtual ~Present() throw();
  int32_t step_id;
  int64_t sku_id;
  double sku_price;
  int32_t sku_count;
  std::string sku_slug;

  _Present__isset __isset;

  void __set_step_id(const int32_t val);

  void __set_sku_id(const int64_t val);

  void __set_sku_price(const double val);

  void __set_sku_count(const int32_t val);

  void __set_sku_slug(const std::string& val);

  bool operator == (const Present & rhs) const
  {
    if (!(step_id == rhs.step_id))
      return false;
    if (!(sku_id == rhs.sku_id))
      return false;
    if (!(sku_price == rhs.sku_price))
      return false;
    if (!(sku_count == rhs.sku_count))
      return false;
    if (!(sku_slug == rhs.sku_slug))
      return false;
    return true;
  }
  bool operator != (const Present &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Present & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Present& obj);
};

void swap(Present &a, Present &b);

typedef struct _Step__isset {
  _Step__isset() : onsale_group_id(false), full_credit(false), favor_credit(false), favor_rate(false), full_count(false), full_rate(false), full_price(false), step_id(false) {}
  bool onsale_group_id :1;
  bool full_credit :1;
  bool favor_credit :1;
  bool favor_rate :1;
  bool full_count :1;
  bool full_rate :1;
  bool full_price :1;
  bool step_id :1;
} _Step__isset;

class Step {
 public:

  static const char* ascii_fingerprint; // = "F8D5440615C54895725C88CEF3EA255A";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0xD5,0x44,0x06,0x15,0xC5,0x48,0x95,0x72,0x5C,0x88,0xCE,0xF3,0xEA,0x25,0x5A};

  Step(const Step&);
  Step& operator=(const Step&);
  Step() : onsale_group_id(0), full_credit(0), favor_credit(0), favor_rate(0), full_count(0), full_rate(0), full_price(0), step_id(0) {
  }

  virtual ~Step() throw();
  int32_t onsale_group_id;
  double full_credit;
  double favor_credit;
  double favor_rate;
  int32_t full_count;
  double full_rate;
  double full_price;
  int32_t step_id;

  _Step__isset __isset;

  void __set_onsale_group_id(const int32_t val);

  void __set_full_credit(const double val);

  void __set_favor_credit(const double val);

  void __set_favor_rate(const double val);

  void __set_full_count(const int32_t val);

  void __set_full_rate(const double val);

  void __set_full_price(const double val);

  void __set_step_id(const int32_t val);

  bool operator == (const Step & rhs) const
  {
    if (!(onsale_group_id == rhs.onsale_group_id))
      return false;
    if (!(full_credit == rhs.full_credit))
      return false;
    if (!(favor_credit == rhs.favor_credit))
      return false;
    if (!(favor_rate == rhs.favor_rate))
      return false;
    if (!(full_count == rhs.full_count))
      return false;
    if (!(full_rate == rhs.full_rate))
      return false;
    if (!(full_price == rhs.full_price))
      return false;
    if (!(step_id == rhs.step_id))
      return false;
    return true;
  }
  bool operator != (const Step &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Step & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Step& obj);
};

void swap(Step &a, Step &b);

typedef struct _OnsaleGroup__isset {
  _OnsaleGroup__isset() : id(false), slug(false), name(false), title(false), comment(false), favor_type(false), label_type(false), involve_count(false), ware_label_id(false), start_time(false), end_time(false), create_time(false), update_time(false), verify_status(false), applicant(false), approver(false), modifier(false), jump_label(false), jump_data(false) {}
  bool id :1;
  bool slug :1;
  bool name :1;
  bool title :1;
  bool comment :1;
  bool favor_type :1;
  bool label_type :1;
  bool involve_count :1;
  bool ware_label_id :1;
  bool start_time :1;
  bool end_time :1;
  bool create_time :1;
  bool update_time :1;
  bool verify_status :1;
  bool applicant :1;
  bool approver :1;
  bool modifier :1;
  bool jump_label :1;
  bool jump_data :1;
} _OnsaleGroup__isset;

class OnsaleGroup {
 public:

  static const char* ascii_fingerprint; // = "58DD5D3C7471A68452B8EA88E167A067";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0xDD,0x5D,0x3C,0x74,0x71,0xA6,0x84,0x52,0xB8,0xEA,0x88,0xE1,0x67,0xA0,0x67};

  OnsaleGroup(const OnsaleGroup&);
  OnsaleGroup& operator=(const OnsaleGroup&);
  OnsaleGroup() : id(0), slug(), name(), title(), comment(), favor_type(0), label_type(0), involve_count(0), ware_label_id(0), start_time(0), end_time(0), create_time(0), update_time(0), verify_status(0), applicant(), approver(), modifier(), jump_label(), jump_data() {
  }

  virtual ~OnsaleGroup() throw();
  int32_t id;
  std::string slug;
  std::string name;
  std::string title;
  std::string comment;
  int32_t favor_type;
  int32_t label_type;
  int32_t involve_count;
  int32_t ware_label_id;
  int32_t start_time;
  int32_t end_time;
  int32_t create_time;
  int32_t update_time;
  int32_t verify_status;
  std::string applicant;
  std::string approver;
  std::string modifier;
  std::string jump_label;
  std::string jump_data;

  _OnsaleGroup__isset __isset;

  void __set_id(const int32_t val);

  void __set_slug(const std::string& val);

  void __set_name(const std::string& val);

  void __set_title(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_favor_type(const int32_t val);

  void __set_label_type(const int32_t val);

  void __set_involve_count(const int32_t val);

  void __set_ware_label_id(const int32_t val);

  void __set_start_time(const int32_t val);

  void __set_end_time(const int32_t val);

  void __set_create_time(const int32_t val);

  void __set_update_time(const int32_t val);

  void __set_verify_status(const int32_t val);

  void __set_applicant(const std::string& val);

  void __set_approver(const std::string& val);

  void __set_modifier(const std::string& val);

  void __set_jump_label(const std::string& val);

  void __set_jump_data(const std::string& val);

  bool operator == (const OnsaleGroup & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(slug == rhs.slug))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(favor_type == rhs.favor_type))
      return false;
    if (!(label_type == rhs.label_type))
      return false;
    if (!(involve_count == rhs.involve_count))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(start_time == rhs.start_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(verify_status == rhs.verify_status))
      return false;
    if (!(applicant == rhs.applicant))
      return false;
    if (!(approver == rhs.approver))
      return false;
    if (!(modifier == rhs.modifier))
      return false;
    if (!(jump_label == rhs.jump_label))
      return false;
    if (!(jump_data == rhs.jump_data))
      return false;
    return true;
  }
  bool operator != (const OnsaleGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleGroup& obj);
};

void swap(OnsaleGroup &a, OnsaleGroup &b);

} // namespace

#endif
