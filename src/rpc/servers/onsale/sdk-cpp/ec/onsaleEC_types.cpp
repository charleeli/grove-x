/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "onsaleEC_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace onsaleEC {


PriceInfo::~PriceInfo() throw() {
}


void PriceInfo::__set_market_price(const double val) {
  this->market_price = val;
}

void PriceInfo::__set_sale_price(const double val) {
  this->sale_price = val;
}

void PriceInfo::__set_pay_price(const double val) {
  this->pay_price = val;
}

void PriceInfo::__set_favor_price(const double val) {
  this->favor_price = val;
}

const char* PriceInfo::ascii_fingerprint = "D40B774F31F5CC6330E604960421B6CB";
const uint8_t PriceInfo::binary_fingerprint[16] = {0xD4,0x0B,0x77,0x4F,0x31,0xF5,0xCC,0x63,0x30,0xE6,0x04,0x96,0x04,0x21,0xB6,0xCB};

uint32_t PriceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->market_price);
          this->__isset.market_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sale_price);
          this->__isset.sale_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pay_price);
          this->__isset.pay_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor_price);
          this->__isset.favor_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PriceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PriceInfo");

  xfer += oprot->writeFieldBegin("market_price", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->market_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sale_price", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->sale_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_price", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pay_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_price", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->favor_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PriceInfo &a, PriceInfo &b) {
  using ::std::swap;
  swap(a.market_price, b.market_price);
  swap(a.sale_price, b.sale_price);
  swap(a.pay_price, b.pay_price);
  swap(a.favor_price, b.favor_price);
  swap(a.__isset, b.__isset);
}

PriceInfo::PriceInfo(const PriceInfo& other0) {
  market_price = other0.market_price;
  sale_price = other0.sale_price;
  pay_price = other0.pay_price;
  favor_price = other0.favor_price;
  __isset = other0.__isset;
}
PriceInfo& PriceInfo::operator=(const PriceInfo& other1) {
  market_price = other1.market_price;
  sale_price = other1.sale_price;
  pay_price = other1.pay_price;
  favor_price = other1.favor_price;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PriceInfo& obj) {
  using apache::thrift::to_string;
  out << "PriceInfo(";
  out << "market_price=" << to_string(obj.market_price);
  out << ", " << "sale_price=" << to_string(obj.sale_price);
  out << ", " << "pay_price=" << to_string(obj.pay_price);
  out << ", " << "favor_price=" << to_string(obj.favor_price);
  out << ")";
  return out;
}


SkuInfo::~SkuInfo() throw() {
}


void SkuInfo::__set_sku_id(const int64_t val) {
  this->sku_id = val;
}

void SkuInfo::__set_sku_count(const int32_t val) {
  this->sku_count = val;
}

void SkuInfo::__set_sale_price(const double val) {
  this->sale_price = val;
}

void SkuInfo::__set_market_price(const double val) {
  this->market_price = val;
}

void SkuInfo::__set_ware_id(const int64_t val) {
  this->ware_id = val;
}

void SkuInfo::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void SkuInfo::__set_item_id(const int64_t val) {
  this->item_id = val;
}

const char* SkuInfo::ascii_fingerprint = "F07A2908676510C62E744583533E2ECF";
const uint8_t SkuInfo::binary_fingerprint[16] = {0xF0,0x7A,0x29,0x08,0x67,0x65,0x10,0xC6,0x2E,0x74,0x45,0x83,0x53,0x3E,0x2E,0xCF};

uint32_t SkuInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sku_id);
          this->__isset.sku_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sku_count);
          this->__isset.sku_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sale_price);
          this->__isset.sale_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->market_price);
          this->__isset.market_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ware_id);
          this->__isset.ware_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->item_id);
          this->__isset.item_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SkuInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SkuInfo");

  xfer += oprot->writeFieldBegin("sku_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sku_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sku_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sale_price", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->sale_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("market_price", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->market_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->ware_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_id", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->item_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SkuInfo &a, SkuInfo &b) {
  using ::std::swap;
  swap(a.sku_id, b.sku_id);
  swap(a.sku_count, b.sku_count);
  swap(a.sale_price, b.sale_price);
  swap(a.market_price, b.market_price);
  swap(a.ware_id, b.ware_id);
  swap(a.seller_id, b.seller_id);
  swap(a.item_id, b.item_id);
  swap(a.__isset, b.__isset);
}

SkuInfo::SkuInfo(const SkuInfo& other2) {
  sku_id = other2.sku_id;
  sku_count = other2.sku_count;
  sale_price = other2.sale_price;
  market_price = other2.market_price;
  ware_id = other2.ware_id;
  seller_id = other2.seller_id;
  item_id = other2.item_id;
  __isset = other2.__isset;
}
SkuInfo& SkuInfo::operator=(const SkuInfo& other3) {
  sku_id = other3.sku_id;
  sku_count = other3.sku_count;
  sale_price = other3.sale_price;
  market_price = other3.market_price;
  ware_id = other3.ware_id;
  seller_id = other3.seller_id;
  item_id = other3.item_id;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SkuInfo& obj) {
  using apache::thrift::to_string;
  out << "SkuInfo(";
  out << "sku_id=" << to_string(obj.sku_id);
  out << ", " << "sku_count=" << to_string(obj.sku_count);
  out << ", " << "sale_price=" << to_string(obj.sale_price);
  out << ", " << "market_price=" << to_string(obj.market_price);
  out << ", " << "ware_id=" << to_string(obj.ware_id);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "item_id=" << to_string(obj.item_id);
  out << ")";
  return out;
}


Apport::~Apport() throw() {
}


void Apport::__set_sku_info(const SkuInfo& val) {
  this->sku_info = val;
}

void Apport::__set_price_info(const PriceInfo& val) {
  this->price_info = val;
}

void Apport::__set_has_onsale_group(const bool val) {
  this->has_onsale_group = val;
}

void Apport::__set_onsale_group(const  ::onsale::OnsaleGroup& val) {
  this->onsale_group = val;
}

void Apport::__set_has_ware_label(const bool val) {
  this->has_ware_label = val;
}

void Apport::__set_ware_label(const  ::onsale::WareLabel& val) {
  this->ware_label = val;
}

void Apport::__set_first_step(const  ::onsale::Step& val) {
  this->first_step = val;
}

void Apport::__set_has_curr_step(const bool val) {
  this->has_curr_step = val;
}

void Apport::__set_curr_step(const  ::onsale::Step& val) {
  this->curr_step = val;
}

void Apport::__set_has_next_step(const bool val) {
  this->has_next_step = val;
}

void Apport::__set_next_step(const  ::onsale::Step& val) {
  this->next_step = val;
}

void Apport::__set_differ_credit(const double val) {
  this->differ_credit = val;
}

void Apport::__set_differ_count(const int32_t val) {
  this->differ_count = val;
}

const char* Apport::ascii_fingerprint = "112A93993E96416FFE6E731DB74C08BF";
const uint8_t Apport::binary_fingerprint[16] = {0x11,0x2A,0x93,0x99,0x3E,0x96,0x41,0x6F,0xFE,0x6E,0x73,0x1D,0xB7,0x4C,0x08,0xBF};

uint32_t Apport::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sku_info.read(iprot);
          this->__isset.sku_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->price_info.read(iprot);
          this->__isset.price_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_onsale_group);
          this->__isset.has_onsale_group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->onsale_group.read(iprot);
          this->__isset.onsale_group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_ware_label);
          this->__isset.has_ware_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ware_label.read(iprot);
          this->__isset.ware_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->first_step.read(iprot);
          this->__isset.first_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_curr_step);
          this->__isset.has_curr_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->curr_step.read(iprot);
          this->__isset.curr_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_next_step);
          this->__isset.has_next_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->next_step.read(iprot);
          this->__isset.next_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->differ_credit);
          this->__isset.differ_credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->differ_count);
          this->__isset.differ_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Apport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Apport");

  xfer += oprot->writeFieldBegin("sku_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->sku_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->price_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_onsale_group", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_onsale_group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsale_group", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->onsale_group.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_ware_label", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->has_ware_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->ware_label.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_step", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->first_step.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_curr_step", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->has_curr_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("curr_step", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->curr_step.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_next_step", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->has_next_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("next_step", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->next_step.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("differ_credit", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->differ_credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("differ_count", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->differ_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Apport &a, Apport &b) {
  using ::std::swap;
  swap(a.sku_info, b.sku_info);
  swap(a.price_info, b.price_info);
  swap(a.has_onsale_group, b.has_onsale_group);
  swap(a.onsale_group, b.onsale_group);
  swap(a.has_ware_label, b.has_ware_label);
  swap(a.ware_label, b.ware_label);
  swap(a.first_step, b.first_step);
  swap(a.has_curr_step, b.has_curr_step);
  swap(a.curr_step, b.curr_step);
  swap(a.has_next_step, b.has_next_step);
  swap(a.next_step, b.next_step);
  swap(a.differ_credit, b.differ_credit);
  swap(a.differ_count, b.differ_count);
  swap(a.__isset, b.__isset);
}

Apport::Apport(const Apport& other4) {
  sku_info = other4.sku_info;
  price_info = other4.price_info;
  has_onsale_group = other4.has_onsale_group;
  onsale_group = other4.onsale_group;
  has_ware_label = other4.has_ware_label;
  ware_label = other4.ware_label;
  first_step = other4.first_step;
  has_curr_step = other4.has_curr_step;
  curr_step = other4.curr_step;
  has_next_step = other4.has_next_step;
  next_step = other4.next_step;
  differ_credit = other4.differ_credit;
  differ_count = other4.differ_count;
  __isset = other4.__isset;
}
Apport& Apport::operator=(const Apport& other5) {
  sku_info = other5.sku_info;
  price_info = other5.price_info;
  has_onsale_group = other5.has_onsale_group;
  onsale_group = other5.onsale_group;
  has_ware_label = other5.has_ware_label;
  ware_label = other5.ware_label;
  first_step = other5.first_step;
  has_curr_step = other5.has_curr_step;
  curr_step = other5.curr_step;
  has_next_step = other5.has_next_step;
  next_step = other5.next_step;
  differ_credit = other5.differ_credit;
  differ_count = other5.differ_count;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Apport& obj) {
  using apache::thrift::to_string;
  out << "Apport(";
  out << "sku_info=" << to_string(obj.sku_info);
  out << ", " << "price_info=" << to_string(obj.price_info);
  out << ", " << "has_onsale_group=" << to_string(obj.has_onsale_group);
  out << ", " << "onsale_group=" << to_string(obj.onsale_group);
  out << ", " << "has_ware_label=" << to_string(obj.has_ware_label);
  out << ", " << "ware_label=" << to_string(obj.ware_label);
  out << ", " << "first_step=" << to_string(obj.first_step);
  out << ", " << "has_curr_step=" << to_string(obj.has_curr_step);
  out << ", " << "curr_step=" << to_string(obj.curr_step);
  out << ", " << "has_next_step=" << to_string(obj.has_next_step);
  out << ", " << "next_step=" << to_string(obj.next_step);
  out << ", " << "differ_credit=" << to_string(obj.differ_credit);
  out << ", " << "differ_count=" << to_string(obj.differ_count);
  out << ")";
  return out;
}


UsableOnsaleGroupsReq::~UsableOnsaleGroupsReq() throw() {
}


void UsableOnsaleGroupsReq::__set_sku_list(const std::vector<SkuInfo> & val) {
  this->sku_list = val;
}

const char* UsableOnsaleGroupsReq::ascii_fingerprint = "863CF07C5F5C69D71742083117FA3401";
const uint8_t UsableOnsaleGroupsReq::binary_fingerprint[16] = {0x86,0x3C,0xF0,0x7C,0x5F,0x5C,0x69,0xD7,0x17,0x42,0x08,0x31,0x17,0xFA,0x34,0x01};

uint32_t UsableOnsaleGroupsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sku_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sku_list.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->sku_list.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->sku_list[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_sku_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sku_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UsableOnsaleGroupsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UsableOnsaleGroupsReq");

  xfer += oprot->writeFieldBegin("sku_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sku_list.size()));
    std::vector<SkuInfo> ::const_iterator _iter11;
    for (_iter11 = this->sku_list.begin(); _iter11 != this->sku_list.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UsableOnsaleGroupsReq &a, UsableOnsaleGroupsReq &b) {
  using ::std::swap;
  swap(a.sku_list, b.sku_list);
}

UsableOnsaleGroupsReq::UsableOnsaleGroupsReq(const UsableOnsaleGroupsReq& other12) {
  sku_list = other12.sku_list;
}
UsableOnsaleGroupsReq& UsableOnsaleGroupsReq::operator=(const UsableOnsaleGroupsReq& other13) {
  sku_list = other13.sku_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UsableOnsaleGroupsReq& obj) {
  using apache::thrift::to_string;
  out << "UsableOnsaleGroupsReq(";
  out << "sku_list=" << to_string(obj.sku_list);
  out << ")";
  return out;
}


UsableOnsaleGroupsRsp::~UsableOnsaleGroupsRsp() throw() {
}


void UsableOnsaleGroupsRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void UsableOnsaleGroupsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void UsableOnsaleGroupsRsp::__set_sku_list(const std::vector<SkuInfo> & val) {
  this->sku_list = val;
}

void UsableOnsaleGroupsRsp::__set_order_price(const PriceInfo& val) {
  this->order_price = val;
}

void UsableOnsaleGroupsRsp::__set_skuID_priceInfo_map(const std::map<int64_t, PriceInfo> & val) {
  this->skuID_priceInfo_map = val;
}

void UsableOnsaleGroupsRsp::__set_sku_map(const std::map<int64_t, SkuInfo> & val) {
  this->sku_map = val;
}

void UsableOnsaleGroupsRsp::__set_skuID_sellerID_map(const std::map<int64_t, int64_t> & val) {
  this->skuID_sellerID_map = val;
}

void UsableOnsaleGroupsRsp::__set_skuID_wareID_map(const std::map<int64_t, int64_t> & val) {
  this->skuID_wareID_map = val;
}

void UsableOnsaleGroupsRsp::__set_wareID_wareLabelID_map(const std::map<int64_t, int32_t> & val) {
  this->wareID_wareLabelID_map = val;
}

void UsableOnsaleGroupsRsp::__set_wareLabelID_wareLabel_map(const std::map<int32_t,  ::onsale::WareLabel> & val) {
  this->wareLabelID_wareLabel_map = val;
}

void UsableOnsaleGroupsRsp::__set_wareLabelID_onsaleGroupID_map(const std::map<int64_t, int32_t> & val) {
  this->wareLabelID_onsaleGroupID_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_onsaleGroup_map(const std::map<int32_t,  ::onsale::OnsaleGroup> & val) {
  this->onsaleGroupID_onsaleGroup_map = val;
}

void UsableOnsaleGroupsRsp::__set_skuID_onsaleGroup_map(const std::map<int64_t,  ::onsale::OnsaleGroup> & val) {
  this->skuID_onsaleGroup_map = val;
}

void UsableOnsaleGroupsRsp::__set_skuID_onsaleGroupID_map(const std::map<int64_t, int32_t> & val) {
  this->skuID_onsaleGroupID_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_skuIDSet_map(const std::map<int32_t, std::set<int64_t> > & val) {
  this->onsaleGroupID_skuIDSet_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_totalSalePrice_map(const std::map<int32_t, double> & val) {
  this->onsaleGroupID_totalSalePrice_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_totalCount_map(const std::map<int32_t, int32_t> & val) {
  this->onsaleGroupID_totalCount_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_totalFavorPrice_map(const std::map<int32_t, double> & val) {
  this->onsaleGroupID_totalFavorPrice_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_stepList_map(const std::map<int32_t, std::vector< ::onsale::Step> > & val) {
  this->onsaleGroupID_stepList_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_firstStep_map(const std::map<int32_t,  ::onsale::Step> & val) {
  this->onsaleGroupID_firstStep_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_currStep_map(const std::map<int32_t,  ::onsale::Step> & val) {
  this->onsaleGroupID_currStep_map = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_nextStep_map(const std::map<int32_t,  ::onsale::Step> & val) {
  this->onsaleGroupID_nextStep_map = val;
}

void UsableOnsaleGroupsRsp::__set_present_list(const std::vector< ::onsale::Present> & val) {
  this->present_list = val;
}

void UsableOnsaleGroupsRsp::__set_onsaleGroupID_currStepID_map(const std::map<int32_t, int32_t> & val) {
  this->onsaleGroupID_currStepID_map = val;
}

void UsableOnsaleGroupsRsp::__set_currStepID_presentList_map(const std::map<int32_t, std::vector< ::onsale::Present> > & val) {
  this->currStepID_presentList_map = val;
}

const char* UsableOnsaleGroupsRsp::ascii_fingerprint = "08C049662E653F2BC18AF185BD2205D4";
const uint8_t UsableOnsaleGroupsRsp::binary_fingerprint[16] = {0x08,0xC0,0x49,0x66,0x2E,0x65,0x3F,0x2B,0xC1,0x8A,0xF1,0x85,0xBD,0x22,0x05,0xD4};

uint32_t UsableOnsaleGroupsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->error = ( ::onsale::Error::type)ecast14;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sku_list.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->sku_list.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->sku_list[_i19].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sku_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->order_price.read(iprot);
          this->__isset.order_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skuID_priceInfo_map.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _ktype21;
            ::apache::thrift::protocol::TType _vtype22;
            xfer += iprot->readMapBegin(_ktype21, _vtype22, _size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              int64_t _key25;
              xfer += iprot->readI64(_key25);
              PriceInfo& _val26 = this->skuID_priceInfo_map[_key25];
              xfer += _val26.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skuID_priceInfo_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sku_map.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _ktype28;
            ::apache::thrift::protocol::TType _vtype29;
            xfer += iprot->readMapBegin(_ktype28, _vtype29, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              int64_t _key32;
              xfer += iprot->readI64(_key32);
              SkuInfo& _val33 = this->sku_map[_key32];
              xfer += _val33.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sku_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skuID_sellerID_map.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _ktype35;
            ::apache::thrift::protocol::TType _vtype36;
            xfer += iprot->readMapBegin(_ktype35, _vtype36, _size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              int64_t _key39;
              xfer += iprot->readI64(_key39);
              int64_t& _val40 = this->skuID_sellerID_map[_key39];
              xfer += iprot->readI64(_val40);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skuID_sellerID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skuID_wareID_map.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _ktype42;
            ::apache::thrift::protocol::TType _vtype43;
            xfer += iprot->readMapBegin(_ktype42, _vtype43, _size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              int64_t _key46;
              xfer += iprot->readI64(_key46);
              int64_t& _val47 = this->skuID_wareID_map[_key46];
              xfer += iprot->readI64(_val47);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skuID_wareID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->wareID_wareLabelID_map.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _ktype49;
            ::apache::thrift::protocol::TType _vtype50;
            xfer += iprot->readMapBegin(_ktype49, _vtype50, _size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              int64_t _key53;
              xfer += iprot->readI64(_key53);
              int32_t& _val54 = this->wareID_wareLabelID_map[_key53];
              xfer += iprot->readI32(_val54);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.wareID_wareLabelID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->wareLabelID_wareLabel_map.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _ktype56;
            ::apache::thrift::protocol::TType _vtype57;
            xfer += iprot->readMapBegin(_ktype56, _vtype57, _size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              int32_t _key60;
              xfer += iprot->readI32(_key60);
               ::onsale::WareLabel& _val61 = this->wareLabelID_wareLabel_map[_key60];
              xfer += _val61.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.wareLabelID_wareLabel_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->wareLabelID_onsaleGroupID_map.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _ktype63;
            ::apache::thrift::protocol::TType _vtype64;
            xfer += iprot->readMapBegin(_ktype63, _vtype64, _size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              int64_t _key67;
              xfer += iprot->readI64(_key67);
              int32_t& _val68 = this->wareLabelID_onsaleGroupID_map[_key67];
              xfer += iprot->readI32(_val68);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.wareLabelID_onsaleGroupID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_onsaleGroup_map.clear();
            uint32_t _size69;
            ::apache::thrift::protocol::TType _ktype70;
            ::apache::thrift::protocol::TType _vtype71;
            xfer += iprot->readMapBegin(_ktype70, _vtype71, _size69);
            uint32_t _i73;
            for (_i73 = 0; _i73 < _size69; ++_i73)
            {
              int32_t _key74;
              xfer += iprot->readI32(_key74);
               ::onsale::OnsaleGroup& _val75 = this->onsaleGroupID_onsaleGroup_map[_key74];
              xfer += _val75.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_onsaleGroup_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skuID_onsaleGroup_map.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _ktype77;
            ::apache::thrift::protocol::TType _vtype78;
            xfer += iprot->readMapBegin(_ktype77, _vtype78, _size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              int64_t _key81;
              xfer += iprot->readI64(_key81);
               ::onsale::OnsaleGroup& _val82 = this->skuID_onsaleGroup_map[_key81];
              xfer += _val82.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skuID_onsaleGroup_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skuID_onsaleGroupID_map.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _ktype84;
            ::apache::thrift::protocol::TType _vtype85;
            xfer += iprot->readMapBegin(_ktype84, _vtype85, _size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              int64_t _key88;
              xfer += iprot->readI64(_key88);
              int32_t& _val89 = this->skuID_onsaleGroupID_map[_key88];
              xfer += iprot->readI32(_val89);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skuID_onsaleGroupID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_skuIDSet_map.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _ktype91;
            ::apache::thrift::protocol::TType _vtype92;
            xfer += iprot->readMapBegin(_ktype91, _vtype92, _size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              int32_t _key95;
              xfer += iprot->readI32(_key95);
              std::set<int64_t> & _val96 = this->onsaleGroupID_skuIDSet_map[_key95];
              {
                _val96.clear();
                uint32_t _size97;
                ::apache::thrift::protocol::TType _etype100;
                xfer += iprot->readSetBegin(_etype100, _size97);
                uint32_t _i101;
                for (_i101 = 0; _i101 < _size97; ++_i101)
                {
                  int64_t _elem102;
                  xfer += iprot->readI64(_elem102);
                  _val96.insert(_elem102);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_skuIDSet_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_totalSalePrice_map.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _ktype104;
            ::apache::thrift::protocol::TType _vtype105;
            xfer += iprot->readMapBegin(_ktype104, _vtype105, _size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              int32_t _key108;
              xfer += iprot->readI32(_key108);
              double& _val109 = this->onsaleGroupID_totalSalePrice_map[_key108];
              xfer += iprot->readDouble(_val109);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_totalSalePrice_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_totalCount_map.clear();
            uint32_t _size110;
            ::apache::thrift::protocol::TType _ktype111;
            ::apache::thrift::protocol::TType _vtype112;
            xfer += iprot->readMapBegin(_ktype111, _vtype112, _size110);
            uint32_t _i114;
            for (_i114 = 0; _i114 < _size110; ++_i114)
            {
              int32_t _key115;
              xfer += iprot->readI32(_key115);
              int32_t& _val116 = this->onsaleGroupID_totalCount_map[_key115];
              xfer += iprot->readI32(_val116);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_totalCount_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_totalFavorPrice_map.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _ktype118;
            ::apache::thrift::protocol::TType _vtype119;
            xfer += iprot->readMapBegin(_ktype118, _vtype119, _size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              int32_t _key122;
              xfer += iprot->readI32(_key122);
              double& _val123 = this->onsaleGroupID_totalFavorPrice_map[_key122];
              xfer += iprot->readDouble(_val123);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_totalFavorPrice_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_stepList_map.clear();
            uint32_t _size124;
            ::apache::thrift::protocol::TType _ktype125;
            ::apache::thrift::protocol::TType _vtype126;
            xfer += iprot->readMapBegin(_ktype125, _vtype126, _size124);
            uint32_t _i128;
            for (_i128 = 0; _i128 < _size124; ++_i128)
            {
              int32_t _key129;
              xfer += iprot->readI32(_key129);
              std::vector< ::onsale::Step> & _val130 = this->onsaleGroupID_stepList_map[_key129];
              {
                _val130.clear();
                uint32_t _size131;
                ::apache::thrift::protocol::TType _etype134;
                xfer += iprot->readListBegin(_etype134, _size131);
                _val130.resize(_size131);
                uint32_t _i135;
                for (_i135 = 0; _i135 < _size131; ++_i135)
                {
                  xfer += _val130[_i135].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_stepList_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_firstStep_map.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _ktype137;
            ::apache::thrift::protocol::TType _vtype138;
            xfer += iprot->readMapBegin(_ktype137, _vtype138, _size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              int32_t _key141;
              xfer += iprot->readI32(_key141);
               ::onsale::Step& _val142 = this->onsaleGroupID_firstStep_map[_key141];
              xfer += _val142.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_firstStep_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_currStep_map.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _ktype144;
            ::apache::thrift::protocol::TType _vtype145;
            xfer += iprot->readMapBegin(_ktype144, _vtype145, _size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              int32_t _key148;
              xfer += iprot->readI32(_key148);
               ::onsale::Step& _val149 = this->onsaleGroupID_currStep_map[_key148];
              xfer += _val149.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_currStep_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_nextStep_map.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _ktype151;
            ::apache::thrift::protocol::TType _vtype152;
            xfer += iprot->readMapBegin(_ktype151, _vtype152, _size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              int32_t _key155;
              xfer += iprot->readI32(_key155);
               ::onsale::Step& _val156 = this->onsaleGroupID_nextStep_map[_key155];
              xfer += _val156.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_nextStep_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->present_list.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->present_list.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->present_list[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.present_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->onsaleGroupID_currStepID_map.clear();
            uint32_t _size162;
            ::apache::thrift::protocol::TType _ktype163;
            ::apache::thrift::protocol::TType _vtype164;
            xfer += iprot->readMapBegin(_ktype163, _vtype164, _size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              int32_t _key167;
              xfer += iprot->readI32(_key167);
              int32_t& _val168 = this->onsaleGroupID_currStepID_map[_key167];
              xfer += iprot->readI32(_val168);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.onsaleGroupID_currStepID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->currStepID_presentList_map.clear();
            uint32_t _size169;
            ::apache::thrift::protocol::TType _ktype170;
            ::apache::thrift::protocol::TType _vtype171;
            xfer += iprot->readMapBegin(_ktype170, _vtype171, _size169);
            uint32_t _i173;
            for (_i173 = 0; _i173 < _size169; ++_i173)
            {
              int32_t _key174;
              xfer += iprot->readI32(_key174);
              std::vector< ::onsale::Present> & _val175 = this->currStepID_presentList_map[_key174];
              {
                _val175.clear();
                uint32_t _size176;
                ::apache::thrift::protocol::TType _etype179;
                xfer += iprot->readListBegin(_etype179, _size176);
                _val175.resize(_size176);
                uint32_t _i180;
                for (_i180 = 0; _i180 < _size176; ++_i180)
                {
                  xfer += _val175[_i180].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.currStepID_presentList_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsableOnsaleGroupsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UsableOnsaleGroupsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sku_list.size()));
    std::vector<SkuInfo> ::const_iterator _iter181;
    for (_iter181 = this->sku_list.begin(); _iter181 != this->sku_list.end(); ++_iter181)
    {
      xfer += (*_iter181).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_price", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->order_price.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skuID_priceInfo_map", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->skuID_priceInfo_map.size()));
    std::map<int64_t, PriceInfo> ::const_iterator _iter182;
    for (_iter182 = this->skuID_priceInfo_map.begin(); _iter182 != this->skuID_priceInfo_map.end(); ++_iter182)
    {
      xfer += oprot->writeI64(_iter182->first);
      xfer += _iter182->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_map", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sku_map.size()));
    std::map<int64_t, SkuInfo> ::const_iterator _iter183;
    for (_iter183 = this->sku_map.begin(); _iter183 != this->sku_map.end(); ++_iter183)
    {
      xfer += oprot->writeI64(_iter183->first);
      xfer += _iter183->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skuID_sellerID_map", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->skuID_sellerID_map.size()));
    std::map<int64_t, int64_t> ::const_iterator _iter184;
    for (_iter184 = this->skuID_sellerID_map.begin(); _iter184 != this->skuID_sellerID_map.end(); ++_iter184)
    {
      xfer += oprot->writeI64(_iter184->first);
      xfer += oprot->writeI64(_iter184->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skuID_wareID_map", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->skuID_wareID_map.size()));
    std::map<int64_t, int64_t> ::const_iterator _iter185;
    for (_iter185 = this->skuID_wareID_map.begin(); _iter185 != this->skuID_wareID_map.end(); ++_iter185)
    {
      xfer += oprot->writeI64(_iter185->first);
      xfer += oprot->writeI64(_iter185->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareID_wareLabelID_map", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->wareID_wareLabelID_map.size()));
    std::map<int64_t, int32_t> ::const_iterator _iter186;
    for (_iter186 = this->wareID_wareLabelID_map.begin(); _iter186 != this->wareID_wareLabelID_map.end(); ++_iter186)
    {
      xfer += oprot->writeI64(_iter186->first);
      xfer += oprot->writeI32(_iter186->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabelID_wareLabel_map", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->wareLabelID_wareLabel_map.size()));
    std::map<int32_t,  ::onsale::WareLabel> ::const_iterator _iter187;
    for (_iter187 = this->wareLabelID_wareLabel_map.begin(); _iter187 != this->wareLabelID_wareLabel_map.end(); ++_iter187)
    {
      xfer += oprot->writeI32(_iter187->first);
      xfer += _iter187->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabelID_onsaleGroupID_map", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->wareLabelID_onsaleGroupID_map.size()));
    std::map<int64_t, int32_t> ::const_iterator _iter188;
    for (_iter188 = this->wareLabelID_onsaleGroupID_map.begin(); _iter188 != this->wareLabelID_onsaleGroupID_map.end(); ++_iter188)
    {
      xfer += oprot->writeI64(_iter188->first);
      xfer += oprot->writeI32(_iter188->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_onsaleGroup_map", ::apache::thrift::protocol::T_MAP, 12);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->onsaleGroupID_onsaleGroup_map.size()));
    std::map<int32_t,  ::onsale::OnsaleGroup> ::const_iterator _iter189;
    for (_iter189 = this->onsaleGroupID_onsaleGroup_map.begin(); _iter189 != this->onsaleGroupID_onsaleGroup_map.end(); ++_iter189)
    {
      xfer += oprot->writeI32(_iter189->first);
      xfer += _iter189->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skuID_onsaleGroup_map", ::apache::thrift::protocol::T_MAP, 13);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->skuID_onsaleGroup_map.size()));
    std::map<int64_t,  ::onsale::OnsaleGroup> ::const_iterator _iter190;
    for (_iter190 = this->skuID_onsaleGroup_map.begin(); _iter190 != this->skuID_onsaleGroup_map.end(); ++_iter190)
    {
      xfer += oprot->writeI64(_iter190->first);
      xfer += _iter190->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skuID_onsaleGroupID_map", ::apache::thrift::protocol::T_MAP, 14);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->skuID_onsaleGroupID_map.size()));
    std::map<int64_t, int32_t> ::const_iterator _iter191;
    for (_iter191 = this->skuID_onsaleGroupID_map.begin(); _iter191 != this->skuID_onsaleGroupID_map.end(); ++_iter191)
    {
      xfer += oprot->writeI64(_iter191->first);
      xfer += oprot->writeI32(_iter191->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_skuIDSet_map", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->onsaleGroupID_skuIDSet_map.size()));
    std::map<int32_t, std::set<int64_t> > ::const_iterator _iter192;
    for (_iter192 = this->onsaleGroupID_skuIDSet_map.begin(); _iter192 != this->onsaleGroupID_skuIDSet_map.end(); ++_iter192)
    {
      xfer += oprot->writeI32(_iter192->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(_iter192->second.size()));
        std::set<int64_t> ::const_iterator _iter193;
        for (_iter193 = _iter192->second.begin(); _iter193 != _iter192->second.end(); ++_iter193)
        {
          xfer += oprot->writeI64((*_iter193));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_totalSalePrice_map", ::apache::thrift::protocol::T_MAP, 16);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->onsaleGroupID_totalSalePrice_map.size()));
    std::map<int32_t, double> ::const_iterator _iter194;
    for (_iter194 = this->onsaleGroupID_totalSalePrice_map.begin(); _iter194 != this->onsaleGroupID_totalSalePrice_map.end(); ++_iter194)
    {
      xfer += oprot->writeI32(_iter194->first);
      xfer += oprot->writeDouble(_iter194->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_totalCount_map", ::apache::thrift::protocol::T_MAP, 17);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->onsaleGroupID_totalCount_map.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter195;
    for (_iter195 = this->onsaleGroupID_totalCount_map.begin(); _iter195 != this->onsaleGroupID_totalCount_map.end(); ++_iter195)
    {
      xfer += oprot->writeI32(_iter195->first);
      xfer += oprot->writeI32(_iter195->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_totalFavorPrice_map", ::apache::thrift::protocol::T_MAP, 18);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->onsaleGroupID_totalFavorPrice_map.size()));
    std::map<int32_t, double> ::const_iterator _iter196;
    for (_iter196 = this->onsaleGroupID_totalFavorPrice_map.begin(); _iter196 != this->onsaleGroupID_totalFavorPrice_map.end(); ++_iter196)
    {
      xfer += oprot->writeI32(_iter196->first);
      xfer += oprot->writeDouble(_iter196->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_stepList_map", ::apache::thrift::protocol::T_MAP, 19);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->onsaleGroupID_stepList_map.size()));
    std::map<int32_t, std::vector< ::onsale::Step> > ::const_iterator _iter197;
    for (_iter197 = this->onsaleGroupID_stepList_map.begin(); _iter197 != this->onsaleGroupID_stepList_map.end(); ++_iter197)
    {
      xfer += oprot->writeI32(_iter197->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter197->second.size()));
        std::vector< ::onsale::Step> ::const_iterator _iter198;
        for (_iter198 = _iter197->second.begin(); _iter198 != _iter197->second.end(); ++_iter198)
        {
          xfer += (*_iter198).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_firstStep_map", ::apache::thrift::protocol::T_MAP, 20);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->onsaleGroupID_firstStep_map.size()));
    std::map<int32_t,  ::onsale::Step> ::const_iterator _iter199;
    for (_iter199 = this->onsaleGroupID_firstStep_map.begin(); _iter199 != this->onsaleGroupID_firstStep_map.end(); ++_iter199)
    {
      xfer += oprot->writeI32(_iter199->first);
      xfer += _iter199->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_currStep_map", ::apache::thrift::protocol::T_MAP, 21);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->onsaleGroupID_currStep_map.size()));
    std::map<int32_t,  ::onsale::Step> ::const_iterator _iter200;
    for (_iter200 = this->onsaleGroupID_currStep_map.begin(); _iter200 != this->onsaleGroupID_currStep_map.end(); ++_iter200)
    {
      xfer += oprot->writeI32(_iter200->first);
      xfer += _iter200->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_nextStep_map", ::apache::thrift::protocol::T_MAP, 22);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->onsaleGroupID_nextStep_map.size()));
    std::map<int32_t,  ::onsale::Step> ::const_iterator _iter201;
    for (_iter201 = this->onsaleGroupID_nextStep_map.begin(); _iter201 != this->onsaleGroupID_nextStep_map.end(); ++_iter201)
    {
      xfer += oprot->writeI32(_iter201->first);
      xfer += _iter201->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("present_list", ::apache::thrift::protocol::T_LIST, 23);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->present_list.size()));
    std::vector< ::onsale::Present> ::const_iterator _iter202;
    for (_iter202 = this->present_list.begin(); _iter202 != this->present_list.end(); ++_iter202)
    {
      xfer += (*_iter202).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupID_currStepID_map", ::apache::thrift::protocol::T_MAP, 24);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->onsaleGroupID_currStepID_map.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter203;
    for (_iter203 = this->onsaleGroupID_currStepID_map.begin(); _iter203 != this->onsaleGroupID_currStepID_map.end(); ++_iter203)
    {
      xfer += oprot->writeI32(_iter203->first);
      xfer += oprot->writeI32(_iter203->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currStepID_presentList_map", ::apache::thrift::protocol::T_MAP, 25);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->currStepID_presentList_map.size()));
    std::map<int32_t, std::vector< ::onsale::Present> > ::const_iterator _iter204;
    for (_iter204 = this->currStepID_presentList_map.begin(); _iter204 != this->currStepID_presentList_map.end(); ++_iter204)
    {
      xfer += oprot->writeI32(_iter204->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter204->second.size()));
        std::vector< ::onsale::Present> ::const_iterator _iter205;
        for (_iter205 = _iter204->second.begin(); _iter205 != _iter204->second.end(); ++_iter205)
        {
          xfer += (*_iter205).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UsableOnsaleGroupsRsp &a, UsableOnsaleGroupsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.sku_list, b.sku_list);
  swap(a.order_price, b.order_price);
  swap(a.skuID_priceInfo_map, b.skuID_priceInfo_map);
  swap(a.sku_map, b.sku_map);
  swap(a.skuID_sellerID_map, b.skuID_sellerID_map);
  swap(a.skuID_wareID_map, b.skuID_wareID_map);
  swap(a.wareID_wareLabelID_map, b.wareID_wareLabelID_map);
  swap(a.wareLabelID_wareLabel_map, b.wareLabelID_wareLabel_map);
  swap(a.wareLabelID_onsaleGroupID_map, b.wareLabelID_onsaleGroupID_map);
  swap(a.onsaleGroupID_onsaleGroup_map, b.onsaleGroupID_onsaleGroup_map);
  swap(a.skuID_onsaleGroup_map, b.skuID_onsaleGroup_map);
  swap(a.skuID_onsaleGroupID_map, b.skuID_onsaleGroupID_map);
  swap(a.onsaleGroupID_skuIDSet_map, b.onsaleGroupID_skuIDSet_map);
  swap(a.onsaleGroupID_totalSalePrice_map, b.onsaleGroupID_totalSalePrice_map);
  swap(a.onsaleGroupID_totalCount_map, b.onsaleGroupID_totalCount_map);
  swap(a.onsaleGroupID_totalFavorPrice_map, b.onsaleGroupID_totalFavorPrice_map);
  swap(a.onsaleGroupID_stepList_map, b.onsaleGroupID_stepList_map);
  swap(a.onsaleGroupID_firstStep_map, b.onsaleGroupID_firstStep_map);
  swap(a.onsaleGroupID_currStep_map, b.onsaleGroupID_currStep_map);
  swap(a.onsaleGroupID_nextStep_map, b.onsaleGroupID_nextStep_map);
  swap(a.present_list, b.present_list);
  swap(a.onsaleGroupID_currStepID_map, b.onsaleGroupID_currStepID_map);
  swap(a.currStepID_presentList_map, b.currStepID_presentList_map);
  swap(a.__isset, b.__isset);
}

UsableOnsaleGroupsRsp::UsableOnsaleGroupsRsp(const UsableOnsaleGroupsRsp& other206) {
  error = other206.error;
  errmsg = other206.errmsg;
  sku_list = other206.sku_list;
  order_price = other206.order_price;
  skuID_priceInfo_map = other206.skuID_priceInfo_map;
  sku_map = other206.sku_map;
  skuID_sellerID_map = other206.skuID_sellerID_map;
  skuID_wareID_map = other206.skuID_wareID_map;
  wareID_wareLabelID_map = other206.wareID_wareLabelID_map;
  wareLabelID_wareLabel_map = other206.wareLabelID_wareLabel_map;
  wareLabelID_onsaleGroupID_map = other206.wareLabelID_onsaleGroupID_map;
  onsaleGroupID_onsaleGroup_map = other206.onsaleGroupID_onsaleGroup_map;
  skuID_onsaleGroup_map = other206.skuID_onsaleGroup_map;
  skuID_onsaleGroupID_map = other206.skuID_onsaleGroupID_map;
  onsaleGroupID_skuIDSet_map = other206.onsaleGroupID_skuIDSet_map;
  onsaleGroupID_totalSalePrice_map = other206.onsaleGroupID_totalSalePrice_map;
  onsaleGroupID_totalCount_map = other206.onsaleGroupID_totalCount_map;
  onsaleGroupID_totalFavorPrice_map = other206.onsaleGroupID_totalFavorPrice_map;
  onsaleGroupID_stepList_map = other206.onsaleGroupID_stepList_map;
  onsaleGroupID_firstStep_map = other206.onsaleGroupID_firstStep_map;
  onsaleGroupID_currStep_map = other206.onsaleGroupID_currStep_map;
  onsaleGroupID_nextStep_map = other206.onsaleGroupID_nextStep_map;
  present_list = other206.present_list;
  onsaleGroupID_currStepID_map = other206.onsaleGroupID_currStepID_map;
  currStepID_presentList_map = other206.currStepID_presentList_map;
  __isset = other206.__isset;
}
UsableOnsaleGroupsRsp& UsableOnsaleGroupsRsp::operator=(const UsableOnsaleGroupsRsp& other207) {
  error = other207.error;
  errmsg = other207.errmsg;
  sku_list = other207.sku_list;
  order_price = other207.order_price;
  skuID_priceInfo_map = other207.skuID_priceInfo_map;
  sku_map = other207.sku_map;
  skuID_sellerID_map = other207.skuID_sellerID_map;
  skuID_wareID_map = other207.skuID_wareID_map;
  wareID_wareLabelID_map = other207.wareID_wareLabelID_map;
  wareLabelID_wareLabel_map = other207.wareLabelID_wareLabel_map;
  wareLabelID_onsaleGroupID_map = other207.wareLabelID_onsaleGroupID_map;
  onsaleGroupID_onsaleGroup_map = other207.onsaleGroupID_onsaleGroup_map;
  skuID_onsaleGroup_map = other207.skuID_onsaleGroup_map;
  skuID_onsaleGroupID_map = other207.skuID_onsaleGroupID_map;
  onsaleGroupID_skuIDSet_map = other207.onsaleGroupID_skuIDSet_map;
  onsaleGroupID_totalSalePrice_map = other207.onsaleGroupID_totalSalePrice_map;
  onsaleGroupID_totalCount_map = other207.onsaleGroupID_totalCount_map;
  onsaleGroupID_totalFavorPrice_map = other207.onsaleGroupID_totalFavorPrice_map;
  onsaleGroupID_stepList_map = other207.onsaleGroupID_stepList_map;
  onsaleGroupID_firstStep_map = other207.onsaleGroupID_firstStep_map;
  onsaleGroupID_currStep_map = other207.onsaleGroupID_currStep_map;
  onsaleGroupID_nextStep_map = other207.onsaleGroupID_nextStep_map;
  present_list = other207.present_list;
  onsaleGroupID_currStepID_map = other207.onsaleGroupID_currStepID_map;
  currStepID_presentList_map = other207.currStepID_presentList_map;
  __isset = other207.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UsableOnsaleGroupsRsp& obj) {
  using apache::thrift::to_string;
  out << "UsableOnsaleGroupsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "sku_list=" << to_string(obj.sku_list);
  out << ", " << "order_price=" << to_string(obj.order_price);
  out << ", " << "skuID_priceInfo_map=" << to_string(obj.skuID_priceInfo_map);
  out << ", " << "sku_map=" << to_string(obj.sku_map);
  out << ", " << "skuID_sellerID_map=" << to_string(obj.skuID_sellerID_map);
  out << ", " << "skuID_wareID_map=" << to_string(obj.skuID_wareID_map);
  out << ", " << "wareID_wareLabelID_map=" << to_string(obj.wareID_wareLabelID_map);
  out << ", " << "wareLabelID_wareLabel_map=" << to_string(obj.wareLabelID_wareLabel_map);
  out << ", " << "wareLabelID_onsaleGroupID_map=" << to_string(obj.wareLabelID_onsaleGroupID_map);
  out << ", " << "onsaleGroupID_onsaleGroup_map=" << to_string(obj.onsaleGroupID_onsaleGroup_map);
  out << ", " << "skuID_onsaleGroup_map=" << to_string(obj.skuID_onsaleGroup_map);
  out << ", " << "skuID_onsaleGroupID_map=" << to_string(obj.skuID_onsaleGroupID_map);
  out << ", " << "onsaleGroupID_skuIDSet_map=" << to_string(obj.onsaleGroupID_skuIDSet_map);
  out << ", " << "onsaleGroupID_totalSalePrice_map=" << to_string(obj.onsaleGroupID_totalSalePrice_map);
  out << ", " << "onsaleGroupID_totalCount_map=" << to_string(obj.onsaleGroupID_totalCount_map);
  out << ", " << "onsaleGroupID_totalFavorPrice_map=" << to_string(obj.onsaleGroupID_totalFavorPrice_map);
  out << ", " << "onsaleGroupID_stepList_map=" << to_string(obj.onsaleGroupID_stepList_map);
  out << ", " << "onsaleGroupID_firstStep_map=" << to_string(obj.onsaleGroupID_firstStep_map);
  out << ", " << "onsaleGroupID_currStep_map=" << to_string(obj.onsaleGroupID_currStep_map);
  out << ", " << "onsaleGroupID_nextStep_map=" << to_string(obj.onsaleGroupID_nextStep_map);
  out << ", " << "present_list=" << to_string(obj.present_list);
  out << ", " << "onsaleGroupID_currStepID_map=" << to_string(obj.onsaleGroupID_currStepID_map);
  out << ", " << "currStepID_presentList_map=" << to_string(obj.currStepID_presentList_map);
  out << ")";
  return out;
}


ApportionReq::~ApportionReq() throw() {
}


void ApportionReq::__set_sku_list(const std::vector<SkuInfo> & val) {
  this->sku_list = val;
}

const char* ApportionReq::ascii_fingerprint = "863CF07C5F5C69D71742083117FA3401";
const uint8_t ApportionReq::binary_fingerprint[16] = {0x86,0x3C,0xF0,0x7C,0x5F,0x5C,0x69,0xD7,0x17,0x42,0x08,0x31,0x17,0xFA,0x34,0x01};

uint32_t ApportionReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sku_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sku_list.clear();
            uint32_t _size208;
            ::apache::thrift::protocol::TType _etype211;
            xfer += iprot->readListBegin(_etype211, _size208);
            this->sku_list.resize(_size208);
            uint32_t _i212;
            for (_i212 = 0; _i212 < _size208; ++_i212)
            {
              xfer += this->sku_list[_i212].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_sku_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sku_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApportionReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ApportionReq");

  xfer += oprot->writeFieldBegin("sku_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sku_list.size()));
    std::vector<SkuInfo> ::const_iterator _iter213;
    for (_iter213 = this->sku_list.begin(); _iter213 != this->sku_list.end(); ++_iter213)
    {
      xfer += (*_iter213).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ApportionReq &a, ApportionReq &b) {
  using ::std::swap;
  swap(a.sku_list, b.sku_list);
}

ApportionReq::ApportionReq(const ApportionReq& other214) {
  sku_list = other214.sku_list;
}
ApportionReq& ApportionReq::operator=(const ApportionReq& other215) {
  sku_list = other215.sku_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ApportionReq& obj) {
  using apache::thrift::to_string;
  out << "ApportionReq(";
  out << "sku_list=" << to_string(obj.sku_list);
  out << ")";
  return out;
}


ApportionRsp::~ApportionRsp() throw() {
}


void ApportionRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void ApportionRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void ApportionRsp::__set_usableOnsaleGroupsRsp(const UsableOnsaleGroupsRsp& val) {
  this->usableOnsaleGroupsRsp = val;
}

void ApportionRsp::__set_order_price(const PriceInfo& val) {
  this->order_price = val;
}

void ApportionRsp::__set_present_list(const std::vector< ::onsale::Present> & val) {
  this->present_list = val;
}

void ApportionRsp::__set_sku_apport_map(const std::map<int64_t, Apport> & val) {
  this->sku_apport_map = val;
}

const char* ApportionRsp::ascii_fingerprint = "6F091E766FCD60C0334F00DDEC5A922A";
const uint8_t ApportionRsp::binary_fingerprint[16] = {0x6F,0x09,0x1E,0x76,0x6F,0xCD,0x60,0xC0,0x33,0x4F,0x00,0xDD,0xEC,0x5A,0x92,0x2A};

uint32_t ApportionRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast216;
          xfer += iprot->readI32(ecast216);
          this->error = ( ::onsale::Error::type)ecast216;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->usableOnsaleGroupsRsp.read(iprot);
          this->__isset.usableOnsaleGroupsRsp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->order_price.read(iprot);
          this->__isset.order_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->present_list.clear();
            uint32_t _size217;
            ::apache::thrift::protocol::TType _etype220;
            xfer += iprot->readListBegin(_etype220, _size217);
            this->present_list.resize(_size217);
            uint32_t _i221;
            for (_i221 = 0; _i221 < _size217; ++_i221)
            {
              xfer += this->present_list[_i221].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.present_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sku_apport_map.clear();
            uint32_t _size222;
            ::apache::thrift::protocol::TType _ktype223;
            ::apache::thrift::protocol::TType _vtype224;
            xfer += iprot->readMapBegin(_ktype223, _vtype224, _size222);
            uint32_t _i226;
            for (_i226 = 0; _i226 < _size222; ++_i226)
            {
              int64_t _key227;
              xfer += iprot->readI64(_key227);
              Apport& _val228 = this->sku_apport_map[_key227];
              xfer += _val228.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sku_apport_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApportionRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ApportionRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usableOnsaleGroupsRsp", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->usableOnsaleGroupsRsp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_price", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->order_price.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("present_list", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->present_list.size()));
    std::vector< ::onsale::Present> ::const_iterator _iter229;
    for (_iter229 = this->present_list.begin(); _iter229 != this->present_list.end(); ++_iter229)
    {
      xfer += (*_iter229).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_apport_map", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sku_apport_map.size()));
    std::map<int64_t, Apport> ::const_iterator _iter230;
    for (_iter230 = this->sku_apport_map.begin(); _iter230 != this->sku_apport_map.end(); ++_iter230)
    {
      xfer += oprot->writeI64(_iter230->first);
      xfer += _iter230->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ApportionRsp &a, ApportionRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.usableOnsaleGroupsRsp, b.usableOnsaleGroupsRsp);
  swap(a.order_price, b.order_price);
  swap(a.present_list, b.present_list);
  swap(a.sku_apport_map, b.sku_apport_map);
  swap(a.__isset, b.__isset);
}

ApportionRsp::ApportionRsp(const ApportionRsp& other231) {
  error = other231.error;
  errmsg = other231.errmsg;
  usableOnsaleGroupsRsp = other231.usableOnsaleGroupsRsp;
  order_price = other231.order_price;
  present_list = other231.present_list;
  sku_apport_map = other231.sku_apport_map;
  __isset = other231.__isset;
}
ApportionRsp& ApportionRsp::operator=(const ApportionRsp& other232) {
  error = other232.error;
  errmsg = other232.errmsg;
  usableOnsaleGroupsRsp = other232.usableOnsaleGroupsRsp;
  order_price = other232.order_price;
  present_list = other232.present_list;
  sku_apport_map = other232.sku_apport_map;
  __isset = other232.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ApportionRsp& obj) {
  using apache::thrift::to_string;
  out << "ApportionRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "usableOnsaleGroupsRsp=" << to_string(obj.usableOnsaleGroupsRsp);
  out << ", " << "order_price=" << to_string(obj.order_price);
  out << ", " << "present_list=" << to_string(obj.present_list);
  out << ", " << "sku_apport_map=" << to_string(obj.sku_apport_map);
  out << ")";
  return out;
}


StepInfoReq::~StepInfoReq() throw() {
}


void StepInfoReq::__set_onsale_group_id(const int32_t val) {
  this->onsale_group_id = val;
}

const char* StepInfoReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t StepInfoReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t StepInfoReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_onsale_group_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onsale_group_id);
          isset_onsale_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_onsale_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StepInfoReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StepInfoReq");

  xfer += oprot->writeFieldBegin("onsale_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->onsale_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StepInfoReq &a, StepInfoReq &b) {
  using ::std::swap;
  swap(a.onsale_group_id, b.onsale_group_id);
}

StepInfoReq::StepInfoReq(const StepInfoReq& other233) {
  onsale_group_id = other233.onsale_group_id;
}
StepInfoReq& StepInfoReq::operator=(const StepInfoReq& other234) {
  onsale_group_id = other234.onsale_group_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StepInfoReq& obj) {
  using apache::thrift::to_string;
  out << "StepInfoReq(";
  out << "onsale_group_id=" << to_string(obj.onsale_group_id);
  out << ")";
  return out;
}


StepInfoRsp::~StepInfoRsp() throw() {
}


void StepInfoRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void StepInfoRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void StepInfoRsp::__set_onsale_group(const  ::onsale::OnsaleGroup& val) {
  this->onsale_group = val;
}

void StepInfoRsp::__set_step_list(const std::vector< ::onsale::Step> & val) {
  this->step_list = val;
}

const char* StepInfoRsp::ascii_fingerprint = "35B0396975A4E16A6EAB5A7DE6F97599";
const uint8_t StepInfoRsp::binary_fingerprint[16] = {0x35,0xB0,0x39,0x69,0x75,0xA4,0xE1,0x6A,0x6E,0xAB,0x5A,0x7D,0xE6,0xF9,0x75,0x99};

uint32_t StepInfoRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast235;
          xfer += iprot->readI32(ecast235);
          this->error = ( ::onsale::Error::type)ecast235;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->onsale_group.read(iprot);
          this->__isset.onsale_group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->step_list.clear();
            uint32_t _size236;
            ::apache::thrift::protocol::TType _etype239;
            xfer += iprot->readListBegin(_etype239, _size236);
            this->step_list.resize(_size236);
            uint32_t _i240;
            for (_i240 = 0; _i240 < _size236; ++_i240)
            {
              xfer += this->step_list[_i240].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.step_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StepInfoRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StepInfoRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsale_group", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->onsale_group.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->step_list.size()));
    std::vector< ::onsale::Step> ::const_iterator _iter241;
    for (_iter241 = this->step_list.begin(); _iter241 != this->step_list.end(); ++_iter241)
    {
      xfer += (*_iter241).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StepInfoRsp &a, StepInfoRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.onsale_group, b.onsale_group);
  swap(a.step_list, b.step_list);
  swap(a.__isset, b.__isset);
}

StepInfoRsp::StepInfoRsp(const StepInfoRsp& other242) {
  error = other242.error;
  errmsg = other242.errmsg;
  onsale_group = other242.onsale_group;
  step_list = other242.step_list;
  __isset = other242.__isset;
}
StepInfoRsp& StepInfoRsp::operator=(const StepInfoRsp& other243) {
  error = other243.error;
  errmsg = other243.errmsg;
  onsale_group = other243.onsale_group;
  step_list = other243.step_list;
  __isset = other243.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StepInfoRsp& obj) {
  using apache::thrift::to_string;
  out << "StepInfoRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "onsale_group=" << to_string(obj.onsale_group);
  out << ", " << "step_list=" << to_string(obj.step_list);
  out << ")";
  return out;
}

} // namespace
