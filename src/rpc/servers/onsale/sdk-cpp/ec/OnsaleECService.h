/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OnsaleECService_H
#define OnsaleECService_H

#include <thrift/TDispatchProcessor.h>
#include "onsaleEC_types.h"

namespace onsaleEC {

class OnsaleECServiceIf {
 public:
  virtual ~OnsaleECServiceIf() {}
  virtual void getUsableOnsaleGroups(UsableOnsaleGroupsRsp& _return, const UsableOnsaleGroupsReq& usableOnsaleGroupsReq) = 0;
  virtual void getApportion(ApportionRsp& _return, const ApportionReq& apportionReq) = 0;
  virtual void getStepInfo(StepInfoRsp& _return, const StepInfoReq& stepInfoReq) = 0;
};

class OnsaleECServiceIfFactory {
 public:
  typedef OnsaleECServiceIf Handler;

  virtual ~OnsaleECServiceIfFactory() {}

  virtual OnsaleECServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(OnsaleECServiceIf* /* handler */) = 0;
};

class OnsaleECServiceIfSingletonFactory : virtual public OnsaleECServiceIfFactory {
 public:
  OnsaleECServiceIfSingletonFactory(const boost::shared_ptr<OnsaleECServiceIf>& iface) : iface_(iface) {}
  virtual ~OnsaleECServiceIfSingletonFactory() {}

  virtual OnsaleECServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(OnsaleECServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<OnsaleECServiceIf> iface_;
};

class OnsaleECServiceNull : virtual public OnsaleECServiceIf {
 public:
  virtual ~OnsaleECServiceNull() {}
  void getUsableOnsaleGroups(UsableOnsaleGroupsRsp& /* _return */, const UsableOnsaleGroupsReq& /* usableOnsaleGroupsReq */) {
    return;
  }
  void getApportion(ApportionRsp& /* _return */, const ApportionReq& /* apportionReq */) {
    return;
  }
  void getStepInfo(StepInfoRsp& /* _return */, const StepInfoReq& /* stepInfoReq */) {
    return;
  }
};

typedef struct _OnsaleECService_getUsableOnsaleGroups_args__isset {
  _OnsaleECService_getUsableOnsaleGroups_args__isset() : usableOnsaleGroupsReq(false) {}
  bool usableOnsaleGroupsReq :1;
} _OnsaleECService_getUsableOnsaleGroups_args__isset;

class OnsaleECService_getUsableOnsaleGroups_args {
 public:

  static const char* ascii_fingerprint; // = "BB458F73D738C86CD626CA441391E3BD";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x45,0x8F,0x73,0xD7,0x38,0xC8,0x6C,0xD6,0x26,0xCA,0x44,0x13,0x91,0xE3,0xBD};

  OnsaleECService_getUsableOnsaleGroups_args(const OnsaleECService_getUsableOnsaleGroups_args&);
  OnsaleECService_getUsableOnsaleGroups_args& operator=(const OnsaleECService_getUsableOnsaleGroups_args&);
  OnsaleECService_getUsableOnsaleGroups_args() {
  }

  virtual ~OnsaleECService_getUsableOnsaleGroups_args() throw();
  UsableOnsaleGroupsReq usableOnsaleGroupsReq;

  _OnsaleECService_getUsableOnsaleGroups_args__isset __isset;

  void __set_usableOnsaleGroupsReq(const UsableOnsaleGroupsReq& val);

  bool operator == (const OnsaleECService_getUsableOnsaleGroups_args & rhs) const
  {
    if (!(usableOnsaleGroupsReq == rhs.usableOnsaleGroupsReq))
      return false;
    return true;
  }
  bool operator != (const OnsaleECService_getUsableOnsaleGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleECService_getUsableOnsaleGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getUsableOnsaleGroups_args& obj);
};


class OnsaleECService_getUsableOnsaleGroups_pargs {
 public:

  static const char* ascii_fingerprint; // = "BB458F73D738C86CD626CA441391E3BD";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x45,0x8F,0x73,0xD7,0x38,0xC8,0x6C,0xD6,0x26,0xCA,0x44,0x13,0x91,0xE3,0xBD};


  virtual ~OnsaleECService_getUsableOnsaleGroups_pargs() throw();
  const UsableOnsaleGroupsReq* usableOnsaleGroupsReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getUsableOnsaleGroups_pargs& obj);
};

typedef struct _OnsaleECService_getUsableOnsaleGroups_result__isset {
  _OnsaleECService_getUsableOnsaleGroups_result__isset() : success(false) {}
  bool success :1;
} _OnsaleECService_getUsableOnsaleGroups_result__isset;

class OnsaleECService_getUsableOnsaleGroups_result {
 public:

  static const char* ascii_fingerprint; // = "5A04821B6535B169257BEDE7C41C0A20";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x04,0x82,0x1B,0x65,0x35,0xB1,0x69,0x25,0x7B,0xED,0xE7,0xC4,0x1C,0x0A,0x20};

  OnsaleECService_getUsableOnsaleGroups_result(const OnsaleECService_getUsableOnsaleGroups_result&);
  OnsaleECService_getUsableOnsaleGroups_result& operator=(const OnsaleECService_getUsableOnsaleGroups_result&);
  OnsaleECService_getUsableOnsaleGroups_result() {
  }

  virtual ~OnsaleECService_getUsableOnsaleGroups_result() throw();
  UsableOnsaleGroupsRsp success;

  _OnsaleECService_getUsableOnsaleGroups_result__isset __isset;

  void __set_success(const UsableOnsaleGroupsRsp& val);

  bool operator == (const OnsaleECService_getUsableOnsaleGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OnsaleECService_getUsableOnsaleGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleECService_getUsableOnsaleGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getUsableOnsaleGroups_result& obj);
};

typedef struct _OnsaleECService_getUsableOnsaleGroups_presult__isset {
  _OnsaleECService_getUsableOnsaleGroups_presult__isset() : success(false) {}
  bool success :1;
} _OnsaleECService_getUsableOnsaleGroups_presult__isset;

class OnsaleECService_getUsableOnsaleGroups_presult {
 public:

  static const char* ascii_fingerprint; // = "5A04821B6535B169257BEDE7C41C0A20";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x04,0x82,0x1B,0x65,0x35,0xB1,0x69,0x25,0x7B,0xED,0xE7,0xC4,0x1C,0x0A,0x20};


  virtual ~OnsaleECService_getUsableOnsaleGroups_presult() throw();
  UsableOnsaleGroupsRsp* success;

  _OnsaleECService_getUsableOnsaleGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getUsableOnsaleGroups_presult& obj);
};

typedef struct _OnsaleECService_getApportion_args__isset {
  _OnsaleECService_getApportion_args__isset() : apportionReq(false) {}
  bool apportionReq :1;
} _OnsaleECService_getApportion_args__isset;

class OnsaleECService_getApportion_args {
 public:

  static const char* ascii_fingerprint; // = "BB458F73D738C86CD626CA441391E3BD";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x45,0x8F,0x73,0xD7,0x38,0xC8,0x6C,0xD6,0x26,0xCA,0x44,0x13,0x91,0xE3,0xBD};

  OnsaleECService_getApportion_args(const OnsaleECService_getApportion_args&);
  OnsaleECService_getApportion_args& operator=(const OnsaleECService_getApportion_args&);
  OnsaleECService_getApportion_args() {
  }

  virtual ~OnsaleECService_getApportion_args() throw();
  ApportionReq apportionReq;

  _OnsaleECService_getApportion_args__isset __isset;

  void __set_apportionReq(const ApportionReq& val);

  bool operator == (const OnsaleECService_getApportion_args & rhs) const
  {
    if (!(apportionReq == rhs.apportionReq))
      return false;
    return true;
  }
  bool operator != (const OnsaleECService_getApportion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleECService_getApportion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getApportion_args& obj);
};


class OnsaleECService_getApportion_pargs {
 public:

  static const char* ascii_fingerprint; // = "BB458F73D738C86CD626CA441391E3BD";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x45,0x8F,0x73,0xD7,0x38,0xC8,0x6C,0xD6,0x26,0xCA,0x44,0x13,0x91,0xE3,0xBD};


  virtual ~OnsaleECService_getApportion_pargs() throw();
  const ApportionReq* apportionReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getApportion_pargs& obj);
};

typedef struct _OnsaleECService_getApportion_result__isset {
  _OnsaleECService_getApportion_result__isset() : success(false) {}
  bool success :1;
} _OnsaleECService_getApportion_result__isset;

class OnsaleECService_getApportion_result {
 public:

  static const char* ascii_fingerprint; // = "8252D0223F74FAAFA8309A0080854A11";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x52,0xD0,0x22,0x3F,0x74,0xFA,0xAF,0xA8,0x30,0x9A,0x00,0x80,0x85,0x4A,0x11};

  OnsaleECService_getApportion_result(const OnsaleECService_getApportion_result&);
  OnsaleECService_getApportion_result& operator=(const OnsaleECService_getApportion_result&);
  OnsaleECService_getApportion_result() {
  }

  virtual ~OnsaleECService_getApportion_result() throw();
  ApportionRsp success;

  _OnsaleECService_getApportion_result__isset __isset;

  void __set_success(const ApportionRsp& val);

  bool operator == (const OnsaleECService_getApportion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OnsaleECService_getApportion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleECService_getApportion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getApportion_result& obj);
};

typedef struct _OnsaleECService_getApportion_presult__isset {
  _OnsaleECService_getApportion_presult__isset() : success(false) {}
  bool success :1;
} _OnsaleECService_getApportion_presult__isset;

class OnsaleECService_getApportion_presult {
 public:

  static const char* ascii_fingerprint; // = "8252D0223F74FAAFA8309A0080854A11";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x52,0xD0,0x22,0x3F,0x74,0xFA,0xAF,0xA8,0x30,0x9A,0x00,0x80,0x85,0x4A,0x11};


  virtual ~OnsaleECService_getApportion_presult() throw();
  ApportionRsp* success;

  _OnsaleECService_getApportion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getApportion_presult& obj);
};

typedef struct _OnsaleECService_getStepInfo_args__isset {
  _OnsaleECService_getStepInfo_args__isset() : stepInfoReq(false) {}
  bool stepInfoReq :1;
} _OnsaleECService_getStepInfo_args__isset;

class OnsaleECService_getStepInfo_args {
 public:

  static const char* ascii_fingerprint; // = "B3124E95D8111DAEB63649B04CEB6D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x12,0x4E,0x95,0xD8,0x11,0x1D,0xAE,0xB6,0x36,0x49,0xB0,0x4C,0xEB,0x6D,0x5F};

  OnsaleECService_getStepInfo_args(const OnsaleECService_getStepInfo_args&);
  OnsaleECService_getStepInfo_args& operator=(const OnsaleECService_getStepInfo_args&);
  OnsaleECService_getStepInfo_args() {
  }

  virtual ~OnsaleECService_getStepInfo_args() throw();
  StepInfoReq stepInfoReq;

  _OnsaleECService_getStepInfo_args__isset __isset;

  void __set_stepInfoReq(const StepInfoReq& val);

  bool operator == (const OnsaleECService_getStepInfo_args & rhs) const
  {
    if (!(stepInfoReq == rhs.stepInfoReq))
      return false;
    return true;
  }
  bool operator != (const OnsaleECService_getStepInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleECService_getStepInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getStepInfo_args& obj);
};


class OnsaleECService_getStepInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3124E95D8111DAEB63649B04CEB6D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x12,0x4E,0x95,0xD8,0x11,0x1D,0xAE,0xB6,0x36,0x49,0xB0,0x4C,0xEB,0x6D,0x5F};


  virtual ~OnsaleECService_getStepInfo_pargs() throw();
  const StepInfoReq* stepInfoReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getStepInfo_pargs& obj);
};

typedef struct _OnsaleECService_getStepInfo_result__isset {
  _OnsaleECService_getStepInfo_result__isset() : success(false) {}
  bool success :1;
} _OnsaleECService_getStepInfo_result__isset;

class OnsaleECService_getStepInfo_result {
 public:

  static const char* ascii_fingerprint; // = "AB61F5E815AE1E3021AE5BD071A46B92";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x61,0xF5,0xE8,0x15,0xAE,0x1E,0x30,0x21,0xAE,0x5B,0xD0,0x71,0xA4,0x6B,0x92};

  OnsaleECService_getStepInfo_result(const OnsaleECService_getStepInfo_result&);
  OnsaleECService_getStepInfo_result& operator=(const OnsaleECService_getStepInfo_result&);
  OnsaleECService_getStepInfo_result() {
  }

  virtual ~OnsaleECService_getStepInfo_result() throw();
  StepInfoRsp success;

  _OnsaleECService_getStepInfo_result__isset __isset;

  void __set_success(const StepInfoRsp& val);

  bool operator == (const OnsaleECService_getStepInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OnsaleECService_getStepInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleECService_getStepInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getStepInfo_result& obj);
};

typedef struct _OnsaleECService_getStepInfo_presult__isset {
  _OnsaleECService_getStepInfo_presult__isset() : success(false) {}
  bool success :1;
} _OnsaleECService_getStepInfo_presult__isset;

class OnsaleECService_getStepInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "AB61F5E815AE1E3021AE5BD071A46B92";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x61,0xF5,0xE8,0x15,0xAE,0x1E,0x30,0x21,0xAE,0x5B,0xD0,0x71,0xA4,0x6B,0x92};


  virtual ~OnsaleECService_getStepInfo_presult() throw();
  StepInfoRsp* success;

  _OnsaleECService_getStepInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const OnsaleECService_getStepInfo_presult& obj);
};

class OnsaleECServiceClient : virtual public OnsaleECServiceIf {
 public:
  OnsaleECServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OnsaleECServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUsableOnsaleGroups(UsableOnsaleGroupsRsp& _return, const UsableOnsaleGroupsReq& usableOnsaleGroupsReq);
  void send_getUsableOnsaleGroups(const UsableOnsaleGroupsReq& usableOnsaleGroupsReq);
  void recv_getUsableOnsaleGroups(UsableOnsaleGroupsRsp& _return);
  void getApportion(ApportionRsp& _return, const ApportionReq& apportionReq);
  void send_getApportion(const ApportionReq& apportionReq);
  void recv_getApportion(ApportionRsp& _return);
  void getStepInfo(StepInfoRsp& _return, const StepInfoReq& stepInfoReq);
  void send_getStepInfo(const StepInfoReq& stepInfoReq);
  void recv_getStepInfo(StepInfoRsp& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OnsaleECServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<OnsaleECServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (OnsaleECServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUsableOnsaleGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApportion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStepInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OnsaleECServiceProcessor(boost::shared_ptr<OnsaleECServiceIf> iface) :
    iface_(iface) {
    processMap_["getUsableOnsaleGroups"] = &OnsaleECServiceProcessor::process_getUsableOnsaleGroups;
    processMap_["getApportion"] = &OnsaleECServiceProcessor::process_getApportion;
    processMap_["getStepInfo"] = &OnsaleECServiceProcessor::process_getStepInfo;
  }

  virtual ~OnsaleECServiceProcessor() {}
};

class OnsaleECServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  OnsaleECServiceProcessorFactory(const ::boost::shared_ptr< OnsaleECServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< OnsaleECServiceIfFactory > handlerFactory_;
};

class OnsaleECServiceMultiface : virtual public OnsaleECServiceIf {
 public:
  OnsaleECServiceMultiface(std::vector<boost::shared_ptr<OnsaleECServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OnsaleECServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<OnsaleECServiceIf> > ifaces_;
  OnsaleECServiceMultiface() {}
  void add(boost::shared_ptr<OnsaleECServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUsableOnsaleGroups(UsableOnsaleGroupsRsp& _return, const UsableOnsaleGroupsReq& usableOnsaleGroupsReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUsableOnsaleGroups(_return, usableOnsaleGroupsReq);
    }
    ifaces_[i]->getUsableOnsaleGroups(_return, usableOnsaleGroupsReq);
    return;
  }

  void getApportion(ApportionRsp& _return, const ApportionReq& apportionReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApportion(_return, apportionReq);
    }
    ifaces_[i]->getApportion(_return, apportionReq);
    return;
  }

  void getStepInfo(StepInfoRsp& _return, const StepInfoReq& stepInfoReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStepInfo(_return, stepInfoReq);
    }
    ifaces_[i]->getStepInfo(_return, stepInfoReq);
    return;
  }

};

} // namespace

#endif
