/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef onsaleEC_TYPES_H
#define onsaleEC_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "onsale_types.h"


namespace onsaleEC {

class PriceInfo;

class SkuInfo;

class Apport;

class UsableOnsaleGroupsReq;

class UsableOnsaleGroupsRsp;

class ApportionReq;

class ApportionRsp;

class StepInfoReq;

class StepInfoRsp;

typedef struct _PriceInfo__isset {
  _PriceInfo__isset() : market_price(false), sale_price(false), pay_price(false), favor_price(false) {}
  bool market_price :1;
  bool sale_price :1;
  bool pay_price :1;
  bool favor_price :1;
} _PriceInfo__isset;

class PriceInfo {
 public:

  static const char* ascii_fingerprint; // = "D40B774F31F5CC6330E604960421B6CB";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x0B,0x77,0x4F,0x31,0xF5,0xCC,0x63,0x30,0xE6,0x04,0x96,0x04,0x21,0xB6,0xCB};

  PriceInfo(const PriceInfo&);
  PriceInfo& operator=(const PriceInfo&);
  PriceInfo() : market_price(0), sale_price(0), pay_price(0), favor_price(0) {
  }

  virtual ~PriceInfo() throw();
  double market_price;
  double sale_price;
  double pay_price;
  double favor_price;

  _PriceInfo__isset __isset;

  void __set_market_price(const double val);

  void __set_sale_price(const double val);

  void __set_pay_price(const double val);

  void __set_favor_price(const double val);

  bool operator == (const PriceInfo & rhs) const
  {
    if (!(market_price == rhs.market_price))
      return false;
    if (!(sale_price == rhs.sale_price))
      return false;
    if (!(pay_price == rhs.pay_price))
      return false;
    if (!(favor_price == rhs.favor_price))
      return false;
    return true;
  }
  bool operator != (const PriceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PriceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PriceInfo& obj);
};

void swap(PriceInfo &a, PriceInfo &b);

typedef struct _SkuInfo__isset {
  _SkuInfo__isset() : sku_id(false), sku_count(false), sale_price(false), market_price(false), ware_id(false), seller_id(false), item_id(false) {}
  bool sku_id :1;
  bool sku_count :1;
  bool sale_price :1;
  bool market_price :1;
  bool ware_id :1;
  bool seller_id :1;
  bool item_id :1;
} _SkuInfo__isset;

class SkuInfo {
 public:

  static const char* ascii_fingerprint; // = "F07A2908676510C62E744583533E2ECF";
  static const uint8_t binary_fingerprint[16]; // = {0xF0,0x7A,0x29,0x08,0x67,0x65,0x10,0xC6,0x2E,0x74,0x45,0x83,0x53,0x3E,0x2E,0xCF};

  SkuInfo(const SkuInfo&);
  SkuInfo& operator=(const SkuInfo&);
  SkuInfo() : sku_id(0), sku_count(0), sale_price(0), market_price(0), ware_id(0), seller_id(0), item_id(0) {
  }

  virtual ~SkuInfo() throw();
  int64_t sku_id;
  int32_t sku_count;
  double sale_price;
  double market_price;
  int64_t ware_id;
  int64_t seller_id;
  int64_t item_id;

  _SkuInfo__isset __isset;

  void __set_sku_id(const int64_t val);

  void __set_sku_count(const int32_t val);

  void __set_sale_price(const double val);

  void __set_market_price(const double val);

  void __set_ware_id(const int64_t val);

  void __set_seller_id(const int64_t val);

  void __set_item_id(const int64_t val);

  bool operator == (const SkuInfo & rhs) const
  {
    if (!(sku_id == rhs.sku_id))
      return false;
    if (!(sku_count == rhs.sku_count))
      return false;
    if (!(sale_price == rhs.sale_price))
      return false;
    if (!(market_price == rhs.market_price))
      return false;
    if (!(ware_id == rhs.ware_id))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(item_id == rhs.item_id))
      return false;
    return true;
  }
  bool operator != (const SkuInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkuInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SkuInfo& obj);
};

void swap(SkuInfo &a, SkuInfo &b);

typedef struct _Apport__isset {
  _Apport__isset() : sku_info(false), price_info(false), has_onsale_group(false), onsale_group(false), has_ware_label(false), ware_label(false), first_step(false), has_curr_step(false), curr_step(false), has_next_step(false), next_step(false), differ_credit(false), differ_count(false) {}
  bool sku_info :1;
  bool price_info :1;
  bool has_onsale_group :1;
  bool onsale_group :1;
  bool has_ware_label :1;
  bool ware_label :1;
  bool first_step :1;
  bool has_curr_step :1;
  bool curr_step :1;
  bool has_next_step :1;
  bool next_step :1;
  bool differ_credit :1;
  bool differ_count :1;
} _Apport__isset;

class Apport {
 public:

  static const char* ascii_fingerprint; // = "112A93993E96416FFE6E731DB74C08BF";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x2A,0x93,0x99,0x3E,0x96,0x41,0x6F,0xFE,0x6E,0x73,0x1D,0xB7,0x4C,0x08,0xBF};

  Apport(const Apport&);
  Apport& operator=(const Apport&);
  Apport() : has_onsale_group(0), has_ware_label(0), has_curr_step(0), has_next_step(0), differ_credit(0), differ_count(0) {
  }

  virtual ~Apport() throw();
  SkuInfo sku_info;
  PriceInfo price_info;
  bool has_onsale_group;
   ::onsale::OnsaleGroup onsale_group;
  bool has_ware_label;
   ::onsale::WareLabel ware_label;
   ::onsale::Step first_step;
  bool has_curr_step;
   ::onsale::Step curr_step;
  bool has_next_step;
   ::onsale::Step next_step;
  double differ_credit;
  int32_t differ_count;

  _Apport__isset __isset;

  void __set_sku_info(const SkuInfo& val);

  void __set_price_info(const PriceInfo& val);

  void __set_has_onsale_group(const bool val);

  void __set_onsale_group(const  ::onsale::OnsaleGroup& val);

  void __set_has_ware_label(const bool val);

  void __set_ware_label(const  ::onsale::WareLabel& val);

  void __set_first_step(const  ::onsale::Step& val);

  void __set_has_curr_step(const bool val);

  void __set_curr_step(const  ::onsale::Step& val);

  void __set_has_next_step(const bool val);

  void __set_next_step(const  ::onsale::Step& val);

  void __set_differ_credit(const double val);

  void __set_differ_count(const int32_t val);

  bool operator == (const Apport & rhs) const
  {
    if (!(sku_info == rhs.sku_info))
      return false;
    if (!(price_info == rhs.price_info))
      return false;
    if (!(has_onsale_group == rhs.has_onsale_group))
      return false;
    if (!(onsale_group == rhs.onsale_group))
      return false;
    if (!(has_ware_label == rhs.has_ware_label))
      return false;
    if (!(ware_label == rhs.ware_label))
      return false;
    if (!(first_step == rhs.first_step))
      return false;
    if (!(has_curr_step == rhs.has_curr_step))
      return false;
    if (!(curr_step == rhs.curr_step))
      return false;
    if (!(has_next_step == rhs.has_next_step))
      return false;
    if (!(next_step == rhs.next_step))
      return false;
    if (!(differ_credit == rhs.differ_credit))
      return false;
    if (!(differ_count == rhs.differ_count))
      return false;
    return true;
  }
  bool operator != (const Apport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Apport& obj);
};

void swap(Apport &a, Apport &b);


class UsableOnsaleGroupsReq {
 public:

  static const char* ascii_fingerprint; // = "863CF07C5F5C69D71742083117FA3401";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x3C,0xF0,0x7C,0x5F,0x5C,0x69,0xD7,0x17,0x42,0x08,0x31,0x17,0xFA,0x34,0x01};

  UsableOnsaleGroupsReq(const UsableOnsaleGroupsReq&);
  UsableOnsaleGroupsReq& operator=(const UsableOnsaleGroupsReq&);
  UsableOnsaleGroupsReq() {
  }

  virtual ~UsableOnsaleGroupsReq() throw();
  std::vector<SkuInfo>  sku_list;

  void __set_sku_list(const std::vector<SkuInfo> & val);

  bool operator == (const UsableOnsaleGroupsReq & rhs) const
  {
    if (!(sku_list == rhs.sku_list))
      return false;
    return true;
  }
  bool operator != (const UsableOnsaleGroupsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsableOnsaleGroupsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UsableOnsaleGroupsReq& obj);
};

void swap(UsableOnsaleGroupsReq &a, UsableOnsaleGroupsReq &b);

typedef struct _UsableOnsaleGroupsRsp__isset {
  _UsableOnsaleGroupsRsp__isset() : error(false), errmsg(false), sku_list(false), order_price(false), skuID_priceInfo_map(false), sku_map(false), skuID_sellerID_map(false), skuID_wareID_map(false), wareID_wareLabelID_map(false), wareLabelID_wareLabel_map(false), wareLabelID_onsaleGroupID_map(false), onsaleGroupID_onsaleGroup_map(false), skuID_onsaleGroup_map(false), skuID_onsaleGroupID_map(false), onsaleGroupID_skuIDSet_map(false), onsaleGroupID_totalSalePrice_map(false), onsaleGroupID_totalCount_map(false), onsaleGroupID_totalFavorPrice_map(false), onsaleGroupID_stepList_map(false), onsaleGroupID_firstStep_map(false), onsaleGroupID_currStep_map(false), onsaleGroupID_nextStep_map(false), present_list(false), onsaleGroupID_currStepID_map(false), currStepID_presentList_map(false) {}
  bool error :1;
  bool errmsg :1;
  bool sku_list :1;
  bool order_price :1;
  bool skuID_priceInfo_map :1;
  bool sku_map :1;
  bool skuID_sellerID_map :1;
  bool skuID_wareID_map :1;
  bool wareID_wareLabelID_map :1;
  bool wareLabelID_wareLabel_map :1;
  bool wareLabelID_onsaleGroupID_map :1;
  bool onsaleGroupID_onsaleGroup_map :1;
  bool skuID_onsaleGroup_map :1;
  bool skuID_onsaleGroupID_map :1;
  bool onsaleGroupID_skuIDSet_map :1;
  bool onsaleGroupID_totalSalePrice_map :1;
  bool onsaleGroupID_totalCount_map :1;
  bool onsaleGroupID_totalFavorPrice_map :1;
  bool onsaleGroupID_stepList_map :1;
  bool onsaleGroupID_firstStep_map :1;
  bool onsaleGroupID_currStep_map :1;
  bool onsaleGroupID_nextStep_map :1;
  bool present_list :1;
  bool onsaleGroupID_currStepID_map :1;
  bool currStepID_presentList_map :1;
} _UsableOnsaleGroupsRsp__isset;

class UsableOnsaleGroupsRsp {
 public:

  static const char* ascii_fingerprint; // = "08C049662E653F2BC18AF185BD2205D4";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0xC0,0x49,0x66,0x2E,0x65,0x3F,0x2B,0xC1,0x8A,0xF1,0x85,0xBD,0x22,0x05,0xD4};

  UsableOnsaleGroupsRsp(const UsableOnsaleGroupsRsp&);
  UsableOnsaleGroupsRsp& operator=(const UsableOnsaleGroupsRsp&);
  UsableOnsaleGroupsRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~UsableOnsaleGroupsRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector<SkuInfo>  sku_list;
  PriceInfo order_price;
  std::map<int64_t, PriceInfo>  skuID_priceInfo_map;
  std::map<int64_t, SkuInfo>  sku_map;
  std::map<int64_t, int64_t>  skuID_sellerID_map;
  std::map<int64_t, int64_t>  skuID_wareID_map;
  std::map<int64_t, int32_t>  wareID_wareLabelID_map;
  std::map<int32_t,  ::onsale::WareLabel>  wareLabelID_wareLabel_map;
  std::map<int64_t, int32_t>  wareLabelID_onsaleGroupID_map;
  std::map<int32_t,  ::onsale::OnsaleGroup>  onsaleGroupID_onsaleGroup_map;
  std::map<int64_t,  ::onsale::OnsaleGroup>  skuID_onsaleGroup_map;
  std::map<int64_t, int32_t>  skuID_onsaleGroupID_map;
  std::map<int32_t, std::set<int64_t> >  onsaleGroupID_skuIDSet_map;
  std::map<int32_t, double>  onsaleGroupID_totalSalePrice_map;
  std::map<int32_t, int32_t>  onsaleGroupID_totalCount_map;
  std::map<int32_t, double>  onsaleGroupID_totalFavorPrice_map;
  std::map<int32_t, std::vector< ::onsale::Step> >  onsaleGroupID_stepList_map;
  std::map<int32_t,  ::onsale::Step>  onsaleGroupID_firstStep_map;
  std::map<int32_t,  ::onsale::Step>  onsaleGroupID_currStep_map;
  std::map<int32_t,  ::onsale::Step>  onsaleGroupID_nextStep_map;
  std::vector< ::onsale::Present>  present_list;
  std::map<int32_t, int32_t>  onsaleGroupID_currStepID_map;
  std::map<int32_t, std::vector< ::onsale::Present> >  currStepID_presentList_map;

  _UsableOnsaleGroupsRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_sku_list(const std::vector<SkuInfo> & val);

  void __set_order_price(const PriceInfo& val);

  void __set_skuID_priceInfo_map(const std::map<int64_t, PriceInfo> & val);

  void __set_sku_map(const std::map<int64_t, SkuInfo> & val);

  void __set_skuID_sellerID_map(const std::map<int64_t, int64_t> & val);

  void __set_skuID_wareID_map(const std::map<int64_t, int64_t> & val);

  void __set_wareID_wareLabelID_map(const std::map<int64_t, int32_t> & val);

  void __set_wareLabelID_wareLabel_map(const std::map<int32_t,  ::onsale::WareLabel> & val);

  void __set_wareLabelID_onsaleGroupID_map(const std::map<int64_t, int32_t> & val);

  void __set_onsaleGroupID_onsaleGroup_map(const std::map<int32_t,  ::onsale::OnsaleGroup> & val);

  void __set_skuID_onsaleGroup_map(const std::map<int64_t,  ::onsale::OnsaleGroup> & val);

  void __set_skuID_onsaleGroupID_map(const std::map<int64_t, int32_t> & val);

  void __set_onsaleGroupID_skuIDSet_map(const std::map<int32_t, std::set<int64_t> > & val);

  void __set_onsaleGroupID_totalSalePrice_map(const std::map<int32_t, double> & val);

  void __set_onsaleGroupID_totalCount_map(const std::map<int32_t, int32_t> & val);

  void __set_onsaleGroupID_totalFavorPrice_map(const std::map<int32_t, double> & val);

  void __set_onsaleGroupID_stepList_map(const std::map<int32_t, std::vector< ::onsale::Step> > & val);

  void __set_onsaleGroupID_firstStep_map(const std::map<int32_t,  ::onsale::Step> & val);

  void __set_onsaleGroupID_currStep_map(const std::map<int32_t,  ::onsale::Step> & val);

  void __set_onsaleGroupID_nextStep_map(const std::map<int32_t,  ::onsale::Step> & val);

  void __set_present_list(const std::vector< ::onsale::Present> & val);

  void __set_onsaleGroupID_currStepID_map(const std::map<int32_t, int32_t> & val);

  void __set_currStepID_presentList_map(const std::map<int32_t, std::vector< ::onsale::Present> > & val);

  bool operator == (const UsableOnsaleGroupsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(sku_list == rhs.sku_list))
      return false;
    if (!(order_price == rhs.order_price))
      return false;
    if (!(skuID_priceInfo_map == rhs.skuID_priceInfo_map))
      return false;
    if (!(sku_map == rhs.sku_map))
      return false;
    if (!(skuID_sellerID_map == rhs.skuID_sellerID_map))
      return false;
    if (!(skuID_wareID_map == rhs.skuID_wareID_map))
      return false;
    if (!(wareID_wareLabelID_map == rhs.wareID_wareLabelID_map))
      return false;
    if (!(wareLabelID_wareLabel_map == rhs.wareLabelID_wareLabel_map))
      return false;
    if (!(wareLabelID_onsaleGroupID_map == rhs.wareLabelID_onsaleGroupID_map))
      return false;
    if (!(onsaleGroupID_onsaleGroup_map == rhs.onsaleGroupID_onsaleGroup_map))
      return false;
    if (!(skuID_onsaleGroup_map == rhs.skuID_onsaleGroup_map))
      return false;
    if (!(skuID_onsaleGroupID_map == rhs.skuID_onsaleGroupID_map))
      return false;
    if (!(onsaleGroupID_skuIDSet_map == rhs.onsaleGroupID_skuIDSet_map))
      return false;
    if (!(onsaleGroupID_totalSalePrice_map == rhs.onsaleGroupID_totalSalePrice_map))
      return false;
    if (!(onsaleGroupID_totalCount_map == rhs.onsaleGroupID_totalCount_map))
      return false;
    if (!(onsaleGroupID_totalFavorPrice_map == rhs.onsaleGroupID_totalFavorPrice_map))
      return false;
    if (!(onsaleGroupID_stepList_map == rhs.onsaleGroupID_stepList_map))
      return false;
    if (!(onsaleGroupID_firstStep_map == rhs.onsaleGroupID_firstStep_map))
      return false;
    if (!(onsaleGroupID_currStep_map == rhs.onsaleGroupID_currStep_map))
      return false;
    if (!(onsaleGroupID_nextStep_map == rhs.onsaleGroupID_nextStep_map))
      return false;
    if (!(present_list == rhs.present_list))
      return false;
    if (!(onsaleGroupID_currStepID_map == rhs.onsaleGroupID_currStepID_map))
      return false;
    if (!(currStepID_presentList_map == rhs.currStepID_presentList_map))
      return false;
    return true;
  }
  bool operator != (const UsableOnsaleGroupsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsableOnsaleGroupsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UsableOnsaleGroupsRsp& obj);
};

void swap(UsableOnsaleGroupsRsp &a, UsableOnsaleGroupsRsp &b);


class ApportionReq {
 public:

  static const char* ascii_fingerprint; // = "863CF07C5F5C69D71742083117FA3401";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x3C,0xF0,0x7C,0x5F,0x5C,0x69,0xD7,0x17,0x42,0x08,0x31,0x17,0xFA,0x34,0x01};

  ApportionReq(const ApportionReq&);
  ApportionReq& operator=(const ApportionReq&);
  ApportionReq() {
  }

  virtual ~ApportionReq() throw();
  std::vector<SkuInfo>  sku_list;

  void __set_sku_list(const std::vector<SkuInfo> & val);

  bool operator == (const ApportionReq & rhs) const
  {
    if (!(sku_list == rhs.sku_list))
      return false;
    return true;
  }
  bool operator != (const ApportionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApportionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ApportionReq& obj);
};

void swap(ApportionReq &a, ApportionReq &b);

typedef struct _ApportionRsp__isset {
  _ApportionRsp__isset() : error(false), errmsg(false), usableOnsaleGroupsRsp(false), order_price(false), present_list(false), sku_apport_map(false) {}
  bool error :1;
  bool errmsg :1;
  bool usableOnsaleGroupsRsp :1;
  bool order_price :1;
  bool present_list :1;
  bool sku_apport_map :1;
} _ApportionRsp__isset;

class ApportionRsp {
 public:

  static const char* ascii_fingerprint; // = "6F091E766FCD60C0334F00DDEC5A922A";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x09,0x1E,0x76,0x6F,0xCD,0x60,0xC0,0x33,0x4F,0x00,0xDD,0xEC,0x5A,0x92,0x2A};

  ApportionRsp(const ApportionRsp&);
  ApportionRsp& operator=(const ApportionRsp&);
  ApportionRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~ApportionRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  UsableOnsaleGroupsRsp usableOnsaleGroupsRsp;
  PriceInfo order_price;
  std::vector< ::onsale::Present>  present_list;
  std::map<int64_t, Apport>  sku_apport_map;

  _ApportionRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_usableOnsaleGroupsRsp(const UsableOnsaleGroupsRsp& val);

  void __set_order_price(const PriceInfo& val);

  void __set_present_list(const std::vector< ::onsale::Present> & val);

  void __set_sku_apport_map(const std::map<int64_t, Apport> & val);

  bool operator == (const ApportionRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(usableOnsaleGroupsRsp == rhs.usableOnsaleGroupsRsp))
      return false;
    if (!(order_price == rhs.order_price))
      return false;
    if (!(present_list == rhs.present_list))
      return false;
    if (!(sku_apport_map == rhs.sku_apport_map))
      return false;
    return true;
  }
  bool operator != (const ApportionRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApportionRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ApportionRsp& obj);
};

void swap(ApportionRsp &a, ApportionRsp &b);


class StepInfoReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  StepInfoReq(const StepInfoReq&);
  StepInfoReq& operator=(const StepInfoReq&);
  StepInfoReq() : onsale_group_id(0) {
  }

  virtual ~StepInfoReq() throw();
  int32_t onsale_group_id;

  void __set_onsale_group_id(const int32_t val);

  bool operator == (const StepInfoReq & rhs) const
  {
    if (!(onsale_group_id == rhs.onsale_group_id))
      return false;
    return true;
  }
  bool operator != (const StepInfoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StepInfoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StepInfoReq& obj);
};

void swap(StepInfoReq &a, StepInfoReq &b);

typedef struct _StepInfoRsp__isset {
  _StepInfoRsp__isset() : error(false), errmsg(false), onsale_group(false), step_list(false) {}
  bool error :1;
  bool errmsg :1;
  bool onsale_group :1;
  bool step_list :1;
} _StepInfoRsp__isset;

class StepInfoRsp {
 public:

  static const char* ascii_fingerprint; // = "35B0396975A4E16A6EAB5A7DE6F97599";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xB0,0x39,0x69,0x75,0xA4,0xE1,0x6A,0x6E,0xAB,0x5A,0x7D,0xE6,0xF9,0x75,0x99};

  StepInfoRsp(const StepInfoRsp&);
  StepInfoRsp& operator=(const StepInfoRsp&);
  StepInfoRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~StepInfoRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
   ::onsale::OnsaleGroup onsale_group;
  std::vector< ::onsale::Step>  step_list;

  _StepInfoRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_onsale_group(const  ::onsale::OnsaleGroup& val);

  void __set_step_list(const std::vector< ::onsale::Step> & val);

  bool operator == (const StepInfoRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(onsale_group == rhs.onsale_group))
      return false;
    if (!(step_list == rhs.step_list))
      return false;
    return true;
  }
  bool operator != (const StepInfoRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StepInfoRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StepInfoRsp& obj);
};

void swap(StepInfoRsp &a, StepInfoRsp &b);

} // namespace

#endif
