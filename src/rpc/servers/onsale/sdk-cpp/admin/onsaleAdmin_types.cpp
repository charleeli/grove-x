/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "onsaleAdmin_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace onsaleAdmin {


AddCacheNameListReq::~AddCacheNameListReq() throw() {
}


void AddCacheNameListReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void AddCacheNameListReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void AddCacheNameListReq::__set_ware_id_list(const std::vector<int64_t> & val) {
  this->ware_id_list = val;
}

const char* AddCacheNameListReq::ascii_fingerprint = "CB1F117F79F5EF1724EF57230C9746AF";
const uint8_t AddCacheNameListReq::binary_fingerprint[16] = {0xCB,0x1F,0x11,0x7F,0x79,0xF5,0xEF,0x17,0x24,0xEF,0x57,0x23,0x0C,0x97,0x46,0xAF};

uint32_t AddCacheNameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_sub_type = false;
  bool isset_ware_id_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ware_id_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->ware_id_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->ware_id_list[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_ware_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ware_id_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddCacheNameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddCacheNameListReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ware_id_list.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->ware_id_list.begin(); _iter5 != this->ware_id_list.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddCacheNameListReq &a, AddCacheNameListReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.sub_type, b.sub_type);
  swap(a.ware_id_list, b.ware_id_list);
}

AddCacheNameListReq::AddCacheNameListReq(const AddCacheNameListReq& other6) {
  ware_label_id = other6.ware_label_id;
  sub_type = other6.sub_type;
  ware_id_list = other6.ware_id_list;
}
AddCacheNameListReq& AddCacheNameListReq::operator=(const AddCacheNameListReq& other7) {
  ware_label_id = other7.ware_label_id;
  sub_type = other7.sub_type;
  ware_id_list = other7.ware_id_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddCacheNameListReq& obj) {
  using apache::thrift::to_string;
  out << "AddCacheNameListReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "ware_id_list=" << to_string(obj.ware_id_list);
  out << ")";
  return out;
}


AddCacheNameListRsp::~AddCacheNameListRsp() throw() {
}


void AddCacheNameListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void AddCacheNameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* AddCacheNameListRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t AddCacheNameListRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t AddCacheNameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->error = ( ::onsale::Error::type)ecast8;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddCacheNameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddCacheNameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddCacheNameListRsp &a, AddCacheNameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

AddCacheNameListRsp::AddCacheNameListRsp(const AddCacheNameListRsp& other9) {
  error = other9.error;
  errmsg = other9.errmsg;
  __isset = other9.__isset;
}
AddCacheNameListRsp& AddCacheNameListRsp::operator=(const AddCacheNameListRsp& other10) {
  error = other10.error;
  errmsg = other10.errmsg;
  __isset = other10.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddCacheNameListRsp& obj) {
  using apache::thrift::to_string;
  out << "AddCacheNameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


DelCacheNameListReq::~DelCacheNameListReq() throw() {
}


void DelCacheNameListReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void DelCacheNameListReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void DelCacheNameListReq::__set_ware_id_list(const std::vector<int64_t> & val) {
  this->ware_id_list = val;
}

const char* DelCacheNameListReq::ascii_fingerprint = "CB1F117F79F5EF1724EF57230C9746AF";
const uint8_t DelCacheNameListReq::binary_fingerprint[16] = {0xCB,0x1F,0x11,0x7F,0x79,0xF5,0xEF,0x17,0x24,0xEF,0x57,0x23,0x0C,0x97,0x46,0xAF};

uint32_t DelCacheNameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_sub_type = false;
  bool isset_ware_id_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ware_id_list.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->ware_id_list.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readI64(this->ware_id_list[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          isset_ware_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ware_id_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DelCacheNameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelCacheNameListReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ware_id_list.size()));
    std::vector<int64_t> ::const_iterator _iter16;
    for (_iter16 = this->ware_id_list.begin(); _iter16 != this->ware_id_list.end(); ++_iter16)
    {
      xfer += oprot->writeI64((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelCacheNameListReq &a, DelCacheNameListReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.sub_type, b.sub_type);
  swap(a.ware_id_list, b.ware_id_list);
}

DelCacheNameListReq::DelCacheNameListReq(const DelCacheNameListReq& other17) {
  ware_label_id = other17.ware_label_id;
  sub_type = other17.sub_type;
  ware_id_list = other17.ware_id_list;
}
DelCacheNameListReq& DelCacheNameListReq::operator=(const DelCacheNameListReq& other18) {
  ware_label_id = other18.ware_label_id;
  sub_type = other18.sub_type;
  ware_id_list = other18.ware_id_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelCacheNameListReq& obj) {
  using apache::thrift::to_string;
  out << "DelCacheNameListReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "ware_id_list=" << to_string(obj.ware_id_list);
  out << ")";
  return out;
}


DelCacheNameListRsp::~DelCacheNameListRsp() throw() {
}


void DelCacheNameListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void DelCacheNameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* DelCacheNameListRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t DelCacheNameListRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t DelCacheNameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->error = ( ::onsale::Error::type)ecast19;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelCacheNameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelCacheNameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelCacheNameListRsp &a, DelCacheNameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

DelCacheNameListRsp::DelCacheNameListRsp(const DelCacheNameListRsp& other20) {
  error = other20.error;
  errmsg = other20.errmsg;
  __isset = other20.__isset;
}
DelCacheNameListRsp& DelCacheNameListRsp::operator=(const DelCacheNameListRsp& other21) {
  error = other21.error;
  errmsg = other21.errmsg;
  __isset = other21.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelCacheNameListRsp& obj) {
  using apache::thrift::to_string;
  out << "DelCacheNameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


GetCacheNameListReq::~GetCacheNameListReq() throw() {
}


void GetCacheNameListReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void GetCacheNameListReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

const char* GetCacheNameListReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t GetCacheNameListReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t GetCacheNameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_sub_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetCacheNameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetCacheNameListReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetCacheNameListReq &a, GetCacheNameListReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.sub_type, b.sub_type);
}

GetCacheNameListReq::GetCacheNameListReq(const GetCacheNameListReq& other22) {
  ware_label_id = other22.ware_label_id;
  sub_type = other22.sub_type;
}
GetCacheNameListReq& GetCacheNameListReq::operator=(const GetCacheNameListReq& other23) {
  ware_label_id = other23.ware_label_id;
  sub_type = other23.sub_type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetCacheNameListReq& obj) {
  using apache::thrift::to_string;
  out << "GetCacheNameListReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ")";
  return out;
}


GetCacheNameListRsp::~GetCacheNameListRsp() throw() {
}


void GetCacheNameListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void GetCacheNameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void GetCacheNameListRsp::__set_ware_id_list(const std::vector<int64_t> & val) {
  this->ware_id_list = val;
}

const char* GetCacheNameListRsp::ascii_fingerprint = "EC9673EEAE3E5A373D15AC0EC614F2A0";
const uint8_t GetCacheNameListRsp::binary_fingerprint[16] = {0xEC,0x96,0x73,0xEE,0xAE,0x3E,0x5A,0x37,0x3D,0x15,0xAC,0x0E,0xC6,0x14,0xF2,0xA0};

uint32_t GetCacheNameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->error = ( ::onsale::Error::type)ecast24;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ware_id_list.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->ware_id_list.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readI64(this->ware_id_list[_i29]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ware_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetCacheNameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetCacheNameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ware_id_list.size()));
    std::vector<int64_t> ::const_iterator _iter30;
    for (_iter30 = this->ware_id_list.begin(); _iter30 != this->ware_id_list.end(); ++_iter30)
    {
      xfer += oprot->writeI64((*_iter30));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetCacheNameListRsp &a, GetCacheNameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.ware_id_list, b.ware_id_list);
  swap(a.__isset, b.__isset);
}

GetCacheNameListRsp::GetCacheNameListRsp(const GetCacheNameListRsp& other31) {
  error = other31.error;
  errmsg = other31.errmsg;
  ware_id_list = other31.ware_id_list;
  __isset = other31.__isset;
}
GetCacheNameListRsp& GetCacheNameListRsp::operator=(const GetCacheNameListRsp& other32) {
  error = other32.error;
  errmsg = other32.errmsg;
  ware_id_list = other32.ware_id_list;
  __isset = other32.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetCacheNameListRsp& obj) {
  using apache::thrift::to_string;
  out << "GetCacheNameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "ware_id_list=" << to_string(obj.ware_id_list);
  out << ")";
  return out;
}


CheckCacheNameListReq::~CheckCacheNameListReq() throw() {
}


void CheckCacheNameListReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void CheckCacheNameListReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

const char* CheckCacheNameListReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t CheckCacheNameListReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t CheckCacheNameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_sub_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CheckCacheNameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CheckCacheNameListReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CheckCacheNameListReq &a, CheckCacheNameListReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.sub_type, b.sub_type);
}

CheckCacheNameListReq::CheckCacheNameListReq(const CheckCacheNameListReq& other33) {
  ware_label_id = other33.ware_label_id;
  sub_type = other33.sub_type;
}
CheckCacheNameListReq& CheckCacheNameListReq::operator=(const CheckCacheNameListReq& other34) {
  ware_label_id = other34.ware_label_id;
  sub_type = other34.sub_type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CheckCacheNameListReq& obj) {
  using apache::thrift::to_string;
  out << "CheckCacheNameListReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ")";
  return out;
}


CheckCacheNameListRsp::~CheckCacheNameListRsp() throw() {
}


void CheckCacheNameListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void CheckCacheNameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* CheckCacheNameListRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t CheckCacheNameListRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t CheckCacheNameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->error = ( ::onsale::Error::type)ecast35;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckCacheNameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CheckCacheNameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CheckCacheNameListRsp &a, CheckCacheNameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

CheckCacheNameListRsp::CheckCacheNameListRsp(const CheckCacheNameListRsp& other36) {
  error = other36.error;
  errmsg = other36.errmsg;
  __isset = other36.__isset;
}
CheckCacheNameListRsp& CheckCacheNameListRsp::operator=(const CheckCacheNameListRsp& other37) {
  error = other37.error;
  errmsg = other37.errmsg;
  __isset = other37.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CheckCacheNameListRsp& obj) {
  using apache::thrift::to_string;
  out << "CheckCacheNameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


ViewCheckCacheNameListReq::~ViewCheckCacheNameListReq() throw() {
}


void ViewCheckCacheNameListReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void ViewCheckCacheNameListReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

const char* ViewCheckCacheNameListReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t ViewCheckCacheNameListReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t ViewCheckCacheNameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_sub_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ViewCheckCacheNameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ViewCheckCacheNameListReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ViewCheckCacheNameListReq &a, ViewCheckCacheNameListReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.sub_type, b.sub_type);
}

ViewCheckCacheNameListReq::ViewCheckCacheNameListReq(const ViewCheckCacheNameListReq& other38) {
  ware_label_id = other38.ware_label_id;
  sub_type = other38.sub_type;
}
ViewCheckCacheNameListReq& ViewCheckCacheNameListReq::operator=(const ViewCheckCacheNameListReq& other39) {
  ware_label_id = other39.ware_label_id;
  sub_type = other39.sub_type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ViewCheckCacheNameListReq& obj) {
  using apache::thrift::to_string;
  out << "ViewCheckCacheNameListReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ")";
  return out;
}


ViewCheckCacheNameListRsp::~ViewCheckCacheNameListRsp() throw() {
}


void ViewCheckCacheNameListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void ViewCheckCacheNameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void ViewCheckCacheNameListRsp::__set_ware_id_list(const std::vector<int64_t> & val) {
  this->ware_id_list = val;
}

void ViewCheckCacheNameListRsp::__set_timestamp(const int32_t val) {
  this->timestamp = val;
}

const char* ViewCheckCacheNameListRsp::ascii_fingerprint = "2803BA453A88B8D6D9C50FAF47473E41";
const uint8_t ViewCheckCacheNameListRsp::binary_fingerprint[16] = {0x28,0x03,0xBA,0x45,0x3A,0x88,0xB8,0xD6,0xD9,0xC5,0x0F,0xAF,0x47,0x47,0x3E,0x41};

uint32_t ViewCheckCacheNameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast40;
          xfer += iprot->readI32(ecast40);
          this->error = ( ::onsale::Error::type)ecast40;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ware_id_list.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->ware_id_list.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += iprot->readI64(this->ware_id_list[_i45]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ware_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ViewCheckCacheNameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ViewCheckCacheNameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ware_id_list.size()));
    std::vector<int64_t> ::const_iterator _iter46;
    for (_iter46 = this->ware_id_list.begin(); _iter46 != this->ware_id_list.end(); ++_iter46)
    {
      xfer += oprot->writeI64((*_iter46));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ViewCheckCacheNameListRsp &a, ViewCheckCacheNameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.ware_id_list, b.ware_id_list);
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

ViewCheckCacheNameListRsp::ViewCheckCacheNameListRsp(const ViewCheckCacheNameListRsp& other47) {
  error = other47.error;
  errmsg = other47.errmsg;
  ware_id_list = other47.ware_id_list;
  timestamp = other47.timestamp;
  __isset = other47.__isset;
}
ViewCheckCacheNameListRsp& ViewCheckCacheNameListRsp::operator=(const ViewCheckCacheNameListRsp& other48) {
  error = other48.error;
  errmsg = other48.errmsg;
  ware_id_list = other48.ware_id_list;
  timestamp = other48.timestamp;
  __isset = other48.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ViewCheckCacheNameListRsp& obj) {
  using apache::thrift::to_string;
  out << "ViewCheckCacheNameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "ware_id_list=" << to_string(obj.ware_id_list);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ")";
  return out;
}


LatestTimestampReq::~LatestTimestampReq() throw() {
}


void LatestTimestampReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

const char* LatestTimestampReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t LatestTimestampReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t LatestTimestampReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LatestTimestampReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("LatestTimestampReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(LatestTimestampReq &a, LatestTimestampReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
}

LatestTimestampReq::LatestTimestampReq(const LatestTimestampReq& other49) {
  ware_label_id = other49.ware_label_id;
}
LatestTimestampReq& LatestTimestampReq::operator=(const LatestTimestampReq& other50) {
  ware_label_id = other50.ware_label_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const LatestTimestampReq& obj) {
  using apache::thrift::to_string;
  out << "LatestTimestampReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ")";
  return out;
}


LatestTimestampRsp::~LatestTimestampRsp() throw() {
}


void LatestTimestampRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void LatestTimestampRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void LatestTimestampRsp::__set_timestamp(const int32_t val) {
  this->timestamp = val;
}

const char* LatestTimestampRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t LatestTimestampRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t LatestTimestampRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast51;
          xfer += iprot->readI32(ecast51);
          this->error = ( ::onsale::Error::type)ecast51;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LatestTimestampRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("LatestTimestampRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(LatestTimestampRsp &a, LatestTimestampRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

LatestTimestampRsp::LatestTimestampRsp(const LatestTimestampRsp& other52) {
  error = other52.error;
  errmsg = other52.errmsg;
  timestamp = other52.timestamp;
  __isset = other52.__isset;
}
LatestTimestampRsp& LatestTimestampRsp::operator=(const LatestTimestampRsp& other53) {
  error = other53.error;
  errmsg = other53.errmsg;
  timestamp = other53.timestamp;
  __isset = other53.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const LatestTimestampRsp& obj) {
  using apache::thrift::to_string;
  out << "LatestTimestampRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ")";
  return out;
}


CreateNameListReq::~CreateNameListReq() throw() {
}


void CreateNameListReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void CreateNameListReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

const char* CreateNameListReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t CreateNameListReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t CreateNameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_sub_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateNameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateNameListReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateNameListReq &a, CreateNameListReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.sub_type, b.sub_type);
}

CreateNameListReq::CreateNameListReq(const CreateNameListReq& other54) {
  ware_label_id = other54.ware_label_id;
  sub_type = other54.sub_type;
}
CreateNameListReq& CreateNameListReq::operator=(const CreateNameListReq& other55) {
  ware_label_id = other55.ware_label_id;
  sub_type = other55.sub_type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateNameListReq& obj) {
  using apache::thrift::to_string;
  out << "CreateNameListReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ")";
  return out;
}


CreateNameListRsp::~CreateNameListRsp() throw() {
}


void CreateNameListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void CreateNameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CreateNameListRsp::__set_time_cost(const int32_t val) {
  this->time_cost = val;
}

const char* CreateNameListRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t CreateNameListRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t CreateNameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast56;
          xfer += iprot->readI32(ecast56);
          this->error = ( ::onsale::Error::type)ecast56;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_cost);
          this->__isset.time_cost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateNameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateNameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_cost", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->time_cost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateNameListRsp &a, CreateNameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.time_cost, b.time_cost);
  swap(a.__isset, b.__isset);
}

CreateNameListRsp::CreateNameListRsp(const CreateNameListRsp& other57) {
  error = other57.error;
  errmsg = other57.errmsg;
  time_cost = other57.time_cost;
  __isset = other57.__isset;
}
CreateNameListRsp& CreateNameListRsp::operator=(const CreateNameListRsp& other58) {
  error = other58.error;
  errmsg = other58.errmsg;
  time_cost = other58.time_cost;
  __isset = other58.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateNameListRsp& obj) {
  using apache::thrift::to_string;
  out << "CreateNameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "time_cost=" << to_string(obj.time_cost);
  out << ")";
  return out;
}


CreateOnsaleGroupReq::~CreateOnsaleGroupReq() throw() {
}


void CreateOnsaleGroupReq::__set_onsaleGroup(const  ::onsale::OnsaleGroup& val) {
  this->onsaleGroup = val;
}

const char* CreateOnsaleGroupReq::ascii_fingerprint = "1B45940ED308F1F6DD6D722AAE6CDBC2";
const uint8_t CreateOnsaleGroupReq::binary_fingerprint[16] = {0x1B,0x45,0x94,0x0E,0xD3,0x08,0xF1,0xF6,0xDD,0x6D,0x72,0x2A,0xAE,0x6C,0xDB,0xC2};

uint32_t CreateOnsaleGroupReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_onsaleGroup = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->onsaleGroup.read(iprot);
          isset_onsaleGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_onsaleGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateOnsaleGroupReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateOnsaleGroupReq");

  xfer += oprot->writeFieldBegin("onsaleGroup", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->onsaleGroup.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateOnsaleGroupReq &a, CreateOnsaleGroupReq &b) {
  using ::std::swap;
  swap(a.onsaleGroup, b.onsaleGroup);
}

CreateOnsaleGroupReq::CreateOnsaleGroupReq(const CreateOnsaleGroupReq& other59) {
  onsaleGroup = other59.onsaleGroup;
}
CreateOnsaleGroupReq& CreateOnsaleGroupReq::operator=(const CreateOnsaleGroupReq& other60) {
  onsaleGroup = other60.onsaleGroup;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateOnsaleGroupReq& obj) {
  using apache::thrift::to_string;
  out << "CreateOnsaleGroupReq(";
  out << "onsaleGroup=" << to_string(obj.onsaleGroup);
  out << ")";
  return out;
}


CreateOnsaleGroupRsp::~CreateOnsaleGroupRsp() throw() {
}


void CreateOnsaleGroupRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void CreateOnsaleGroupRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* CreateOnsaleGroupRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t CreateOnsaleGroupRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t CreateOnsaleGroupRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast61;
          xfer += iprot->readI32(ecast61);
          this->error = ( ::onsale::Error::type)ecast61;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateOnsaleGroupRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateOnsaleGroupRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateOnsaleGroupRsp &a, CreateOnsaleGroupRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

CreateOnsaleGroupRsp::CreateOnsaleGroupRsp(const CreateOnsaleGroupRsp& other62) {
  error = other62.error;
  errmsg = other62.errmsg;
  __isset = other62.__isset;
}
CreateOnsaleGroupRsp& CreateOnsaleGroupRsp::operator=(const CreateOnsaleGroupRsp& other63) {
  error = other63.error;
  errmsg = other63.errmsg;
  __isset = other63.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateOnsaleGroupRsp& obj) {
  using apache::thrift::to_string;
  out << "CreateOnsaleGroupRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


UpdateOnsaleGroupReq::~UpdateOnsaleGroupReq() throw() {
}


void UpdateOnsaleGroupReq::__set_onsaleGroup(const  ::onsale::OnsaleGroup& val) {
  this->onsaleGroup = val;
}

const char* UpdateOnsaleGroupReq::ascii_fingerprint = "1B45940ED308F1F6DD6D722AAE6CDBC2";
const uint8_t UpdateOnsaleGroupReq::binary_fingerprint[16] = {0x1B,0x45,0x94,0x0E,0xD3,0x08,0xF1,0xF6,0xDD,0x6D,0x72,0x2A,0xAE,0x6C,0xDB,0xC2};

uint32_t UpdateOnsaleGroupReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_onsaleGroup = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->onsaleGroup.read(iprot);
          isset_onsaleGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_onsaleGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateOnsaleGroupReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateOnsaleGroupReq");

  xfer += oprot->writeFieldBegin("onsaleGroup", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->onsaleGroup.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateOnsaleGroupReq &a, UpdateOnsaleGroupReq &b) {
  using ::std::swap;
  swap(a.onsaleGroup, b.onsaleGroup);
}

UpdateOnsaleGroupReq::UpdateOnsaleGroupReq(const UpdateOnsaleGroupReq& other64) {
  onsaleGroup = other64.onsaleGroup;
}
UpdateOnsaleGroupReq& UpdateOnsaleGroupReq::operator=(const UpdateOnsaleGroupReq& other65) {
  onsaleGroup = other65.onsaleGroup;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateOnsaleGroupReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateOnsaleGroupReq(";
  out << "onsaleGroup=" << to_string(obj.onsaleGroup);
  out << ")";
  return out;
}


UpdateOnsaleGroupRsp::~UpdateOnsaleGroupRsp() throw() {
}


void UpdateOnsaleGroupRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void UpdateOnsaleGroupRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateOnsaleGroupRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateOnsaleGroupRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateOnsaleGroupRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast66;
          xfer += iprot->readI32(ecast66);
          this->error = ( ::onsale::Error::type)ecast66;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateOnsaleGroupRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateOnsaleGroupRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateOnsaleGroupRsp &a, UpdateOnsaleGroupRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateOnsaleGroupRsp::UpdateOnsaleGroupRsp(const UpdateOnsaleGroupRsp& other67) {
  error = other67.error;
  errmsg = other67.errmsg;
  __isset = other67.__isset;
}
UpdateOnsaleGroupRsp& UpdateOnsaleGroupRsp::operator=(const UpdateOnsaleGroupRsp& other68) {
  error = other68.error;
  errmsg = other68.errmsg;
  __isset = other68.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateOnsaleGroupRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateOnsaleGroupRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


OnsaleGroupCountReq::~OnsaleGroupCountReq() throw() {
}


void OnsaleGroupCountReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* OnsaleGroupCountReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t OnsaleGroupCountReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t OnsaleGroupCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnsaleGroupCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OnsaleGroupCountReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OnsaleGroupCountReq &a, OnsaleGroupCountReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

OnsaleGroupCountReq::OnsaleGroupCountReq(const OnsaleGroupCountReq& other69) {
  cond = other69.cond;
  __isset = other69.__isset;
}
OnsaleGroupCountReq& OnsaleGroupCountReq::operator=(const OnsaleGroupCountReq& other70) {
  cond = other70.cond;
  __isset = other70.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OnsaleGroupCountReq& obj) {
  using apache::thrift::to_string;
  out << "OnsaleGroupCountReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


OnsaleGroupCountRsp::~OnsaleGroupCountRsp() throw() {
}


void OnsaleGroupCountRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void OnsaleGroupCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void OnsaleGroupCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* OnsaleGroupCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t OnsaleGroupCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t OnsaleGroupCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast71;
          xfer += iprot->readI32(ecast71);
          this->error = ( ::onsale::Error::type)ecast71;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnsaleGroupCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OnsaleGroupCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OnsaleGroupCountRsp &a, OnsaleGroupCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

OnsaleGroupCountRsp::OnsaleGroupCountRsp(const OnsaleGroupCountRsp& other72) {
  error = other72.error;
  errmsg = other72.errmsg;
  count = other72.count;
  __isset = other72.__isset;
}
OnsaleGroupCountRsp& OnsaleGroupCountRsp::operator=(const OnsaleGroupCountRsp& other73) {
  error = other73.error;
  errmsg = other73.errmsg;
  count = other73.count;
  __isset = other73.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OnsaleGroupCountRsp& obj) {
  using apache::thrift::to_string;
  out << "OnsaleGroupCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


OnsaleGroupListReq::~OnsaleGroupListReq() throw() {
}


void OnsaleGroupListReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* OnsaleGroupListReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t OnsaleGroupListReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t OnsaleGroupListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnsaleGroupListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OnsaleGroupListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OnsaleGroupListReq &a, OnsaleGroupListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

OnsaleGroupListReq::OnsaleGroupListReq(const OnsaleGroupListReq& other74) {
  cond = other74.cond;
  __isset = other74.__isset;
}
OnsaleGroupListReq& OnsaleGroupListReq::operator=(const OnsaleGroupListReq& other75) {
  cond = other75.cond;
  __isset = other75.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OnsaleGroupListReq& obj) {
  using apache::thrift::to_string;
  out << "OnsaleGroupListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


OnsaleGroupListRsp::~OnsaleGroupListRsp() throw() {
}


void OnsaleGroupListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void OnsaleGroupListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void OnsaleGroupListRsp::__set_onsaleGroupList(const std::vector< ::onsale::OnsaleGroup> & val) {
  this->onsaleGroupList = val;
}

const char* OnsaleGroupListRsp::ascii_fingerprint = "721E6467621E46B7C05DDD06A4147C91";
const uint8_t OnsaleGroupListRsp::binary_fingerprint[16] = {0x72,0x1E,0x64,0x67,0x62,0x1E,0x46,0xB7,0xC0,0x5D,0xDD,0x06,0xA4,0x14,0x7C,0x91};

uint32_t OnsaleGroupListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast76;
          xfer += iprot->readI32(ecast76);
          this->error = ( ::onsale::Error::type)ecast76;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->onsaleGroupList.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->onsaleGroupList.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += this->onsaleGroupList[_i81].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.onsaleGroupList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnsaleGroupListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OnsaleGroupListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onsaleGroupList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->onsaleGroupList.size()));
    std::vector< ::onsale::OnsaleGroup> ::const_iterator _iter82;
    for (_iter82 = this->onsaleGroupList.begin(); _iter82 != this->onsaleGroupList.end(); ++_iter82)
    {
      xfer += (*_iter82).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OnsaleGroupListRsp &a, OnsaleGroupListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.onsaleGroupList, b.onsaleGroupList);
  swap(a.__isset, b.__isset);
}

OnsaleGroupListRsp::OnsaleGroupListRsp(const OnsaleGroupListRsp& other83) {
  error = other83.error;
  errmsg = other83.errmsg;
  onsaleGroupList = other83.onsaleGroupList;
  __isset = other83.__isset;
}
OnsaleGroupListRsp& OnsaleGroupListRsp::operator=(const OnsaleGroupListRsp& other84) {
  error = other84.error;
  errmsg = other84.errmsg;
  onsaleGroupList = other84.onsaleGroupList;
  __isset = other84.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OnsaleGroupListRsp& obj) {
  using apache::thrift::to_string;
  out << "OnsaleGroupListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "onsaleGroupList=" << to_string(obj.onsaleGroupList);
  out << ")";
  return out;
}


AddStepReq::~AddStepReq() throw() {
}


void AddStepReq::__set_stepList(const std::vector< ::onsale::Step> & val) {
  this->stepList = val;
}

const char* AddStepReq::ascii_fingerprint = "CAA66F7EE7B0E235D206C64922C3EB70";
const uint8_t AddStepReq::binary_fingerprint[16] = {0xCA,0xA6,0x6F,0x7E,0xE7,0xB0,0xE2,0x35,0xD2,0x06,0xC6,0x49,0x22,0xC3,0xEB,0x70};

uint32_t AddStepReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_stepList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stepList.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->stepList.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += this->stepList[_i89].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_stepList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_stepList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddStepReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddStepReq");

  xfer += oprot->writeFieldBegin("stepList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stepList.size()));
    std::vector< ::onsale::Step> ::const_iterator _iter90;
    for (_iter90 = this->stepList.begin(); _iter90 != this->stepList.end(); ++_iter90)
    {
      xfer += (*_iter90).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddStepReq &a, AddStepReq &b) {
  using ::std::swap;
  swap(a.stepList, b.stepList);
}

AddStepReq::AddStepReq(const AddStepReq& other91) {
  stepList = other91.stepList;
}
AddStepReq& AddStepReq::operator=(const AddStepReq& other92) {
  stepList = other92.stepList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddStepReq& obj) {
  using apache::thrift::to_string;
  out << "AddStepReq(";
  out << "stepList=" << to_string(obj.stepList);
  out << ")";
  return out;
}


AddStepRsp::~AddStepRsp() throw() {
}


void AddStepRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void AddStepRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* AddStepRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t AddStepRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t AddStepRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast93;
          xfer += iprot->readI32(ecast93);
          this->error = ( ::onsale::Error::type)ecast93;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddStepRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddStepRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddStepRsp &a, AddStepRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

AddStepRsp::AddStepRsp(const AddStepRsp& other94) {
  error = other94.error;
  errmsg = other94.errmsg;
  __isset = other94.__isset;
}
AddStepRsp& AddStepRsp::operator=(const AddStepRsp& other95) {
  error = other95.error;
  errmsg = other95.errmsg;
  __isset = other95.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddStepRsp& obj) {
  using apache::thrift::to_string;
  out << "AddStepRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


DelStepReq::~DelStepReq() throw() {
}


void DelStepReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* DelStepReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t DelStepReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t DelStepReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelStepReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelStepReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelStepReq &a, DelStepReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

DelStepReq::DelStepReq(const DelStepReq& other96) {
  cond = other96.cond;
  __isset = other96.__isset;
}
DelStepReq& DelStepReq::operator=(const DelStepReq& other97) {
  cond = other97.cond;
  __isset = other97.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelStepReq& obj) {
  using apache::thrift::to_string;
  out << "DelStepReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


DelStepRsp::~DelStepRsp() throw() {
}


void DelStepRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void DelStepRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* DelStepRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t DelStepRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t DelStepRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast98;
          xfer += iprot->readI32(ecast98);
          this->error = ( ::onsale::Error::type)ecast98;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelStepRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelStepRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelStepRsp &a, DelStepRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

DelStepRsp::DelStepRsp(const DelStepRsp& other99) {
  error = other99.error;
  errmsg = other99.errmsg;
  __isset = other99.__isset;
}
DelStepRsp& DelStepRsp::operator=(const DelStepRsp& other100) {
  error = other100.error;
  errmsg = other100.errmsg;
  __isset = other100.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelStepRsp& obj) {
  using apache::thrift::to_string;
  out << "DelStepRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


StepListReq::~StepListReq() throw() {
}


void StepListReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* StepListReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t StepListReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t StepListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StepListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StepListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StepListReq &a, StepListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

StepListReq::StepListReq(const StepListReq& other101) {
  cond = other101.cond;
  __isset = other101.__isset;
}
StepListReq& StepListReq::operator=(const StepListReq& other102) {
  cond = other102.cond;
  __isset = other102.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StepListReq& obj) {
  using apache::thrift::to_string;
  out << "StepListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


StepListRsp::~StepListRsp() throw() {
}


void StepListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void StepListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void StepListRsp::__set_stepList(const std::vector< ::onsale::Step> & val) {
  this->stepList = val;
}

const char* StepListRsp::ascii_fingerprint = "35B87BE27B9D8556E8F07337D4A9E0CF";
const uint8_t StepListRsp::binary_fingerprint[16] = {0x35,0xB8,0x7B,0xE2,0x7B,0x9D,0x85,0x56,0xE8,0xF0,0x73,0x37,0xD4,0xA9,0xE0,0xCF};

uint32_t StepListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast103;
          xfer += iprot->readI32(ecast103);
          this->error = ( ::onsale::Error::type)ecast103;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stepList.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->stepList.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += this->stepList[_i108].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stepList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StepListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StepListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stepList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stepList.size()));
    std::vector< ::onsale::Step> ::const_iterator _iter109;
    for (_iter109 = this->stepList.begin(); _iter109 != this->stepList.end(); ++_iter109)
    {
      xfer += (*_iter109).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StepListRsp &a, StepListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.stepList, b.stepList);
  swap(a.__isset, b.__isset);
}

StepListRsp::StepListRsp(const StepListRsp& other110) {
  error = other110.error;
  errmsg = other110.errmsg;
  stepList = other110.stepList;
  __isset = other110.__isset;
}
StepListRsp& StepListRsp::operator=(const StepListRsp& other111) {
  error = other111.error;
  errmsg = other111.errmsg;
  stepList = other111.stepList;
  __isset = other111.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StepListRsp& obj) {
  using apache::thrift::to_string;
  out << "StepListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "stepList=" << to_string(obj.stepList);
  out << ")";
  return out;
}


AddPresentReq::~AddPresentReq() throw() {
}


void AddPresentReq::__set_presentList(const std::vector< ::onsale::Present> & val) {
  this->presentList = val;
}

const char* AddPresentReq::ascii_fingerprint = "EDFB2BD37C9092FD41D931BA5282DCAC";
const uint8_t AddPresentReq::binary_fingerprint[16] = {0xED,0xFB,0x2B,0xD3,0x7C,0x90,0x92,0xFD,0x41,0xD9,0x31,0xBA,0x52,0x82,0xDC,0xAC};

uint32_t AddPresentReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_presentList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->presentList.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _etype115;
            xfer += iprot->readListBegin(_etype115, _size112);
            this->presentList.resize(_size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              xfer += this->presentList[_i116].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_presentList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_presentList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddPresentReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddPresentReq");

  xfer += oprot->writeFieldBegin("presentList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->presentList.size()));
    std::vector< ::onsale::Present> ::const_iterator _iter117;
    for (_iter117 = this->presentList.begin(); _iter117 != this->presentList.end(); ++_iter117)
    {
      xfer += (*_iter117).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddPresentReq &a, AddPresentReq &b) {
  using ::std::swap;
  swap(a.presentList, b.presentList);
}

AddPresentReq::AddPresentReq(const AddPresentReq& other118) {
  presentList = other118.presentList;
}
AddPresentReq& AddPresentReq::operator=(const AddPresentReq& other119) {
  presentList = other119.presentList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddPresentReq& obj) {
  using apache::thrift::to_string;
  out << "AddPresentReq(";
  out << "presentList=" << to_string(obj.presentList);
  out << ")";
  return out;
}


AddPresentRsp::~AddPresentRsp() throw() {
}


void AddPresentRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void AddPresentRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* AddPresentRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t AddPresentRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t AddPresentRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast120;
          xfer += iprot->readI32(ecast120);
          this->error = ( ::onsale::Error::type)ecast120;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddPresentRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddPresentRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddPresentRsp &a, AddPresentRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

AddPresentRsp::AddPresentRsp(const AddPresentRsp& other121) {
  error = other121.error;
  errmsg = other121.errmsg;
  __isset = other121.__isset;
}
AddPresentRsp& AddPresentRsp::operator=(const AddPresentRsp& other122) {
  error = other122.error;
  errmsg = other122.errmsg;
  __isset = other122.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddPresentRsp& obj) {
  using apache::thrift::to_string;
  out << "AddPresentRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


DelPresentReq::~DelPresentReq() throw() {
}


void DelPresentReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* DelPresentReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t DelPresentReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t DelPresentReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelPresentReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelPresentReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelPresentReq &a, DelPresentReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

DelPresentReq::DelPresentReq(const DelPresentReq& other123) {
  cond = other123.cond;
  __isset = other123.__isset;
}
DelPresentReq& DelPresentReq::operator=(const DelPresentReq& other124) {
  cond = other124.cond;
  __isset = other124.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelPresentReq& obj) {
  using apache::thrift::to_string;
  out << "DelPresentReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


DelPresentRsp::~DelPresentRsp() throw() {
}


void DelPresentRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void DelPresentRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* DelPresentRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t DelPresentRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t DelPresentRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast125;
          xfer += iprot->readI32(ecast125);
          this->error = ( ::onsale::Error::type)ecast125;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelPresentRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelPresentRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelPresentRsp &a, DelPresentRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

DelPresentRsp::DelPresentRsp(const DelPresentRsp& other126) {
  error = other126.error;
  errmsg = other126.errmsg;
  __isset = other126.__isset;
}
DelPresentRsp& DelPresentRsp::operator=(const DelPresentRsp& other127) {
  error = other127.error;
  errmsg = other127.errmsg;
  __isset = other127.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelPresentRsp& obj) {
  using apache::thrift::to_string;
  out << "DelPresentRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


PresentListReq::~PresentListReq() throw() {
}


void PresentListReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* PresentListReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t PresentListReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t PresentListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PresentListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PresentListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PresentListReq &a, PresentListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

PresentListReq::PresentListReq(const PresentListReq& other128) {
  cond = other128.cond;
  __isset = other128.__isset;
}
PresentListReq& PresentListReq::operator=(const PresentListReq& other129) {
  cond = other129.cond;
  __isset = other129.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PresentListReq& obj) {
  using apache::thrift::to_string;
  out << "PresentListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


PresentListRsp::~PresentListRsp() throw() {
}


void PresentListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void PresentListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void PresentListRsp::__set_presentList(const std::vector< ::onsale::Present> & val) {
  this->presentList = val;
}

const char* PresentListRsp::ascii_fingerprint = "A071B0F8762A5DF6CA6E479686A0C340";
const uint8_t PresentListRsp::binary_fingerprint[16] = {0xA0,0x71,0xB0,0xF8,0x76,0x2A,0x5D,0xF6,0xCA,0x6E,0x47,0x96,0x86,0xA0,0xC3,0x40};

uint32_t PresentListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast130;
          xfer += iprot->readI32(ecast130);
          this->error = ( ::onsale::Error::type)ecast130;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->presentList.clear();
            uint32_t _size131;
            ::apache::thrift::protocol::TType _etype134;
            xfer += iprot->readListBegin(_etype134, _size131);
            this->presentList.resize(_size131);
            uint32_t _i135;
            for (_i135 = 0; _i135 < _size131; ++_i135)
            {
              xfer += this->presentList[_i135].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.presentList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PresentListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PresentListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("presentList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->presentList.size()));
    std::vector< ::onsale::Present> ::const_iterator _iter136;
    for (_iter136 = this->presentList.begin(); _iter136 != this->presentList.end(); ++_iter136)
    {
      xfer += (*_iter136).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PresentListRsp &a, PresentListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.presentList, b.presentList);
  swap(a.__isset, b.__isset);
}

PresentListRsp::PresentListRsp(const PresentListRsp& other137) {
  error = other137.error;
  errmsg = other137.errmsg;
  presentList = other137.presentList;
  __isset = other137.__isset;
}
PresentListRsp& PresentListRsp::operator=(const PresentListRsp& other138) {
  error = other138.error;
  errmsg = other138.errmsg;
  presentList = other138.presentList;
  __isset = other138.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PresentListRsp& obj) {
  using apache::thrift::to_string;
  out << "PresentListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "presentList=" << to_string(obj.presentList);
  out << ")";
  return out;
}


CreateWareLabelReq::~CreateWareLabelReq() throw() {
}


void CreateWareLabelReq::__set_name(const std::string& val) {
  this->name = val;
}

void CreateWareLabelReq::__set_label_type(const int32_t val) {
  this->label_type = val;
}

void CreateWareLabelReq::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void CreateWareLabelReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void CreateWareLabelReq::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void CreateWareLabelReq::__set_seller_slug(const std::string& val) {
  this->seller_slug = val;
}

void CreateWareLabelReq::__set_create_man(const std::string& val) {
  this->create_man = val;
}

const char* CreateWareLabelReq::ascii_fingerprint = "3AAB69FCBC513879047C0B98199A8296";
const uint8_t CreateWareLabelReq::binary_fingerprint[16] = {0x3A,0xAB,0x69,0xFC,0xBC,0x51,0x38,0x79,0x04,0x7C,0x0B,0x98,0x19,0x9A,0x82,0x96};

uint32_t CreateWareLabelReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_label_type = false;
  bool isset_scope_type = false;
  bool isset_sub_type = false;
  bool isset_seller_id = false;
  bool isset_seller_slug = false;
  bool isset_create_man = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label_type);
          isset_label_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          isset_scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          isset_seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->seller_slug);
          isset_seller_slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->create_man);
          isset_create_man = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scope_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seller_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seller_slug)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_create_man)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateWareLabelReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateWareLabelReq");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->label_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_slug", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->seller_slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_man", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->create_man);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateWareLabelReq &a, CreateWareLabelReq &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.label_type, b.label_type);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.seller_id, b.seller_id);
  swap(a.seller_slug, b.seller_slug);
  swap(a.create_man, b.create_man);
}

CreateWareLabelReq::CreateWareLabelReq(const CreateWareLabelReq& other139) {
  name = other139.name;
  label_type = other139.label_type;
  scope_type = other139.scope_type;
  sub_type = other139.sub_type;
  seller_id = other139.seller_id;
  seller_slug = other139.seller_slug;
  create_man = other139.create_man;
}
CreateWareLabelReq& CreateWareLabelReq::operator=(const CreateWareLabelReq& other140) {
  name = other140.name;
  label_type = other140.label_type;
  scope_type = other140.scope_type;
  sub_type = other140.sub_type;
  seller_id = other140.seller_id;
  seller_slug = other140.seller_slug;
  create_man = other140.create_man;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateWareLabelReq& obj) {
  using apache::thrift::to_string;
  out << "CreateWareLabelReq(";
  out << "name=" << to_string(obj.name);
  out << ", " << "label_type=" << to_string(obj.label_type);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "seller_slug=" << to_string(obj.seller_slug);
  out << ", " << "create_man=" << to_string(obj.create_man);
  out << ")";
  return out;
}


CreateWareLabelRsp::~CreateWareLabelRsp() throw() {
}


void CreateWareLabelRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void CreateWareLabelRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CreateWareLabelRsp::__set_wareLabel(const  ::onsale::WareLabel& val) {
  this->wareLabel = val;
}

const char* CreateWareLabelRsp::ascii_fingerprint = "287CE3DFA7ACB20B2DC13D49562A1D22";
const uint8_t CreateWareLabelRsp::binary_fingerprint[16] = {0x28,0x7C,0xE3,0xDF,0xA7,0xAC,0xB2,0x0B,0x2D,0xC1,0x3D,0x49,0x56,0x2A,0x1D,0x22};

uint32_t CreateWareLabelRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast141;
          xfer += iprot->readI32(ecast141);
          this->error = ( ::onsale::Error::type)ecast141;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wareLabel.read(iprot);
          this->__isset.wareLabel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateWareLabelRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateWareLabelRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabel", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->wareLabel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateWareLabelRsp &a, CreateWareLabelRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareLabel, b.wareLabel);
  swap(a.__isset, b.__isset);
}

CreateWareLabelRsp::CreateWareLabelRsp(const CreateWareLabelRsp& other142) {
  error = other142.error;
  errmsg = other142.errmsg;
  wareLabel = other142.wareLabel;
  __isset = other142.__isset;
}
CreateWareLabelRsp& CreateWareLabelRsp::operator=(const CreateWareLabelRsp& other143) {
  error = other143.error;
  errmsg = other143.errmsg;
  wareLabel = other143.wareLabel;
  __isset = other143.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateWareLabelRsp& obj) {
  using apache::thrift::to_string;
  out << "CreateWareLabelRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareLabel=" << to_string(obj.wareLabel);
  out << ")";
  return out;
}


UpdateWareLabelReq::~UpdateWareLabelReq() throw() {
}


void UpdateWareLabelReq::__set_wareLabel(const  ::onsale::WareLabel& val) {
  this->wareLabel = val;
}

const char* UpdateWareLabelReq::ascii_fingerprint = "CA7EAD3FFCADEADE8C2D7D35E7F25C60";
const uint8_t UpdateWareLabelReq::binary_fingerprint[16] = {0xCA,0x7E,0xAD,0x3F,0xFC,0xAD,0xEA,0xDE,0x8C,0x2D,0x7D,0x35,0xE7,0xF2,0x5C,0x60};

uint32_t UpdateWareLabelReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_wareLabel = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wareLabel.read(iprot);
          isset_wareLabel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_wareLabel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateWareLabelReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateWareLabelReq");

  xfer += oprot->writeFieldBegin("wareLabel", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->wareLabel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateWareLabelReq &a, UpdateWareLabelReq &b) {
  using ::std::swap;
  swap(a.wareLabel, b.wareLabel);
}

UpdateWareLabelReq::UpdateWareLabelReq(const UpdateWareLabelReq& other144) {
  wareLabel = other144.wareLabel;
}
UpdateWareLabelReq& UpdateWareLabelReq::operator=(const UpdateWareLabelReq& other145) {
  wareLabel = other145.wareLabel;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateWareLabelReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateWareLabelReq(";
  out << "wareLabel=" << to_string(obj.wareLabel);
  out << ")";
  return out;
}


UpdateWareLabelRsp::~UpdateWareLabelRsp() throw() {
}


void UpdateWareLabelRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void UpdateWareLabelRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateWareLabelRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateWareLabelRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateWareLabelRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast146;
          xfer += iprot->readI32(ecast146);
          this->error = ( ::onsale::Error::type)ecast146;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateWareLabelRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateWareLabelRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateWareLabelRsp &a, UpdateWareLabelRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateWareLabelRsp::UpdateWareLabelRsp(const UpdateWareLabelRsp& other147) {
  error = other147.error;
  errmsg = other147.errmsg;
  __isset = other147.__isset;
}
UpdateWareLabelRsp& UpdateWareLabelRsp::operator=(const UpdateWareLabelRsp& other148) {
  error = other148.error;
  errmsg = other148.errmsg;
  __isset = other148.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateWareLabelRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateWareLabelRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


WareLabelCountReq::~WareLabelCountReq() throw() {
}


void WareLabelCountReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* WareLabelCountReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t WareLabelCountReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t WareLabelCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelCountReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelCountReq &a, WareLabelCountReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

WareLabelCountReq::WareLabelCountReq(const WareLabelCountReq& other149) {
  cond = other149.cond;
  __isset = other149.__isset;
}
WareLabelCountReq& WareLabelCountReq::operator=(const WareLabelCountReq& other150) {
  cond = other150.cond;
  __isset = other150.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelCountReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelCountReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


WareLabelCountRsp::~WareLabelCountRsp() throw() {
}


void WareLabelCountRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void WareLabelCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* WareLabelCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t WareLabelCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t WareLabelCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast151;
          xfer += iprot->readI32(ecast151);
          this->error = ( ::onsale::Error::type)ecast151;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelCountRsp &a, WareLabelCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

WareLabelCountRsp::WareLabelCountRsp(const WareLabelCountRsp& other152) {
  error = other152.error;
  errmsg = other152.errmsg;
  count = other152.count;
  __isset = other152.__isset;
}
WareLabelCountRsp& WareLabelCountRsp::operator=(const WareLabelCountRsp& other153) {
  error = other153.error;
  errmsg = other153.errmsg;
  count = other153.count;
  __isset = other153.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelCountRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


WareLabelListReq::~WareLabelListReq() throw() {
}


void WareLabelListReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* WareLabelListReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t WareLabelListReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t WareLabelListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelListReq &a, WareLabelListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

WareLabelListReq::WareLabelListReq(const WareLabelListReq& other154) {
  cond = other154.cond;
  __isset = other154.__isset;
}
WareLabelListReq& WareLabelListReq::operator=(const WareLabelListReq& other155) {
  cond = other155.cond;
  __isset = other155.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelListReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


WareLabelListRsp::~WareLabelListRsp() throw() {
}


void WareLabelListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void WareLabelListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelListRsp::__set_wareLabelList(const std::vector< ::onsale::WareLabel> & val) {
  this->wareLabelList = val;
}

const char* WareLabelListRsp::ascii_fingerprint = "B4D9C48AF4A85CF5919DBBA5809F5DF2";
const uint8_t WareLabelListRsp::binary_fingerprint[16] = {0xB4,0xD9,0xC4,0x8A,0xF4,0xA8,0x5C,0xF5,0x91,0x9D,0xBB,0xA5,0x80,0x9F,0x5D,0xF2};

uint32_t WareLabelListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast156;
          xfer += iprot->readI32(ecast156);
          this->error = ( ::onsale::Error::type)ecast156;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wareLabelList.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->wareLabelList.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->wareLabelList[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.wareLabelList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabelList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->wareLabelList.size()));
    std::vector< ::onsale::WareLabel> ::const_iterator _iter162;
    for (_iter162 = this->wareLabelList.begin(); _iter162 != this->wareLabelList.end(); ++_iter162)
    {
      xfer += (*_iter162).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelListRsp &a, WareLabelListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareLabelList, b.wareLabelList);
  swap(a.__isset, b.__isset);
}

WareLabelListRsp::WareLabelListRsp(const WareLabelListRsp& other163) {
  error = other163.error;
  errmsg = other163.errmsg;
  wareLabelList = other163.wareLabelList;
  __isset = other163.__isset;
}
WareLabelListRsp& WareLabelListRsp::operator=(const WareLabelListRsp& other164) {
  error = other164.error;
  errmsg = other164.errmsg;
  wareLabelList = other164.wareLabelList;
  __isset = other164.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelListRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareLabelList=" << to_string(obj.wareLabelList);
  out << ")";
  return out;
}


AddWareLabelWaresReq::~AddWareLabelWaresReq() throw() {
}


void AddWareLabelWaresReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void AddWareLabelWaresReq::__set_ware_list(const std::vector< ::onsale::WareLabelWares> & val) {
  this->ware_list = val;
}

const char* AddWareLabelWaresReq::ascii_fingerprint = "333DA4801C28B46DBCDE5725ECE42B8A";
const uint8_t AddWareLabelWaresReq::binary_fingerprint[16] = {0x33,0x3D,0xA4,0x80,0x1C,0x28,0xB4,0x6D,0xBC,0xDE,0x57,0x25,0xEC,0xE4,0x2B,0x8A};

uint32_t AddWareLabelWaresReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_ware_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ware_list.clear();
            uint32_t _size165;
            ::apache::thrift::protocol::TType _etype168;
            xfer += iprot->readListBegin(_etype168, _size165);
            this->ware_list.resize(_size165);
            uint32_t _i169;
            for (_i169 = 0; _i169 < _size165; ++_i169)
            {
              xfer += this->ware_list[_i169].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_ware_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ware_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddWareLabelWaresReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddWareLabelWaresReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ware_list.size()));
    std::vector< ::onsale::WareLabelWares> ::const_iterator _iter170;
    for (_iter170 = this->ware_list.begin(); _iter170 != this->ware_list.end(); ++_iter170)
    {
      xfer += (*_iter170).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddWareLabelWaresReq &a, AddWareLabelWaresReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.ware_list, b.ware_list);
}

AddWareLabelWaresReq::AddWareLabelWaresReq(const AddWareLabelWaresReq& other171) {
  ware_label_id = other171.ware_label_id;
  ware_list = other171.ware_list;
}
AddWareLabelWaresReq& AddWareLabelWaresReq::operator=(const AddWareLabelWaresReq& other172) {
  ware_label_id = other172.ware_label_id;
  ware_list = other172.ware_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresReq& obj) {
  using apache::thrift::to_string;
  out << "AddWareLabelWaresReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "ware_list=" << to_string(obj.ware_list);
  out << ")";
  return out;
}


AddWareLabelWaresRsp::~AddWareLabelWaresRsp() throw() {
}


void AddWareLabelWaresRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void AddWareLabelWaresRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* AddWareLabelWaresRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t AddWareLabelWaresRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t AddWareLabelWaresRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast173;
          xfer += iprot->readI32(ecast173);
          this->error = ( ::onsale::Error::type)ecast173;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddWareLabelWaresRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddWareLabelWaresRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddWareLabelWaresRsp &a, AddWareLabelWaresRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

AddWareLabelWaresRsp::AddWareLabelWaresRsp(const AddWareLabelWaresRsp& other174) {
  error = other174.error;
  errmsg = other174.errmsg;
  __isset = other174.__isset;
}
AddWareLabelWaresRsp& AddWareLabelWaresRsp::operator=(const AddWareLabelWaresRsp& other175) {
  error = other175.error;
  errmsg = other175.errmsg;
  __isset = other175.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresRsp& obj) {
  using apache::thrift::to_string;
  out << "AddWareLabelWaresRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


DelWareLabelWaresReq::~DelWareLabelWaresReq() throw() {
}


void DelWareLabelWaresReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void DelWareLabelWaresReq::__set_ware_list(const std::vector< ::onsale::WareLabelWares> & val) {
  this->ware_list = val;
}

const char* DelWareLabelWaresReq::ascii_fingerprint = "333DA4801C28B46DBCDE5725ECE42B8A";
const uint8_t DelWareLabelWaresReq::binary_fingerprint[16] = {0x33,0x3D,0xA4,0x80,0x1C,0x28,0xB4,0x6D,0xBC,0xDE,0x57,0x25,0xEC,0xE4,0x2B,0x8A};

uint32_t DelWareLabelWaresReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_ware_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ware_list.clear();
            uint32_t _size176;
            ::apache::thrift::protocol::TType _etype179;
            xfer += iprot->readListBegin(_etype179, _size176);
            this->ware_list.resize(_size176);
            uint32_t _i180;
            for (_i180 = 0; _i180 < _size176; ++_i180)
            {
              xfer += this->ware_list[_i180].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_ware_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ware_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DelWareLabelWaresReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelWareLabelWaresReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ware_list.size()));
    std::vector< ::onsale::WareLabelWares> ::const_iterator _iter181;
    for (_iter181 = this->ware_list.begin(); _iter181 != this->ware_list.end(); ++_iter181)
    {
      xfer += (*_iter181).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelWareLabelWaresReq &a, DelWareLabelWaresReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.ware_list, b.ware_list);
}

DelWareLabelWaresReq::DelWareLabelWaresReq(const DelWareLabelWaresReq& other182) {
  ware_label_id = other182.ware_label_id;
  ware_list = other182.ware_list;
}
DelWareLabelWaresReq& DelWareLabelWaresReq::operator=(const DelWareLabelWaresReq& other183) {
  ware_label_id = other183.ware_label_id;
  ware_list = other183.ware_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresReq& obj) {
  using apache::thrift::to_string;
  out << "DelWareLabelWaresReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "ware_list=" << to_string(obj.ware_list);
  out << ")";
  return out;
}


DelWareLabelWaresRsp::~DelWareLabelWaresRsp() throw() {
}


void DelWareLabelWaresRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void DelWareLabelWaresRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* DelWareLabelWaresRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t DelWareLabelWaresRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t DelWareLabelWaresRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast184;
          xfer += iprot->readI32(ecast184);
          this->error = ( ::onsale::Error::type)ecast184;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelWareLabelWaresRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelWareLabelWaresRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelWareLabelWaresRsp &a, DelWareLabelWaresRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

DelWareLabelWaresRsp::DelWareLabelWaresRsp(const DelWareLabelWaresRsp& other185) {
  error = other185.error;
  errmsg = other185.errmsg;
  __isset = other185.__isset;
}
DelWareLabelWaresRsp& DelWareLabelWaresRsp::operator=(const DelWareLabelWaresRsp& other186) {
  error = other186.error;
  errmsg = other186.errmsg;
  __isset = other186.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresRsp& obj) {
  using apache::thrift::to_string;
  out << "DelWareLabelWaresRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


WareLabelWaresCountReq::~WareLabelWaresCountReq() throw() {
}


void WareLabelWaresCountReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* WareLabelWaresCountReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t WareLabelWaresCountReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t WareLabelWaresCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresCountReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresCountReq &a, WareLabelWaresCountReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

WareLabelWaresCountReq::WareLabelWaresCountReq(const WareLabelWaresCountReq& other187) {
  cond = other187.cond;
  __isset = other187.__isset;
}
WareLabelWaresCountReq& WareLabelWaresCountReq::operator=(const WareLabelWaresCountReq& other188) {
  cond = other188.cond;
  __isset = other188.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresCountReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


WareLabelWaresCountRsp::~WareLabelWaresCountRsp() throw() {
}


void WareLabelWaresCountRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void WareLabelWaresCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelWaresCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* WareLabelWaresCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t WareLabelWaresCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t WareLabelWaresCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast189;
          xfer += iprot->readI32(ecast189);
          this->error = ( ::onsale::Error::type)ecast189;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresCountRsp &a, WareLabelWaresCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

WareLabelWaresCountRsp::WareLabelWaresCountRsp(const WareLabelWaresCountRsp& other190) {
  error = other190.error;
  errmsg = other190.errmsg;
  count = other190.count;
  __isset = other190.__isset;
}
WareLabelWaresCountRsp& WareLabelWaresCountRsp::operator=(const WareLabelWaresCountRsp& other191) {
  error = other191.error;
  errmsg = other191.errmsg;
  count = other191.count;
  __isset = other191.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


WareLabelWaresListReq::~WareLabelWaresListReq() throw() {
}


void WareLabelWaresListReq::__set_cond(const  ::onsale::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* WareLabelWaresListReq::ascii_fingerprint = "A6757ABA95C8CAC1C182351CF4D0DA31";
const uint8_t WareLabelWaresListReq::binary_fingerprint[16] = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

uint32_t WareLabelWaresListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresListReq &a, WareLabelWaresListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

WareLabelWaresListReq::WareLabelWaresListReq(const WareLabelWaresListReq& other192) {
  cond = other192.cond;
  __isset = other192.__isset;
}
WareLabelWaresListReq& WareLabelWaresListReq::operator=(const WareLabelWaresListReq& other193) {
  cond = other193.cond;
  __isset = other193.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresListReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


WareLabelWaresListRsp::~WareLabelWaresListRsp() throw() {
}


void WareLabelWaresListRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void WareLabelWaresListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelWaresListRsp::__set_wareLabelWaresList(const std::vector< ::onsale::WareLabelWares> & val) {
  this->wareLabelWaresList = val;
}

const char* WareLabelWaresListRsp::ascii_fingerprint = "C86EB89A063C833120BB408698268ACF";
const uint8_t WareLabelWaresListRsp::binary_fingerprint[16] = {0xC8,0x6E,0xB8,0x9A,0x06,0x3C,0x83,0x31,0x20,0xBB,0x40,0x86,0x98,0x26,0x8A,0xCF};

uint32_t WareLabelWaresListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast194;
          xfer += iprot->readI32(ecast194);
          this->error = ( ::onsale::Error::type)ecast194;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wareLabelWaresList.clear();
            uint32_t _size195;
            ::apache::thrift::protocol::TType _etype198;
            xfer += iprot->readListBegin(_etype198, _size195);
            this->wareLabelWaresList.resize(_size195);
            uint32_t _i199;
            for (_i199 = 0; _i199 < _size195; ++_i199)
            {
              xfer += this->wareLabelWaresList[_i199].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.wareLabelWaresList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabelWaresList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->wareLabelWaresList.size()));
    std::vector< ::onsale::WareLabelWares> ::const_iterator _iter200;
    for (_iter200 = this->wareLabelWaresList.begin(); _iter200 != this->wareLabelWaresList.end(); ++_iter200)
    {
      xfer += (*_iter200).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresListRsp &a, WareLabelWaresListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareLabelWaresList, b.wareLabelWaresList);
  swap(a.__isset, b.__isset);
}

WareLabelWaresListRsp::WareLabelWaresListRsp(const WareLabelWaresListRsp& other201) {
  error = other201.error;
  errmsg = other201.errmsg;
  wareLabelWaresList = other201.wareLabelWaresList;
  __isset = other201.__isset;
}
WareLabelWaresListRsp& WareLabelWaresListRsp::operator=(const WareLabelWaresListRsp& other202) {
  error = other202.error;
  errmsg = other202.errmsg;
  wareLabelWaresList = other202.wareLabelWaresList;
  __isset = other202.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresListRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareLabelWaresList=" << to_string(obj.wareLabelWaresList);
  out << ")";
  return out;
}


OfflineReq::~OfflineReq() throw() {
}


void OfflineReq::__set_onsale_group_id(const int32_t val) {
  this->onsale_group_id = val;
}

const char* OfflineReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t OfflineReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t OfflineReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_onsale_group_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onsale_group_id);
          isset_onsale_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_onsale_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OfflineReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OfflineReq");

  xfer += oprot->writeFieldBegin("onsale_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->onsale_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OfflineReq &a, OfflineReq &b) {
  using ::std::swap;
  swap(a.onsale_group_id, b.onsale_group_id);
}

OfflineReq::OfflineReq(const OfflineReq& other203) {
  onsale_group_id = other203.onsale_group_id;
}
OfflineReq& OfflineReq::operator=(const OfflineReq& other204) {
  onsale_group_id = other204.onsale_group_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OfflineReq& obj) {
  using apache::thrift::to_string;
  out << "OfflineReq(";
  out << "onsale_group_id=" << to_string(obj.onsale_group_id);
  out << ")";
  return out;
}


OfflineRsp::~OfflineRsp() throw() {
}


void OfflineRsp::__set_error(const  ::onsale::Error::type val) {
  this->error = val;
}

void OfflineRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* OfflineRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t OfflineRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t OfflineRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast205;
          xfer += iprot->readI32(ecast205);
          this->error = ( ::onsale::Error::type)ecast205;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OfflineRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OfflineRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OfflineRsp &a, OfflineRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

OfflineRsp::OfflineRsp(const OfflineRsp& other206) {
  error = other206.error;
  errmsg = other206.errmsg;
  __isset = other206.__isset;
}
OfflineRsp& OfflineRsp::operator=(const OfflineRsp& other207) {
  error = other207.error;
  errmsg = other207.errmsg;
  __isset = other207.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OfflineRsp& obj) {
  using apache::thrift::to_string;
  out << "OfflineRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}

} // namespace
