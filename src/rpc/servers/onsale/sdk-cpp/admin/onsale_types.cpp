/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "onsale_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace onsale {

int _kErrorValues[] = {
  Error::OK,
  Error::FAILED,
  Error::NO_DATA_YOU_EXPECTED,
  Error::MYSQL_DISCONNECTED,
  Error::MYSQL_EXECUTE_ERROR,
  Error::REDIS_DISCONNECTED,
  Error::REDIS_EXECUTE_ERROR,
  Error::COUNT_OVERLOAD,
  Error::WARE_LABEL_NOT_EXISTS,
  Error::GROUP_NOT_EXISTS,
  Error::INVALID_WARE_LABEL_ID,
  Error::INVALID_SUB_TYPE,
  Error::NO_USABLE_GROUP,
  Error::WARE_LABEL_ID_REUSE,
  Error::INVALID_RATE,
  Error::INVALID_STEP_FULL,
  Error::NO_STEP,
  Error::INVALID_TIME
};
const char* _kErrorNames[] = {
  "OK",
  "FAILED",
  "NO_DATA_YOU_EXPECTED",
  "MYSQL_DISCONNECTED",
  "MYSQL_EXECUTE_ERROR",
  "REDIS_DISCONNECTED",
  "REDIS_EXECUTE_ERROR",
  "COUNT_OVERLOAD",
  "WARE_LABEL_NOT_EXISTS",
  "GROUP_NOT_EXISTS",
  "INVALID_WARE_LABEL_ID",
  "INVALID_SUB_TYPE",
  "NO_USABLE_GROUP",
  "WARE_LABEL_ID_REUSE",
  "INVALID_RATE",
  "INVALID_STEP_FULL",
  "NO_STEP",
  "INVALID_TIME"
};
const std::map<int, const char*> _Error_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(18, _kErrorValues, _kErrorNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


InvalidOperation::~InvalidOperation() throw() {
}


void InvalidOperation::__set_fault(const Error::type val) {
  this->fault = val;
}

void InvalidOperation::__set_why(const std::string& val) {
  this->why = val;
}

const char* InvalidOperation::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t InvalidOperation::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t InvalidOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->fault = (Error::type)ecast0;
          this->__isset.fault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidOperation");

  xfer += oprot->writeFieldBegin("fault", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->fault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  swap(a.fault, b.fault);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

InvalidOperation::InvalidOperation(const InvalidOperation& other1) : TException() {
  fault = other1.fault;
  why = other1.why;
  __isset = other1.__isset;
}
InvalidOperation& InvalidOperation::operator=(const InvalidOperation& other2) {
  fault = other2.fault;
  why = other2.why;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidOperation(";
  out << "fault=" << to_string(obj.fault);
  out << ", " << "why=" << to_string(obj.why);
  out << ")";
  return out;
}


MultipleCondition::~MultipleCondition() throw() {
}


void MultipleCondition::__set_andCondList(const std::vector<std::string> & val) {
  this->andCondList = val;
}

void MultipleCondition::__set_orCondList(const std::vector<std::string> & val) {
  this->orCondList = val;
}

void MultipleCondition::__set_orderCondList(const std::vector<std::string> & val) {
  this->orderCondList = val;
}

void MultipleCondition::__set_limitCond(const std::string& val) {
  this->limitCond = val;
}

const char* MultipleCondition::ascii_fingerprint = "F723F4943AF7A19B3FC99469709BE072";
const uint8_t MultipleCondition::binary_fingerprint[16] = {0xF7,0x23,0xF4,0x94,0x3A,0xF7,0xA1,0x9B,0x3F,0xC9,0x94,0x69,0x70,0x9B,0xE0,0x72};

uint32_t MultipleCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->andCondList.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->andCondList.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += iprot->readString(this->andCondList[_i7]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.andCondList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orCondList.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->orCondList.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readString(this->orCondList[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orCondList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orderCondList.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->orderCondList.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += iprot->readString(this->orderCondList[_i17]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orderCondList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->limitCond);
          this->__isset.limitCond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MultipleCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MultipleCondition");

  xfer += oprot->writeFieldBegin("andCondList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->andCondList.size()));
    std::vector<std::string> ::const_iterator _iter18;
    for (_iter18 = this->andCondList.begin(); _iter18 != this->andCondList.end(); ++_iter18)
    {
      xfer += oprot->writeString((*_iter18));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orCondList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orCondList.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->orCondList.begin(); _iter19 != this->orCondList.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderCondList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orderCondList.size()));
    std::vector<std::string> ::const_iterator _iter20;
    for (_iter20 = this->orderCondList.begin(); _iter20 != this->orderCondList.end(); ++_iter20)
    {
      xfer += oprot->writeString((*_iter20));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limitCond", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->limitCond);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MultipleCondition &a, MultipleCondition &b) {
  using ::std::swap;
  swap(a.andCondList, b.andCondList);
  swap(a.orCondList, b.orCondList);
  swap(a.orderCondList, b.orderCondList);
  swap(a.limitCond, b.limitCond);
  swap(a.__isset, b.__isset);
}

MultipleCondition::MultipleCondition(const MultipleCondition& other21) {
  andCondList = other21.andCondList;
  orCondList = other21.orCondList;
  orderCondList = other21.orderCondList;
  limitCond = other21.limitCond;
  __isset = other21.__isset;
}
MultipleCondition& MultipleCondition::operator=(const MultipleCondition& other22) {
  andCondList = other22.andCondList;
  orCondList = other22.orCondList;
  orderCondList = other22.orderCondList;
  limitCond = other22.limitCond;
  __isset = other22.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MultipleCondition& obj) {
  using apache::thrift::to_string;
  out << "MultipleCondition(";
  out << "andCondList=" << to_string(obj.andCondList);
  out << ", " << "orCondList=" << to_string(obj.orCondList);
  out << ", " << "orderCondList=" << to_string(obj.orderCondList);
  out << ", " << "limitCond=" << to_string(obj.limitCond);
  out << ")";
  return out;
}


WareLabel::~WareLabel() throw() {
}


void WareLabel::__set_name(const std::string& val) {
  this->name = val;
}

void WareLabel::__set_label_type(const int32_t val) {
  this->label_type = val;
}

void WareLabel::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void WareLabel::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void WareLabel::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void WareLabel::__set_seller_slug(const std::string& val) {
  this->seller_slug = val;
}

void WareLabel::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void WareLabel::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void WareLabel::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void WareLabel::__set_create_man(const std::string& val) {
  this->create_man = val;
}

const char* WareLabel::ascii_fingerprint = "E5C0F8E0C1200E0DE5F29F2A65B00482";
const uint8_t WareLabel::binary_fingerprint[16] = {0xE5,0xC0,0xF8,0xE0,0xC1,0x20,0x0E,0x0D,0xE5,0xF2,0x9F,0x2A,0x65,0xB0,0x04,0x82};

uint32_t WareLabel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label_type);
          this->__isset.label_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          this->__isset.scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          this->__isset.sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->seller_slug);
          this->__isset.seller_slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->create_man);
          this->__isset.create_man = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabel");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->label_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_slug", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->seller_slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_man", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->create_man);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabel &a, WareLabel &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.label_type, b.label_type);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.seller_id, b.seller_id);
  swap(a.seller_slug, b.seller_slug);
  swap(a.create_time, b.create_time);
  swap(a.update_time, b.update_time);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.create_man, b.create_man);
  swap(a.__isset, b.__isset);
}

WareLabel::WareLabel(const WareLabel& other23) {
  name = other23.name;
  label_type = other23.label_type;
  scope_type = other23.scope_type;
  sub_type = other23.sub_type;
  seller_id = other23.seller_id;
  seller_slug = other23.seller_slug;
  create_time = other23.create_time;
  update_time = other23.update_time;
  ware_label_id = other23.ware_label_id;
  create_man = other23.create_man;
  __isset = other23.__isset;
}
WareLabel& WareLabel::operator=(const WareLabel& other24) {
  name = other24.name;
  label_type = other24.label_type;
  scope_type = other24.scope_type;
  sub_type = other24.sub_type;
  seller_id = other24.seller_id;
  seller_slug = other24.seller_slug;
  create_time = other24.create_time;
  update_time = other24.update_time;
  ware_label_id = other24.ware_label_id;
  create_man = other24.create_man;
  __isset = other24.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabel& obj) {
  using apache::thrift::to_string;
  out << "WareLabel(";
  out << "name=" << to_string(obj.name);
  out << ", " << "label_type=" << to_string(obj.label_type);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "seller_slug=" << to_string(obj.seller_slug);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "create_man=" << to_string(obj.create_man);
  out << ")";
  return out;
}


WareLabelWares::~WareLabelWares() throw() {
}


void WareLabelWares::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void WareLabelWares::__set_ware_id(const int64_t val) {
  this->ware_id = val;
}

void WareLabelWares::__set_create_time(const int32_t val) {
  this->create_time = val;
}

const char* WareLabelWares::ascii_fingerprint = "A4A0F95E131942F14FC4C720956834FA";
const uint8_t WareLabelWares::binary_fingerprint[16] = {0xA4,0xA0,0xF9,0x5E,0x13,0x19,0x42,0xF1,0x4F,0xC4,0xC7,0x20,0x95,0x68,0x34,0xFA};

uint32_t WareLabelWares::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ware_id);
          this->__isset.ware_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWares::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWares");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ware_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWares &a, WareLabelWares &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.ware_id, b.ware_id);
  swap(a.create_time, b.create_time);
  swap(a.__isset, b.__isset);
}

WareLabelWares::WareLabelWares(const WareLabelWares& other25) {
  ware_label_id = other25.ware_label_id;
  ware_id = other25.ware_id;
  create_time = other25.create_time;
  __isset = other25.__isset;
}
WareLabelWares& WareLabelWares::operator=(const WareLabelWares& other26) {
  ware_label_id = other26.ware_label_id;
  ware_id = other26.ware_id;
  create_time = other26.create_time;
  __isset = other26.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWares& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWares(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "ware_id=" << to_string(obj.ware_id);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ")";
  return out;
}


Present::~Present() throw() {
}


void Present::__set_step_id(const int32_t val) {
  this->step_id = val;
}

void Present::__set_sku_id(const int64_t val) {
  this->sku_id = val;
}

void Present::__set_sku_price(const double val) {
  this->sku_price = val;
}

void Present::__set_sku_count(const int32_t val) {
  this->sku_count = val;
}

void Present::__set_sku_slug(const std::string& val) {
  this->sku_slug = val;
}

const char* Present::ascii_fingerprint = "92F43D58D7D46787A3D50FF88B115B77";
const uint8_t Present::binary_fingerprint[16] = {0x92,0xF4,0x3D,0x58,0xD7,0xD4,0x67,0x87,0xA3,0xD5,0x0F,0xF8,0x8B,0x11,0x5B,0x77};

uint32_t Present::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_id);
          this->__isset.step_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sku_id);
          this->__isset.sku_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sku_price);
          this->__isset.sku_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sku_count);
          this->__isset.sku_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sku_slug);
          this->__isset.sku_slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Present::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Present");

  xfer += oprot->writeFieldBegin("step_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->step_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sku_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_price", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->sku_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->sku_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_slug", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->sku_slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Present &a, Present &b) {
  using ::std::swap;
  swap(a.step_id, b.step_id);
  swap(a.sku_id, b.sku_id);
  swap(a.sku_price, b.sku_price);
  swap(a.sku_count, b.sku_count);
  swap(a.sku_slug, b.sku_slug);
  swap(a.__isset, b.__isset);
}

Present::Present(const Present& other27) {
  step_id = other27.step_id;
  sku_id = other27.sku_id;
  sku_price = other27.sku_price;
  sku_count = other27.sku_count;
  sku_slug = other27.sku_slug;
  __isset = other27.__isset;
}
Present& Present::operator=(const Present& other28) {
  step_id = other28.step_id;
  sku_id = other28.sku_id;
  sku_price = other28.sku_price;
  sku_count = other28.sku_count;
  sku_slug = other28.sku_slug;
  __isset = other28.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Present& obj) {
  using apache::thrift::to_string;
  out << "Present(";
  out << "step_id=" << to_string(obj.step_id);
  out << ", " << "sku_id=" << to_string(obj.sku_id);
  out << ", " << "sku_price=" << to_string(obj.sku_price);
  out << ", " << "sku_count=" << to_string(obj.sku_count);
  out << ", " << "sku_slug=" << to_string(obj.sku_slug);
  out << ")";
  return out;
}


Step::~Step() throw() {
}


void Step::__set_onsale_group_id(const int32_t val) {
  this->onsale_group_id = val;
}

void Step::__set_full_credit(const double val) {
  this->full_credit = val;
}

void Step::__set_favor_credit(const double val) {
  this->favor_credit = val;
}

void Step::__set_favor_rate(const double val) {
  this->favor_rate = val;
}

void Step::__set_full_count(const int32_t val) {
  this->full_count = val;
}

void Step::__set_full_rate(const double val) {
  this->full_rate = val;
}

void Step::__set_full_price(const double val) {
  this->full_price = val;
}

void Step::__set_step_id(const int32_t val) {
  this->step_id = val;
}

const char* Step::ascii_fingerprint = "F8D5440615C54895725C88CEF3EA255A";
const uint8_t Step::binary_fingerprint[16] = {0xF8,0xD5,0x44,0x06,0x15,0xC5,0x48,0x95,0x72,0x5C,0x88,0xCE,0xF3,0xEA,0x25,0x5A};

uint32_t Step::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onsale_group_id);
          this->__isset.onsale_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->full_credit);
          this->__isset.full_credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor_credit);
          this->__isset.favor_credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor_rate);
          this->__isset.favor_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->full_count);
          this->__isset.full_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->full_rate);
          this->__isset.full_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->full_price);
          this->__isset.full_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_id);
          this->__isset.step_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Step::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Step");

  xfer += oprot->writeFieldBegin("onsale_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->onsale_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_credit", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->full_credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_credit", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->favor_credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_rate", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->favor_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_count", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->full_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_rate", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->full_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_price", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->full_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step_id", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->step_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Step &a, Step &b) {
  using ::std::swap;
  swap(a.onsale_group_id, b.onsale_group_id);
  swap(a.full_credit, b.full_credit);
  swap(a.favor_credit, b.favor_credit);
  swap(a.favor_rate, b.favor_rate);
  swap(a.full_count, b.full_count);
  swap(a.full_rate, b.full_rate);
  swap(a.full_price, b.full_price);
  swap(a.step_id, b.step_id);
  swap(a.__isset, b.__isset);
}

Step::Step(const Step& other29) {
  onsale_group_id = other29.onsale_group_id;
  full_credit = other29.full_credit;
  favor_credit = other29.favor_credit;
  favor_rate = other29.favor_rate;
  full_count = other29.full_count;
  full_rate = other29.full_rate;
  full_price = other29.full_price;
  step_id = other29.step_id;
  __isset = other29.__isset;
}
Step& Step::operator=(const Step& other30) {
  onsale_group_id = other30.onsale_group_id;
  full_credit = other30.full_credit;
  favor_credit = other30.favor_credit;
  favor_rate = other30.favor_rate;
  full_count = other30.full_count;
  full_rate = other30.full_rate;
  full_price = other30.full_price;
  step_id = other30.step_id;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Step& obj) {
  using apache::thrift::to_string;
  out << "Step(";
  out << "onsale_group_id=" << to_string(obj.onsale_group_id);
  out << ", " << "full_credit=" << to_string(obj.full_credit);
  out << ", " << "favor_credit=" << to_string(obj.favor_credit);
  out << ", " << "favor_rate=" << to_string(obj.favor_rate);
  out << ", " << "full_count=" << to_string(obj.full_count);
  out << ", " << "full_rate=" << to_string(obj.full_rate);
  out << ", " << "full_price=" << to_string(obj.full_price);
  out << ", " << "step_id=" << to_string(obj.step_id);
  out << ")";
  return out;
}


OnsaleGroup::~OnsaleGroup() throw() {
}


void OnsaleGroup::__set_id(const int32_t val) {
  this->id = val;
}

void OnsaleGroup::__set_slug(const std::string& val) {
  this->slug = val;
}

void OnsaleGroup::__set_name(const std::string& val) {
  this->name = val;
}

void OnsaleGroup::__set_title(const std::string& val) {
  this->title = val;
}

void OnsaleGroup::__set_comment(const std::string& val) {
  this->comment = val;
}

void OnsaleGroup::__set_favor_type(const int32_t val) {
  this->favor_type = val;
}

void OnsaleGroup::__set_label_type(const int32_t val) {
  this->label_type = val;
}

void OnsaleGroup::__set_involve_count(const int32_t val) {
  this->involve_count = val;
}

void OnsaleGroup::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void OnsaleGroup::__set_start_time(const int32_t val) {
  this->start_time = val;
}

void OnsaleGroup::__set_end_time(const int32_t val) {
  this->end_time = val;
}

void OnsaleGroup::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void OnsaleGroup::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void OnsaleGroup::__set_verify_status(const int32_t val) {
  this->verify_status = val;
}

void OnsaleGroup::__set_applicant(const std::string& val) {
  this->applicant = val;
}

void OnsaleGroup::__set_approver(const std::string& val) {
  this->approver = val;
}

void OnsaleGroup::__set_modifier(const std::string& val) {
  this->modifier = val;
}

void OnsaleGroup::__set_jump_label(const std::string& val) {
  this->jump_label = val;
}

void OnsaleGroup::__set_jump_data(const std::string& val) {
  this->jump_data = val;
}

const char* OnsaleGroup::ascii_fingerprint = "58DD5D3C7471A68452B8EA88E167A067";
const uint8_t OnsaleGroup::binary_fingerprint[16] = {0x58,0xDD,0x5D,0x3C,0x74,0x71,0xA6,0x84,0x52,0xB8,0xEA,0x88,0xE1,0x67,0xA0,0x67};

uint32_t OnsaleGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slug);
          this->__isset.slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->favor_type);
          this->__isset.favor_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label_type);
          this->__isset.label_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->involve_count);
          this->__isset.involve_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_time);
          this->__isset.start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->verify_status);
          this->__isset.verify_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicant);
          this->__isset.applicant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->approver);
          this->__isset.approver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifier);
          this->__isset.modifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_label);
          this->__isset.jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_data);
          this->__isset.jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnsaleGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OnsaleGroup");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slug", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->favor_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->label_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("involve_count", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->involve_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verify_status", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->verify_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicant", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->applicant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approver", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->approver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifier", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->modifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_label", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_data", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OnsaleGroup &a, OnsaleGroup &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.slug, b.slug);
  swap(a.name, b.name);
  swap(a.title, b.title);
  swap(a.comment, b.comment);
  swap(a.favor_type, b.favor_type);
  swap(a.label_type, b.label_type);
  swap(a.involve_count, b.involve_count);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.start_time, b.start_time);
  swap(a.end_time, b.end_time);
  swap(a.create_time, b.create_time);
  swap(a.update_time, b.update_time);
  swap(a.verify_status, b.verify_status);
  swap(a.applicant, b.applicant);
  swap(a.approver, b.approver);
  swap(a.modifier, b.modifier);
  swap(a.jump_label, b.jump_label);
  swap(a.jump_data, b.jump_data);
  swap(a.__isset, b.__isset);
}

OnsaleGroup::OnsaleGroup(const OnsaleGroup& other31) {
  id = other31.id;
  slug = other31.slug;
  name = other31.name;
  title = other31.title;
  comment = other31.comment;
  favor_type = other31.favor_type;
  label_type = other31.label_type;
  involve_count = other31.involve_count;
  ware_label_id = other31.ware_label_id;
  start_time = other31.start_time;
  end_time = other31.end_time;
  create_time = other31.create_time;
  update_time = other31.update_time;
  verify_status = other31.verify_status;
  applicant = other31.applicant;
  approver = other31.approver;
  modifier = other31.modifier;
  jump_label = other31.jump_label;
  jump_data = other31.jump_data;
  __isset = other31.__isset;
}
OnsaleGroup& OnsaleGroup::operator=(const OnsaleGroup& other32) {
  id = other32.id;
  slug = other32.slug;
  name = other32.name;
  title = other32.title;
  comment = other32.comment;
  favor_type = other32.favor_type;
  label_type = other32.label_type;
  involve_count = other32.involve_count;
  ware_label_id = other32.ware_label_id;
  start_time = other32.start_time;
  end_time = other32.end_time;
  create_time = other32.create_time;
  update_time = other32.update_time;
  verify_status = other32.verify_status;
  applicant = other32.applicant;
  approver = other32.approver;
  modifier = other32.modifier;
  jump_label = other32.jump_label;
  jump_data = other32.jump_data;
  __isset = other32.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OnsaleGroup& obj) {
  using apache::thrift::to_string;
  out << "OnsaleGroup(";
  out << "id=" << to_string(obj.id);
  out << ", " << "slug=" << to_string(obj.slug);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "comment=" << to_string(obj.comment);
  out << ", " << "favor_type=" << to_string(obj.favor_type);
  out << ", " << "label_type=" << to_string(obj.label_type);
  out << ", " << "involve_count=" << to_string(obj.involve_count);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "start_time=" << to_string(obj.start_time);
  out << ", " << "end_time=" << to_string(obj.end_time);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "verify_status=" << to_string(obj.verify_status);
  out << ", " << "applicant=" << to_string(obj.applicant);
  out << ", " << "approver=" << to_string(obj.approver);
  out << ", " << "modifier=" << to_string(obj.modifier);
  out << ", " << "jump_label=" << to_string(obj.jump_label);
  out << ", " << "jump_data=" << to_string(obj.jump_data);
  out << ")";
  return out;
}

} // namespace
