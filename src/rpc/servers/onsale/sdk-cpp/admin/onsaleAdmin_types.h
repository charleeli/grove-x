/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef onsaleAdmin_TYPES_H
#define onsaleAdmin_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "onsale_types.h"


namespace onsaleAdmin {

class AddCacheNameListReq;

class AddCacheNameListRsp;

class DelCacheNameListReq;

class DelCacheNameListRsp;

class GetCacheNameListReq;

class GetCacheNameListRsp;

class CheckCacheNameListReq;

class CheckCacheNameListRsp;

class ViewCheckCacheNameListReq;

class ViewCheckCacheNameListRsp;

class LatestTimestampReq;

class LatestTimestampRsp;

class CreateNameListReq;

class CreateNameListRsp;

class CreateOnsaleGroupReq;

class CreateOnsaleGroupRsp;

class UpdateOnsaleGroupReq;

class UpdateOnsaleGroupRsp;

class OnsaleGroupCountReq;

class OnsaleGroupCountRsp;

class OnsaleGroupListReq;

class OnsaleGroupListRsp;

class AddStepReq;

class AddStepRsp;

class DelStepReq;

class DelStepRsp;

class StepListReq;

class StepListRsp;

class AddPresentReq;

class AddPresentRsp;

class DelPresentReq;

class DelPresentRsp;

class PresentListReq;

class PresentListRsp;

class CreateWareLabelReq;

class CreateWareLabelRsp;

class UpdateWareLabelReq;

class UpdateWareLabelRsp;

class WareLabelCountReq;

class WareLabelCountRsp;

class WareLabelListReq;

class WareLabelListRsp;

class AddWareLabelWaresReq;

class AddWareLabelWaresRsp;

class DelWareLabelWaresReq;

class DelWareLabelWaresRsp;

class WareLabelWaresCountReq;

class WareLabelWaresCountRsp;

class WareLabelWaresListReq;

class WareLabelWaresListRsp;

class OfflineReq;

class OfflineRsp;


class AddCacheNameListReq {
 public:

  static const char* ascii_fingerprint; // = "CB1F117F79F5EF1724EF57230C9746AF";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x1F,0x11,0x7F,0x79,0xF5,0xEF,0x17,0x24,0xEF,0x57,0x23,0x0C,0x97,0x46,0xAF};

  AddCacheNameListReq(const AddCacheNameListReq&);
  AddCacheNameListReq& operator=(const AddCacheNameListReq&);
  AddCacheNameListReq() : ware_label_id(0), sub_type(0) {
  }

  virtual ~AddCacheNameListReq() throw();
  int32_t ware_label_id;
  int32_t sub_type;
  std::vector<int64_t>  ware_id_list;

  void __set_ware_label_id(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_ware_id_list(const std::vector<int64_t> & val);

  bool operator == (const AddCacheNameListReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(ware_id_list == rhs.ware_id_list))
      return false;
    return true;
  }
  bool operator != (const AddCacheNameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddCacheNameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddCacheNameListReq& obj);
};

void swap(AddCacheNameListReq &a, AddCacheNameListReq &b);

typedef struct _AddCacheNameListRsp__isset {
  _AddCacheNameListRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _AddCacheNameListRsp__isset;

class AddCacheNameListRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  AddCacheNameListRsp(const AddCacheNameListRsp&);
  AddCacheNameListRsp& operator=(const AddCacheNameListRsp&);
  AddCacheNameListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~AddCacheNameListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _AddCacheNameListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const AddCacheNameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const AddCacheNameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddCacheNameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddCacheNameListRsp& obj);
};

void swap(AddCacheNameListRsp &a, AddCacheNameListRsp &b);


class DelCacheNameListReq {
 public:

  static const char* ascii_fingerprint; // = "CB1F117F79F5EF1724EF57230C9746AF";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x1F,0x11,0x7F,0x79,0xF5,0xEF,0x17,0x24,0xEF,0x57,0x23,0x0C,0x97,0x46,0xAF};

  DelCacheNameListReq(const DelCacheNameListReq&);
  DelCacheNameListReq& operator=(const DelCacheNameListReq&);
  DelCacheNameListReq() : ware_label_id(0), sub_type(0) {
  }

  virtual ~DelCacheNameListReq() throw();
  int32_t ware_label_id;
  int32_t sub_type;
  std::vector<int64_t>  ware_id_list;

  void __set_ware_label_id(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_ware_id_list(const std::vector<int64_t> & val);

  bool operator == (const DelCacheNameListReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(ware_id_list == rhs.ware_id_list))
      return false;
    return true;
  }
  bool operator != (const DelCacheNameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelCacheNameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelCacheNameListReq& obj);
};

void swap(DelCacheNameListReq &a, DelCacheNameListReq &b);

typedef struct _DelCacheNameListRsp__isset {
  _DelCacheNameListRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _DelCacheNameListRsp__isset;

class DelCacheNameListRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  DelCacheNameListRsp(const DelCacheNameListRsp&);
  DelCacheNameListRsp& operator=(const DelCacheNameListRsp&);
  DelCacheNameListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~DelCacheNameListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _DelCacheNameListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const DelCacheNameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const DelCacheNameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelCacheNameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelCacheNameListRsp& obj);
};

void swap(DelCacheNameListRsp &a, DelCacheNameListRsp &b);


class GetCacheNameListReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  GetCacheNameListReq(const GetCacheNameListReq&);
  GetCacheNameListReq& operator=(const GetCacheNameListReq&);
  GetCacheNameListReq() : ware_label_id(0), sub_type(0) {
  }

  virtual ~GetCacheNameListReq() throw();
  int32_t ware_label_id;
  int32_t sub_type;

  void __set_ware_label_id(const int32_t val);

  void __set_sub_type(const int32_t val);

  bool operator == (const GetCacheNameListReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    return true;
  }
  bool operator != (const GetCacheNameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCacheNameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetCacheNameListReq& obj);
};

void swap(GetCacheNameListReq &a, GetCacheNameListReq &b);

typedef struct _GetCacheNameListRsp__isset {
  _GetCacheNameListRsp__isset() : error(false), errmsg(false), ware_id_list(false) {}
  bool error :1;
  bool errmsg :1;
  bool ware_id_list :1;
} _GetCacheNameListRsp__isset;

class GetCacheNameListRsp {
 public:

  static const char* ascii_fingerprint; // = "EC9673EEAE3E5A373D15AC0EC614F2A0";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x96,0x73,0xEE,0xAE,0x3E,0x5A,0x37,0x3D,0x15,0xAC,0x0E,0xC6,0x14,0xF2,0xA0};

  GetCacheNameListRsp(const GetCacheNameListRsp&);
  GetCacheNameListRsp& operator=(const GetCacheNameListRsp&);
  GetCacheNameListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~GetCacheNameListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector<int64_t>  ware_id_list;

  _GetCacheNameListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_ware_id_list(const std::vector<int64_t> & val);

  bool operator == (const GetCacheNameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(ware_id_list == rhs.ware_id_list))
      return false;
    return true;
  }
  bool operator != (const GetCacheNameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCacheNameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetCacheNameListRsp& obj);
};

void swap(GetCacheNameListRsp &a, GetCacheNameListRsp &b);


class CheckCacheNameListReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  CheckCacheNameListReq(const CheckCacheNameListReq&);
  CheckCacheNameListReq& operator=(const CheckCacheNameListReq&);
  CheckCacheNameListReq() : ware_label_id(0), sub_type(0) {
  }

  virtual ~CheckCacheNameListReq() throw();
  int32_t ware_label_id;
  int32_t sub_type;

  void __set_ware_label_id(const int32_t val);

  void __set_sub_type(const int32_t val);

  bool operator == (const CheckCacheNameListReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    return true;
  }
  bool operator != (const CheckCacheNameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckCacheNameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CheckCacheNameListReq& obj);
};

void swap(CheckCacheNameListReq &a, CheckCacheNameListReq &b);

typedef struct _CheckCacheNameListRsp__isset {
  _CheckCacheNameListRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _CheckCacheNameListRsp__isset;

class CheckCacheNameListRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  CheckCacheNameListRsp(const CheckCacheNameListRsp&);
  CheckCacheNameListRsp& operator=(const CheckCacheNameListRsp&);
  CheckCacheNameListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~CheckCacheNameListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _CheckCacheNameListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const CheckCacheNameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const CheckCacheNameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckCacheNameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CheckCacheNameListRsp& obj);
};

void swap(CheckCacheNameListRsp &a, CheckCacheNameListRsp &b);


class ViewCheckCacheNameListReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  ViewCheckCacheNameListReq(const ViewCheckCacheNameListReq&);
  ViewCheckCacheNameListReq& operator=(const ViewCheckCacheNameListReq&);
  ViewCheckCacheNameListReq() : ware_label_id(0), sub_type(0) {
  }

  virtual ~ViewCheckCacheNameListReq() throw();
  int32_t ware_label_id;
  int32_t sub_type;

  void __set_ware_label_id(const int32_t val);

  void __set_sub_type(const int32_t val);

  bool operator == (const ViewCheckCacheNameListReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    return true;
  }
  bool operator != (const ViewCheckCacheNameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewCheckCacheNameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ViewCheckCacheNameListReq& obj);
};

void swap(ViewCheckCacheNameListReq &a, ViewCheckCacheNameListReq &b);

typedef struct _ViewCheckCacheNameListRsp__isset {
  _ViewCheckCacheNameListRsp__isset() : error(false), errmsg(false), ware_id_list(false), timestamp(false) {}
  bool error :1;
  bool errmsg :1;
  bool ware_id_list :1;
  bool timestamp :1;
} _ViewCheckCacheNameListRsp__isset;

class ViewCheckCacheNameListRsp {
 public:

  static const char* ascii_fingerprint; // = "2803BA453A88B8D6D9C50FAF47473E41";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0x03,0xBA,0x45,0x3A,0x88,0xB8,0xD6,0xD9,0xC5,0x0F,0xAF,0x47,0x47,0x3E,0x41};

  ViewCheckCacheNameListRsp(const ViewCheckCacheNameListRsp&);
  ViewCheckCacheNameListRsp& operator=(const ViewCheckCacheNameListRsp&);
  ViewCheckCacheNameListRsp() : error(( ::onsale::Error::type)0), errmsg(), timestamp(0) {
  }

  virtual ~ViewCheckCacheNameListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector<int64_t>  ware_id_list;
  int32_t timestamp;

  _ViewCheckCacheNameListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_ware_id_list(const std::vector<int64_t> & val);

  void __set_timestamp(const int32_t val);

  bool operator == (const ViewCheckCacheNameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(ware_id_list == rhs.ware_id_list))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const ViewCheckCacheNameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewCheckCacheNameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ViewCheckCacheNameListRsp& obj);
};

void swap(ViewCheckCacheNameListRsp &a, ViewCheckCacheNameListRsp &b);


class LatestTimestampReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  LatestTimestampReq(const LatestTimestampReq&);
  LatestTimestampReq& operator=(const LatestTimestampReq&);
  LatestTimestampReq() : ware_label_id(0) {
  }

  virtual ~LatestTimestampReq() throw();
  int32_t ware_label_id;

  void __set_ware_label_id(const int32_t val);

  bool operator == (const LatestTimestampReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    return true;
  }
  bool operator != (const LatestTimestampReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LatestTimestampReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LatestTimestampReq& obj);
};

void swap(LatestTimestampReq &a, LatestTimestampReq &b);

typedef struct _LatestTimestampRsp__isset {
  _LatestTimestampRsp__isset() : error(false), errmsg(false), timestamp(false) {}
  bool error :1;
  bool errmsg :1;
  bool timestamp :1;
} _LatestTimestampRsp__isset;

class LatestTimestampRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  LatestTimestampRsp(const LatestTimestampRsp&);
  LatestTimestampRsp& operator=(const LatestTimestampRsp&);
  LatestTimestampRsp() : error(( ::onsale::Error::type)0), errmsg(), timestamp(0) {
  }

  virtual ~LatestTimestampRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  int32_t timestamp;

  _LatestTimestampRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_timestamp(const int32_t val);

  bool operator == (const LatestTimestampRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const LatestTimestampRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LatestTimestampRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LatestTimestampRsp& obj);
};

void swap(LatestTimestampRsp &a, LatestTimestampRsp &b);


class CreateNameListReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  CreateNameListReq(const CreateNameListReq&);
  CreateNameListReq& operator=(const CreateNameListReq&);
  CreateNameListReq() : ware_label_id(0), sub_type(0) {
  }

  virtual ~CreateNameListReq() throw();
  int32_t ware_label_id;
  int32_t sub_type;

  void __set_ware_label_id(const int32_t val);

  void __set_sub_type(const int32_t val);

  bool operator == (const CreateNameListReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    return true;
  }
  bool operator != (const CreateNameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateNameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateNameListReq& obj);
};

void swap(CreateNameListReq &a, CreateNameListReq &b);

typedef struct _CreateNameListRsp__isset {
  _CreateNameListRsp__isset() : error(false), errmsg(false), time_cost(false) {}
  bool error :1;
  bool errmsg :1;
  bool time_cost :1;
} _CreateNameListRsp__isset;

class CreateNameListRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  CreateNameListRsp(const CreateNameListRsp&);
  CreateNameListRsp& operator=(const CreateNameListRsp&);
  CreateNameListRsp() : error(( ::onsale::Error::type)0), errmsg(), time_cost(0) {
  }

  virtual ~CreateNameListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  int32_t time_cost;

  _CreateNameListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_time_cost(const int32_t val);

  bool operator == (const CreateNameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(time_cost == rhs.time_cost))
      return false;
    return true;
  }
  bool operator != (const CreateNameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateNameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateNameListRsp& obj);
};

void swap(CreateNameListRsp &a, CreateNameListRsp &b);


class CreateOnsaleGroupReq {
 public:

  static const char* ascii_fingerprint; // = "1B45940ED308F1F6DD6D722AAE6CDBC2";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x45,0x94,0x0E,0xD3,0x08,0xF1,0xF6,0xDD,0x6D,0x72,0x2A,0xAE,0x6C,0xDB,0xC2};

  CreateOnsaleGroupReq(const CreateOnsaleGroupReq&);
  CreateOnsaleGroupReq& operator=(const CreateOnsaleGroupReq&);
  CreateOnsaleGroupReq() {
  }

  virtual ~CreateOnsaleGroupReq() throw();
   ::onsale::OnsaleGroup onsaleGroup;

  void __set_onsaleGroup(const  ::onsale::OnsaleGroup& val);

  bool operator == (const CreateOnsaleGroupReq & rhs) const
  {
    if (!(onsaleGroup == rhs.onsaleGroup))
      return false;
    return true;
  }
  bool operator != (const CreateOnsaleGroupReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateOnsaleGroupReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateOnsaleGroupReq& obj);
};

void swap(CreateOnsaleGroupReq &a, CreateOnsaleGroupReq &b);

typedef struct _CreateOnsaleGroupRsp__isset {
  _CreateOnsaleGroupRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _CreateOnsaleGroupRsp__isset;

class CreateOnsaleGroupRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  CreateOnsaleGroupRsp(const CreateOnsaleGroupRsp&);
  CreateOnsaleGroupRsp& operator=(const CreateOnsaleGroupRsp&);
  CreateOnsaleGroupRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~CreateOnsaleGroupRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _CreateOnsaleGroupRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const CreateOnsaleGroupRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const CreateOnsaleGroupRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateOnsaleGroupRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateOnsaleGroupRsp& obj);
};

void swap(CreateOnsaleGroupRsp &a, CreateOnsaleGroupRsp &b);


class UpdateOnsaleGroupReq {
 public:

  static const char* ascii_fingerprint; // = "1B45940ED308F1F6DD6D722AAE6CDBC2";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x45,0x94,0x0E,0xD3,0x08,0xF1,0xF6,0xDD,0x6D,0x72,0x2A,0xAE,0x6C,0xDB,0xC2};

  UpdateOnsaleGroupReq(const UpdateOnsaleGroupReq&);
  UpdateOnsaleGroupReq& operator=(const UpdateOnsaleGroupReq&);
  UpdateOnsaleGroupReq() {
  }

  virtual ~UpdateOnsaleGroupReq() throw();
   ::onsale::OnsaleGroup onsaleGroup;

  void __set_onsaleGroup(const  ::onsale::OnsaleGroup& val);

  bool operator == (const UpdateOnsaleGroupReq & rhs) const
  {
    if (!(onsaleGroup == rhs.onsaleGroup))
      return false;
    return true;
  }
  bool operator != (const UpdateOnsaleGroupReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateOnsaleGroupReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateOnsaleGroupReq& obj);
};

void swap(UpdateOnsaleGroupReq &a, UpdateOnsaleGroupReq &b);

typedef struct _UpdateOnsaleGroupRsp__isset {
  _UpdateOnsaleGroupRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateOnsaleGroupRsp__isset;

class UpdateOnsaleGroupRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateOnsaleGroupRsp(const UpdateOnsaleGroupRsp&);
  UpdateOnsaleGroupRsp& operator=(const UpdateOnsaleGroupRsp&);
  UpdateOnsaleGroupRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~UpdateOnsaleGroupRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _UpdateOnsaleGroupRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateOnsaleGroupRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateOnsaleGroupRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateOnsaleGroupRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateOnsaleGroupRsp& obj);
};

void swap(UpdateOnsaleGroupRsp &a, UpdateOnsaleGroupRsp &b);

typedef struct _OnsaleGroupCountReq__isset {
  _OnsaleGroupCountReq__isset() : cond(false) {}
  bool cond :1;
} _OnsaleGroupCountReq__isset;

class OnsaleGroupCountReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  OnsaleGroupCountReq(const OnsaleGroupCountReq&);
  OnsaleGroupCountReq& operator=(const OnsaleGroupCountReq&);
  OnsaleGroupCountReq() {
  }

  virtual ~OnsaleGroupCountReq() throw();
   ::onsale::MultipleCondition cond;

  _OnsaleGroupCountReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const OnsaleGroupCountReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const OnsaleGroupCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleGroupCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleGroupCountReq& obj);
};

void swap(OnsaleGroupCountReq &a, OnsaleGroupCountReq &b);

typedef struct _OnsaleGroupCountRsp__isset {
  _OnsaleGroupCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _OnsaleGroupCountRsp__isset;

class OnsaleGroupCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  OnsaleGroupCountRsp(const OnsaleGroupCountRsp&);
  OnsaleGroupCountRsp& operator=(const OnsaleGroupCountRsp&);
  OnsaleGroupCountRsp() : error(( ::onsale::Error::type)0), errmsg(), count(0) {
  }

  virtual ~OnsaleGroupCountRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  int32_t count;

  _OnsaleGroupCountRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const OnsaleGroupCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const OnsaleGroupCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleGroupCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleGroupCountRsp& obj);
};

void swap(OnsaleGroupCountRsp &a, OnsaleGroupCountRsp &b);

typedef struct _OnsaleGroupListReq__isset {
  _OnsaleGroupListReq__isset() : cond(false) {}
  bool cond :1;
} _OnsaleGroupListReq__isset;

class OnsaleGroupListReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  OnsaleGroupListReq(const OnsaleGroupListReq&);
  OnsaleGroupListReq& operator=(const OnsaleGroupListReq&);
  OnsaleGroupListReq() {
  }

  virtual ~OnsaleGroupListReq() throw();
   ::onsale::MultipleCondition cond;

  _OnsaleGroupListReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const OnsaleGroupListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const OnsaleGroupListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleGroupListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleGroupListReq& obj);
};

void swap(OnsaleGroupListReq &a, OnsaleGroupListReq &b);

typedef struct _OnsaleGroupListRsp__isset {
  _OnsaleGroupListRsp__isset() : error(false), errmsg(false), onsaleGroupList(false) {}
  bool error :1;
  bool errmsg :1;
  bool onsaleGroupList :1;
} _OnsaleGroupListRsp__isset;

class OnsaleGroupListRsp {
 public:

  static const char* ascii_fingerprint; // = "721E6467621E46B7C05DDD06A4147C91";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x1E,0x64,0x67,0x62,0x1E,0x46,0xB7,0xC0,0x5D,0xDD,0x06,0xA4,0x14,0x7C,0x91};

  OnsaleGroupListRsp(const OnsaleGroupListRsp&);
  OnsaleGroupListRsp& operator=(const OnsaleGroupListRsp&);
  OnsaleGroupListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~OnsaleGroupListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector< ::onsale::OnsaleGroup>  onsaleGroupList;

  _OnsaleGroupListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_onsaleGroupList(const std::vector< ::onsale::OnsaleGroup> & val);

  bool operator == (const OnsaleGroupListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(onsaleGroupList == rhs.onsaleGroupList))
      return false;
    return true;
  }
  bool operator != (const OnsaleGroupListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnsaleGroupListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OnsaleGroupListRsp& obj);
};

void swap(OnsaleGroupListRsp &a, OnsaleGroupListRsp &b);


class AddStepReq {
 public:

  static const char* ascii_fingerprint; // = "CAA66F7EE7B0E235D206C64922C3EB70";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xA6,0x6F,0x7E,0xE7,0xB0,0xE2,0x35,0xD2,0x06,0xC6,0x49,0x22,0xC3,0xEB,0x70};

  AddStepReq(const AddStepReq&);
  AddStepReq& operator=(const AddStepReq&);
  AddStepReq() {
  }

  virtual ~AddStepReq() throw();
  std::vector< ::onsale::Step>  stepList;

  void __set_stepList(const std::vector< ::onsale::Step> & val);

  bool operator == (const AddStepReq & rhs) const
  {
    if (!(stepList == rhs.stepList))
      return false;
    return true;
  }
  bool operator != (const AddStepReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddStepReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddStepReq& obj);
};

void swap(AddStepReq &a, AddStepReq &b);

typedef struct _AddStepRsp__isset {
  _AddStepRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _AddStepRsp__isset;

class AddStepRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  AddStepRsp(const AddStepRsp&);
  AddStepRsp& operator=(const AddStepRsp&);
  AddStepRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~AddStepRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _AddStepRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const AddStepRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const AddStepRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddStepRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddStepRsp& obj);
};

void swap(AddStepRsp &a, AddStepRsp &b);

typedef struct _DelStepReq__isset {
  _DelStepReq__isset() : cond(false) {}
  bool cond :1;
} _DelStepReq__isset;

class DelStepReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  DelStepReq(const DelStepReq&);
  DelStepReq& operator=(const DelStepReq&);
  DelStepReq() {
  }

  virtual ~DelStepReq() throw();
   ::onsale::MultipleCondition cond;

  _DelStepReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const DelStepReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const DelStepReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelStepReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelStepReq& obj);
};

void swap(DelStepReq &a, DelStepReq &b);

typedef struct _DelStepRsp__isset {
  _DelStepRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _DelStepRsp__isset;

class DelStepRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  DelStepRsp(const DelStepRsp&);
  DelStepRsp& operator=(const DelStepRsp&);
  DelStepRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~DelStepRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _DelStepRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const DelStepRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const DelStepRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelStepRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelStepRsp& obj);
};

void swap(DelStepRsp &a, DelStepRsp &b);

typedef struct _StepListReq__isset {
  _StepListReq__isset() : cond(false) {}
  bool cond :1;
} _StepListReq__isset;

class StepListReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  StepListReq(const StepListReq&);
  StepListReq& operator=(const StepListReq&);
  StepListReq() {
  }

  virtual ~StepListReq() throw();
   ::onsale::MultipleCondition cond;

  _StepListReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const StepListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const StepListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StepListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StepListReq& obj);
};

void swap(StepListReq &a, StepListReq &b);

typedef struct _StepListRsp__isset {
  _StepListRsp__isset() : error(false), errmsg(false), stepList(false) {}
  bool error :1;
  bool errmsg :1;
  bool stepList :1;
} _StepListRsp__isset;

class StepListRsp {
 public:

  static const char* ascii_fingerprint; // = "35B87BE27B9D8556E8F07337D4A9E0CF";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xB8,0x7B,0xE2,0x7B,0x9D,0x85,0x56,0xE8,0xF0,0x73,0x37,0xD4,0xA9,0xE0,0xCF};

  StepListRsp(const StepListRsp&);
  StepListRsp& operator=(const StepListRsp&);
  StepListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~StepListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector< ::onsale::Step>  stepList;

  _StepListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_stepList(const std::vector< ::onsale::Step> & val);

  bool operator == (const StepListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(stepList == rhs.stepList))
      return false;
    return true;
  }
  bool operator != (const StepListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StepListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StepListRsp& obj);
};

void swap(StepListRsp &a, StepListRsp &b);


class AddPresentReq {
 public:

  static const char* ascii_fingerprint; // = "EDFB2BD37C9092FD41D931BA5282DCAC";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xFB,0x2B,0xD3,0x7C,0x90,0x92,0xFD,0x41,0xD9,0x31,0xBA,0x52,0x82,0xDC,0xAC};

  AddPresentReq(const AddPresentReq&);
  AddPresentReq& operator=(const AddPresentReq&);
  AddPresentReq() {
  }

  virtual ~AddPresentReq() throw();
  std::vector< ::onsale::Present>  presentList;

  void __set_presentList(const std::vector< ::onsale::Present> & val);

  bool operator == (const AddPresentReq & rhs) const
  {
    if (!(presentList == rhs.presentList))
      return false;
    return true;
  }
  bool operator != (const AddPresentReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddPresentReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddPresentReq& obj);
};

void swap(AddPresentReq &a, AddPresentReq &b);

typedef struct _AddPresentRsp__isset {
  _AddPresentRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _AddPresentRsp__isset;

class AddPresentRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  AddPresentRsp(const AddPresentRsp&);
  AddPresentRsp& operator=(const AddPresentRsp&);
  AddPresentRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~AddPresentRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _AddPresentRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const AddPresentRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const AddPresentRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddPresentRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddPresentRsp& obj);
};

void swap(AddPresentRsp &a, AddPresentRsp &b);

typedef struct _DelPresentReq__isset {
  _DelPresentReq__isset() : cond(false) {}
  bool cond :1;
} _DelPresentReq__isset;

class DelPresentReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  DelPresentReq(const DelPresentReq&);
  DelPresentReq& operator=(const DelPresentReq&);
  DelPresentReq() {
  }

  virtual ~DelPresentReq() throw();
   ::onsale::MultipleCondition cond;

  _DelPresentReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const DelPresentReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const DelPresentReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelPresentReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelPresentReq& obj);
};

void swap(DelPresentReq &a, DelPresentReq &b);

typedef struct _DelPresentRsp__isset {
  _DelPresentRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _DelPresentRsp__isset;

class DelPresentRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  DelPresentRsp(const DelPresentRsp&);
  DelPresentRsp& operator=(const DelPresentRsp&);
  DelPresentRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~DelPresentRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _DelPresentRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const DelPresentRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const DelPresentRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelPresentRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelPresentRsp& obj);
};

void swap(DelPresentRsp &a, DelPresentRsp &b);

typedef struct _PresentListReq__isset {
  _PresentListReq__isset() : cond(false) {}
  bool cond :1;
} _PresentListReq__isset;

class PresentListReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  PresentListReq(const PresentListReq&);
  PresentListReq& operator=(const PresentListReq&);
  PresentListReq() {
  }

  virtual ~PresentListReq() throw();
   ::onsale::MultipleCondition cond;

  _PresentListReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const PresentListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const PresentListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PresentListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PresentListReq& obj);
};

void swap(PresentListReq &a, PresentListReq &b);

typedef struct _PresentListRsp__isset {
  _PresentListRsp__isset() : error(false), errmsg(false), presentList(false) {}
  bool error :1;
  bool errmsg :1;
  bool presentList :1;
} _PresentListRsp__isset;

class PresentListRsp {
 public:

  static const char* ascii_fingerprint; // = "A071B0F8762A5DF6CA6E479686A0C340";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x71,0xB0,0xF8,0x76,0x2A,0x5D,0xF6,0xCA,0x6E,0x47,0x96,0x86,0xA0,0xC3,0x40};

  PresentListRsp(const PresentListRsp&);
  PresentListRsp& operator=(const PresentListRsp&);
  PresentListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~PresentListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector< ::onsale::Present>  presentList;

  _PresentListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_presentList(const std::vector< ::onsale::Present> & val);

  bool operator == (const PresentListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(presentList == rhs.presentList))
      return false;
    return true;
  }
  bool operator != (const PresentListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PresentListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PresentListRsp& obj);
};

void swap(PresentListRsp &a, PresentListRsp &b);


class CreateWareLabelReq {
 public:

  static const char* ascii_fingerprint; // = "3AAB69FCBC513879047C0B98199A8296";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0xAB,0x69,0xFC,0xBC,0x51,0x38,0x79,0x04,0x7C,0x0B,0x98,0x19,0x9A,0x82,0x96};

  CreateWareLabelReq(const CreateWareLabelReq&);
  CreateWareLabelReq& operator=(const CreateWareLabelReq&);
  CreateWareLabelReq() : name(), label_type(0), scope_type(0), sub_type(0), seller_id(0), seller_slug(), create_man() {
  }

  virtual ~CreateWareLabelReq() throw();
  std::string name;
  int32_t label_type;
  int32_t scope_type;
  int32_t sub_type;
  int64_t seller_id;
  std::string seller_slug;
  std::string create_man;

  void __set_name(const std::string& val);

  void __set_label_type(const int32_t val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_seller_id(const int64_t val);

  void __set_seller_slug(const std::string& val);

  void __set_create_man(const std::string& val);

  bool operator == (const CreateWareLabelReq & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(label_type == rhs.label_type))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(seller_slug == rhs.seller_slug))
      return false;
    if (!(create_man == rhs.create_man))
      return false;
    return true;
  }
  bool operator != (const CreateWareLabelReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateWareLabelReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateWareLabelReq& obj);
};

void swap(CreateWareLabelReq &a, CreateWareLabelReq &b);

typedef struct _CreateWareLabelRsp__isset {
  _CreateWareLabelRsp__isset() : error(false), errmsg(false), wareLabel(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareLabel :1;
} _CreateWareLabelRsp__isset;

class CreateWareLabelRsp {
 public:

  static const char* ascii_fingerprint; // = "287CE3DFA7ACB20B2DC13D49562A1D22";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0x7C,0xE3,0xDF,0xA7,0xAC,0xB2,0x0B,0x2D,0xC1,0x3D,0x49,0x56,0x2A,0x1D,0x22};

  CreateWareLabelRsp(const CreateWareLabelRsp&);
  CreateWareLabelRsp& operator=(const CreateWareLabelRsp&);
  CreateWareLabelRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~CreateWareLabelRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
   ::onsale::WareLabel wareLabel;

  _CreateWareLabelRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareLabel(const  ::onsale::WareLabel& val);

  bool operator == (const CreateWareLabelRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareLabel == rhs.wareLabel))
      return false;
    return true;
  }
  bool operator != (const CreateWareLabelRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateWareLabelRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateWareLabelRsp& obj);
};

void swap(CreateWareLabelRsp &a, CreateWareLabelRsp &b);


class UpdateWareLabelReq {
 public:

  static const char* ascii_fingerprint; // = "CA7EAD3FFCADEADE8C2D7D35E7F25C60";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x7E,0xAD,0x3F,0xFC,0xAD,0xEA,0xDE,0x8C,0x2D,0x7D,0x35,0xE7,0xF2,0x5C,0x60};

  UpdateWareLabelReq(const UpdateWareLabelReq&);
  UpdateWareLabelReq& operator=(const UpdateWareLabelReq&);
  UpdateWareLabelReq() {
  }

  virtual ~UpdateWareLabelReq() throw();
   ::onsale::WareLabel wareLabel;

  void __set_wareLabel(const  ::onsale::WareLabel& val);

  bool operator == (const UpdateWareLabelReq & rhs) const
  {
    if (!(wareLabel == rhs.wareLabel))
      return false;
    return true;
  }
  bool operator != (const UpdateWareLabelReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateWareLabelReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateWareLabelReq& obj);
};

void swap(UpdateWareLabelReq &a, UpdateWareLabelReq &b);

typedef struct _UpdateWareLabelRsp__isset {
  _UpdateWareLabelRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateWareLabelRsp__isset;

class UpdateWareLabelRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateWareLabelRsp(const UpdateWareLabelRsp&);
  UpdateWareLabelRsp& operator=(const UpdateWareLabelRsp&);
  UpdateWareLabelRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~UpdateWareLabelRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _UpdateWareLabelRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateWareLabelRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateWareLabelRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateWareLabelRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateWareLabelRsp& obj);
};

void swap(UpdateWareLabelRsp &a, UpdateWareLabelRsp &b);

typedef struct _WareLabelCountReq__isset {
  _WareLabelCountReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelCountReq__isset;

class WareLabelCountReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  WareLabelCountReq(const WareLabelCountReq&);
  WareLabelCountReq& operator=(const WareLabelCountReq&);
  WareLabelCountReq() {
  }

  virtual ~WareLabelCountReq() throw();
   ::onsale::MultipleCondition cond;

  _WareLabelCountReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const WareLabelCountReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const WareLabelCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelCountReq& obj);
};

void swap(WareLabelCountReq &a, WareLabelCountReq &b);

typedef struct _WareLabelCountRsp__isset {
  _WareLabelCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _WareLabelCountRsp__isset;

class WareLabelCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  WareLabelCountRsp(const WareLabelCountRsp&);
  WareLabelCountRsp& operator=(const WareLabelCountRsp&);
  WareLabelCountRsp() : error(( ::onsale::Error::type)0), errmsg(), count(0) {
  }

  virtual ~WareLabelCountRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  int32_t count;

  _WareLabelCountRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const WareLabelCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const WareLabelCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelCountRsp& obj);
};

void swap(WareLabelCountRsp &a, WareLabelCountRsp &b);

typedef struct _WareLabelListReq__isset {
  _WareLabelListReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelListReq__isset;

class WareLabelListReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  WareLabelListReq(const WareLabelListReq&);
  WareLabelListReq& operator=(const WareLabelListReq&);
  WareLabelListReq() {
  }

  virtual ~WareLabelListReq() throw();
   ::onsale::MultipleCondition cond;

  _WareLabelListReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const WareLabelListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const WareLabelListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelListReq& obj);
};

void swap(WareLabelListReq &a, WareLabelListReq &b);

typedef struct _WareLabelListRsp__isset {
  _WareLabelListRsp__isset() : error(false), errmsg(false), wareLabelList(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareLabelList :1;
} _WareLabelListRsp__isset;

class WareLabelListRsp {
 public:

  static const char* ascii_fingerprint; // = "B4D9C48AF4A85CF5919DBBA5809F5DF2";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xD9,0xC4,0x8A,0xF4,0xA8,0x5C,0xF5,0x91,0x9D,0xBB,0xA5,0x80,0x9F,0x5D,0xF2};

  WareLabelListRsp(const WareLabelListRsp&);
  WareLabelListRsp& operator=(const WareLabelListRsp&);
  WareLabelListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~WareLabelListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector< ::onsale::WareLabel>  wareLabelList;

  _WareLabelListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareLabelList(const std::vector< ::onsale::WareLabel> & val);

  bool operator == (const WareLabelListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareLabelList == rhs.wareLabelList))
      return false;
    return true;
  }
  bool operator != (const WareLabelListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelListRsp& obj);
};

void swap(WareLabelListRsp &a, WareLabelListRsp &b);


class AddWareLabelWaresReq {
 public:

  static const char* ascii_fingerprint; // = "333DA4801C28B46DBCDE5725ECE42B8A";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x3D,0xA4,0x80,0x1C,0x28,0xB4,0x6D,0xBC,0xDE,0x57,0x25,0xEC,0xE4,0x2B,0x8A};

  AddWareLabelWaresReq(const AddWareLabelWaresReq&);
  AddWareLabelWaresReq& operator=(const AddWareLabelWaresReq&);
  AddWareLabelWaresReq() : ware_label_id(0) {
  }

  virtual ~AddWareLabelWaresReq() throw();
  int32_t ware_label_id;
  std::vector< ::onsale::WareLabelWares>  ware_list;

  void __set_ware_label_id(const int32_t val);

  void __set_ware_list(const std::vector< ::onsale::WareLabelWares> & val);

  bool operator == (const AddWareLabelWaresReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(ware_list == rhs.ware_list))
      return false;
    return true;
  }
  bool operator != (const AddWareLabelWaresReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddWareLabelWaresReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresReq& obj);
};

void swap(AddWareLabelWaresReq &a, AddWareLabelWaresReq &b);

typedef struct _AddWareLabelWaresRsp__isset {
  _AddWareLabelWaresRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _AddWareLabelWaresRsp__isset;

class AddWareLabelWaresRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  AddWareLabelWaresRsp(const AddWareLabelWaresRsp&);
  AddWareLabelWaresRsp& operator=(const AddWareLabelWaresRsp&);
  AddWareLabelWaresRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~AddWareLabelWaresRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _AddWareLabelWaresRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const AddWareLabelWaresRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const AddWareLabelWaresRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddWareLabelWaresRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresRsp& obj);
};

void swap(AddWareLabelWaresRsp &a, AddWareLabelWaresRsp &b);


class DelWareLabelWaresReq {
 public:

  static const char* ascii_fingerprint; // = "333DA4801C28B46DBCDE5725ECE42B8A";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x3D,0xA4,0x80,0x1C,0x28,0xB4,0x6D,0xBC,0xDE,0x57,0x25,0xEC,0xE4,0x2B,0x8A};

  DelWareLabelWaresReq(const DelWareLabelWaresReq&);
  DelWareLabelWaresReq& operator=(const DelWareLabelWaresReq&);
  DelWareLabelWaresReq() : ware_label_id(0) {
  }

  virtual ~DelWareLabelWaresReq() throw();
  int32_t ware_label_id;
  std::vector< ::onsale::WareLabelWares>  ware_list;

  void __set_ware_label_id(const int32_t val);

  void __set_ware_list(const std::vector< ::onsale::WareLabelWares> & val);

  bool operator == (const DelWareLabelWaresReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(ware_list == rhs.ware_list))
      return false;
    return true;
  }
  bool operator != (const DelWareLabelWaresReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelWareLabelWaresReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresReq& obj);
};

void swap(DelWareLabelWaresReq &a, DelWareLabelWaresReq &b);

typedef struct _DelWareLabelWaresRsp__isset {
  _DelWareLabelWaresRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _DelWareLabelWaresRsp__isset;

class DelWareLabelWaresRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  DelWareLabelWaresRsp(const DelWareLabelWaresRsp&);
  DelWareLabelWaresRsp& operator=(const DelWareLabelWaresRsp&);
  DelWareLabelWaresRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~DelWareLabelWaresRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _DelWareLabelWaresRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const DelWareLabelWaresRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const DelWareLabelWaresRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelWareLabelWaresRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresRsp& obj);
};

void swap(DelWareLabelWaresRsp &a, DelWareLabelWaresRsp &b);

typedef struct _WareLabelWaresCountReq__isset {
  _WareLabelWaresCountReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelWaresCountReq__isset;

class WareLabelWaresCountReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  WareLabelWaresCountReq(const WareLabelWaresCountReq&);
  WareLabelWaresCountReq& operator=(const WareLabelWaresCountReq&);
  WareLabelWaresCountReq() {
  }

  virtual ~WareLabelWaresCountReq() throw();
   ::onsale::MultipleCondition cond;

  _WareLabelWaresCountReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const WareLabelWaresCountReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountReq& obj);
};

void swap(WareLabelWaresCountReq &a, WareLabelWaresCountReq &b);

typedef struct _WareLabelWaresCountRsp__isset {
  _WareLabelWaresCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _WareLabelWaresCountRsp__isset;

class WareLabelWaresCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  WareLabelWaresCountRsp(const WareLabelWaresCountRsp&);
  WareLabelWaresCountRsp& operator=(const WareLabelWaresCountRsp&);
  WareLabelWaresCountRsp() : error(( ::onsale::Error::type)0), errmsg(), count(0) {
  }

  virtual ~WareLabelWaresCountRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  int32_t count;

  _WareLabelWaresCountRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const WareLabelWaresCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountRsp& obj);
};

void swap(WareLabelWaresCountRsp &a, WareLabelWaresCountRsp &b);

typedef struct _WareLabelWaresListReq__isset {
  _WareLabelWaresListReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelWaresListReq__isset;

class WareLabelWaresListReq {
 public:

  static const char* ascii_fingerprint; // = "A6757ABA95C8CAC1C182351CF4D0DA31";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x75,0x7A,0xBA,0x95,0xC8,0xCA,0xC1,0xC1,0x82,0x35,0x1C,0xF4,0xD0,0xDA,0x31};

  WareLabelWaresListReq(const WareLabelWaresListReq&);
  WareLabelWaresListReq& operator=(const WareLabelWaresListReq&);
  WareLabelWaresListReq() {
  }

  virtual ~WareLabelWaresListReq() throw();
   ::onsale::MultipleCondition cond;

  _WareLabelWaresListReq__isset __isset;

  void __set_cond(const  ::onsale::MultipleCondition& val);

  bool operator == (const WareLabelWaresListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresListReq& obj);
};

void swap(WareLabelWaresListReq &a, WareLabelWaresListReq &b);

typedef struct _WareLabelWaresListRsp__isset {
  _WareLabelWaresListRsp__isset() : error(false), errmsg(false), wareLabelWaresList(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareLabelWaresList :1;
} _WareLabelWaresListRsp__isset;

class WareLabelWaresListRsp {
 public:

  static const char* ascii_fingerprint; // = "C86EB89A063C833120BB408698268ACF";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x6E,0xB8,0x9A,0x06,0x3C,0x83,0x31,0x20,0xBB,0x40,0x86,0x98,0x26,0x8A,0xCF};

  WareLabelWaresListRsp(const WareLabelWaresListRsp&);
  WareLabelWaresListRsp& operator=(const WareLabelWaresListRsp&);
  WareLabelWaresListRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~WareLabelWaresListRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;
  std::vector< ::onsale::WareLabelWares>  wareLabelWaresList;

  _WareLabelWaresListRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareLabelWaresList(const std::vector< ::onsale::WareLabelWares> & val);

  bool operator == (const WareLabelWaresListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareLabelWaresList == rhs.wareLabelWaresList))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresListRsp& obj);
};

void swap(WareLabelWaresListRsp &a, WareLabelWaresListRsp &b);


class OfflineReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  OfflineReq(const OfflineReq&);
  OfflineReq& operator=(const OfflineReq&);
  OfflineReq() : onsale_group_id(0) {
  }

  virtual ~OfflineReq() throw();
  int32_t onsale_group_id;

  void __set_onsale_group_id(const int32_t val);

  bool operator == (const OfflineReq & rhs) const
  {
    if (!(onsale_group_id == rhs.onsale_group_id))
      return false;
    return true;
  }
  bool operator != (const OfflineReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OfflineReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OfflineReq& obj);
};

void swap(OfflineReq &a, OfflineReq &b);

typedef struct _OfflineRsp__isset {
  _OfflineRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _OfflineRsp__isset;

class OfflineRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  OfflineRsp(const OfflineRsp&);
  OfflineRsp& operator=(const OfflineRsp&);
  OfflineRsp() : error(( ::onsale::Error::type)0), errmsg() {
  }

  virtual ~OfflineRsp() throw();
   ::onsale::Error::type error;
  std::string errmsg;

  _OfflineRsp__isset __isset;

  void __set_error(const  ::onsale::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const OfflineRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const OfflineRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OfflineRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OfflineRsp& obj);
};

void swap(OfflineRsp &a, OfflineRsp &b);

} // namespace

#endif
