// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "OnsaleAdminService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::onsaleAdmin;

class OnsaleAdminServiceHandler : virtual public OnsaleAdminServiceIf {
 public:
  OnsaleAdminServiceHandler() {
    // Your initialization goes here
  }

  void addCacheNameList(AddCacheNameListRsp& _return, const AddCacheNameListReq& addCacheNameListReq) {
    // Your implementation goes here
    printf("addCacheNameList\n");
  }

  void delCacheNameList(DelCacheNameListRsp& _return, const DelCacheNameListReq& delCacheNameListReq) {
    // Your implementation goes here
    printf("delCacheNameList\n");
  }

  void getCacheNameList(GetCacheNameListRsp& _return, const GetCacheNameListReq& getCacheNameListReq) {
    // Your implementation goes here
    printf("getCacheNameList\n");
  }

  void checkCacheNameList(CheckCacheNameListRsp& _return, const CheckCacheNameListReq& checkCacheNameListReq) {
    // Your implementation goes here
    printf("checkCacheNameList\n");
  }

  void viewCheckCacheNameList(ViewCheckCacheNameListRsp& _return, const ViewCheckCacheNameListReq& viewCheckCacheNameListReq) {
    // Your implementation goes here
    printf("viewCheckCacheNameList\n");
  }

  void getLatestTimestamp(LatestTimestampRsp& _return, const LatestTimestampReq& latestTimestampReq) {
    // Your implementation goes here
    printf("getLatestTimestamp\n");
  }

  void createNameList(CreateNameListRsp& _return, const CreateNameListReq& createNameListReq) {
    // Your implementation goes here
    printf("createNameList\n");
  }

  void createWareLabel(CreateWareLabelRsp& _return, const CreateWareLabelReq& createWareLabelReq) {
    // Your implementation goes here
    printf("createWareLabel\n");
  }

  void updateWareLabel(UpdateWareLabelRsp& _return, const UpdateWareLabelReq& updateWareLabelReq) {
    // Your implementation goes here
    printf("updateWareLabel\n");
  }

  void getWareLabelCount(WareLabelCountRsp& _return, const WareLabelCountReq& wareLabelCountReq) {
    // Your implementation goes here
    printf("getWareLabelCount\n");
  }

  void getWareLabelList(WareLabelListRsp& _return, const WareLabelListReq& wareLabelListReq) {
    // Your implementation goes here
    printf("getWareLabelList\n");
  }

  void addWareLabelWares(AddWareLabelWaresRsp& _return, const AddWareLabelWaresReq& addWareLabelWaresReq) {
    // Your implementation goes here
    printf("addWareLabelWares\n");
  }

  void delWareLabelWares(DelWareLabelWaresRsp& _return, const DelWareLabelWaresReq& delWareLabelWaresReq) {
    // Your implementation goes here
    printf("delWareLabelWares\n");
  }

  void getWareLabelWaresCount(WareLabelWaresCountRsp& _return, const WareLabelWaresCountReq& wareLabelWaresCountReq) {
    // Your implementation goes here
    printf("getWareLabelWaresCount\n");
  }

  void getWareLabelWaresList(WareLabelWaresListRsp& _return, const WareLabelWaresListReq& wareLabelWaresListReq) {
    // Your implementation goes here
    printf("getWareLabelWaresList\n");
  }

  void addPresent(AddPresentRsp& _return, const AddPresentReq& addPresentReq) {
    // Your implementation goes here
    printf("addPresent\n");
  }

  void delPresent(DelPresentRsp& _return, const DelPresentReq& delPresentReq) {
    // Your implementation goes here
    printf("delPresent\n");
  }

  void getPresentList(PresentListRsp& _return, const PresentListReq& presentListReq) {
    // Your implementation goes here
    printf("getPresentList\n");
  }

  void addStep(AddStepRsp& _return, const AddStepReq& addStepReq) {
    // Your implementation goes here
    printf("addStep\n");
  }

  void delStep(DelStepRsp& _return, const DelStepReq& delStepReq) {
    // Your implementation goes here
    printf("delStep\n");
  }

  void getStepList(StepListRsp& _return, const StepListReq& stepListReq) {
    // Your implementation goes here
    printf("getStepList\n");
  }

  void createOnsaleGroup(CreateOnsaleGroupRsp& _return, const CreateOnsaleGroupReq& createOnsaleGroupReq) {
    // Your implementation goes here
    printf("createOnsaleGroup\n");
  }

  void updateOnsaleGroup(UpdateOnsaleGroupRsp& _return, const UpdateOnsaleGroupReq& updateOnsaleGroupReq) {
    // Your implementation goes here
    printf("updateOnsaleGroup\n");
  }

  void getOnsaleGroupCount(OnsaleGroupCountRsp& _return, const OnsaleGroupCountReq& onsaleGroupCountReq) {
    // Your implementation goes here
    printf("getOnsaleGroupCount\n");
  }

  void getOnsaleGroupList(OnsaleGroupListRsp& _return, const OnsaleGroupListReq& onsaleGroupListReq) {
    // Your implementation goes here
    printf("getOnsaleGroupList\n");
  }

  void offline(OfflineRsp& _return, const OfflineReq& offlineReq) {
    // Your implementation goes here
    printf("offline\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<OnsaleAdminServiceHandler> handler(new OnsaleAdminServiceHandler());
  shared_ptr<TProcessor> processor(new OnsaleAdminServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

