// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "onsale-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/no-id-object-statements.hxx>
#include <odb/mysql/view-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/prepared-query.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/no-id-object-result.hxx>
#include <odb/mysql/view-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // onsale_warelabel
  //

  struct access::object_traits_impl< ::onsale_warelabel, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::onsale_warelabel, id_mysql >::id_type
  access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::onsale_warelabel, id_mysql >::id_type
  access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // name
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // label_type
    //
    t[2UL] = 0;

    // scope_type
    //
    t[3UL] = 0;

    // sub_type
    //
    t[4UL] = 0;

    // seller_id
    //
    t[5UL] = 0;

    // seller_slug
    //
    if (t[6UL])
    {
      i.seller_slug_value.capacity (i.seller_slug_size);
      grew = true;
    }

    // create_time
    //
    t[7UL] = 0;

    // update_time
    //
    t[8UL] = 0;

    // create_man
    //
    if (t[9UL])
    {
      i.create_man_value.capacity (i.create_man_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // name
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.name_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.name_value.capacity ());
    b[n].length = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // label_type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.label_type_value;
    b[n].is_null = &i.label_type_null;
    n++;

    // scope_type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.scope_type_value;
    b[n].is_null = &i.scope_type_null;
    n++;

    // sub_type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.sub_type_value;
    b[n].is_null = &i.sub_type_null;
    n++;

    // seller_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.seller_id_value;
    b[n].is_null = &i.seller_id_null;
    n++;

    // seller_slug
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.seller_slug_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.seller_slug_value.capacity ());
    b[n].length = &i.seller_slug_size;
    b[n].is_null = &i.seller_slug_null;
    n++;

    // create_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.create_time_value;
    b[n].is_null = &i.create_time_null;
    n++;

    // update_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.update_time_value;
    b[n].is_null = &i.update_time_null;
    n++;

    // create_man
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.create_man_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.create_man_value.capacity ());
    b[n].length = &i.create_man_size;
    b[n].is_null = &i.create_man_null;
    n++;
  }

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // name
    //
    {
      ::std::string const& v =
        o.name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.name_value.capacity ());
    }

    // label_type
    //
    {
      int const& v =
        o.label_type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.label_type_value, is_null, v);
      i.label_type_null = is_null;
    }

    // scope_type
    //
    {
      int const& v =
        o.scope_type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.scope_type_value, is_null, v);
      i.scope_type_null = is_null;
    }

    // sub_type
    //
    {
      int const& v =
        o.sub_type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.sub_type_value, is_null, v);
      i.sub_type_null = is_null;
    }

    // seller_id
    //
    {
      ::int64_t const& v =
        o.seller_id;

      bool is_null (false);
      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_image (
        i.seller_id_value, is_null, v);
      i.seller_id_null = is_null;
    }

    // seller_slug
    //
    {
      ::std::string const& v =
        o.seller_slug;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.seller_slug_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.seller_slug_value,
        size,
        is_null,
        v);
      i.seller_slug_null = is_null;
      i.seller_slug_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.seller_slug_value.capacity ());
    }

    // create_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.create_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.create_time_value, is_null, v);
      i.create_time_null = is_null;
    }

    // update_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.update_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.update_time_value, is_null, v);
      i.update_time_null = is_null;
    }

    // create_man
    //
    {
      ::std::string const& v =
        o.create_man;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.create_man_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.create_man_value,
        size,
        is_null,
        v);
      i.create_man_null = is_null;
      i.create_man_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.create_man_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // name
    //
    {
      ::std::string& v =
        o.name;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // label_type
    //
    {
      int& v =
        o.label_type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.label_type_value,
        i.label_type_null);
    }

    // scope_type
    //
    {
      int& v =
        o.scope_type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.scope_type_value,
        i.scope_type_null);
    }

    // sub_type
    //
    {
      int& v =
        o.sub_type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.sub_type_value,
        i.sub_type_null);
    }

    // seller_id
    //
    {
      ::int64_t& v =
        o.seller_id;

      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_value (
        v,
        i.seller_id_value,
        i.seller_id_null);
    }

    // seller_slug
    //
    {
      ::std::string& v =
        o.seller_slug;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.seller_slug_value,
        i.seller_slug_size,
        i.seller_slug_null);
    }

    // create_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.create_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.create_time_value,
        i.create_time_null);
    }

    // update_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.update_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.update_time_value,
        i.update_time_null);
    }

    // create_man
    //
    {
      ::std::string& v =
        o.create_man;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.create_man_value,
        i.create_man_size,
        i.create_man_null);
    }
  }

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::persist_statement[] =
  "INSERT INTO `onsale_warelabel` "
  "(`id`, "
  "`name`, "
  "`label_type`, "
  "`scope_type`, "
  "`sub_type`, "
  "`seller_id`, "
  "`seller_slug`, "
  "`create_time`, "
  "`update_time`, "
  "`create_man`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::find_statement[] =
  "SELECT "
  "`onsale_warelabel`.`id`, "
  "`onsale_warelabel`.`name`, "
  "`onsale_warelabel`.`label_type`, "
  "`onsale_warelabel`.`scope_type`, "
  "`onsale_warelabel`.`sub_type`, "
  "`onsale_warelabel`.`seller_id`, "
  "`onsale_warelabel`.`seller_slug`, "
  "`onsale_warelabel`.`create_time`, "
  "`onsale_warelabel`.`update_time`, "
  "`onsale_warelabel`.`create_man` "
  "FROM `onsale_warelabel` "
  "WHERE `onsale_warelabel`.`id`=?";

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::update_statement[] =
  "UPDATE `onsale_warelabel` "
  "SET "
  "`name`=?, "
  "`label_type`=?, "
  "`scope_type`=?, "
  "`sub_type`=?, "
  "`seller_id`=?, "
  "`seller_slug`=?, "
  "`create_time`=?, "
  "`update_time`=?, "
  "`create_man`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::erase_statement[] =
  "DELETE FROM `onsale_warelabel` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::query_statement[] =
  "SELECT "
  "`onsale_warelabel`.`id`, "
  "`onsale_warelabel`.`name`, "
  "`onsale_warelabel`.`label_type`, "
  "`onsale_warelabel`.`scope_type`, "
  "`onsale_warelabel`.`sub_type`, "
  "`onsale_warelabel`.`seller_id`, "
  "`onsale_warelabel`.`seller_slug`, "
  "`onsale_warelabel`.`create_time`, "
  "`onsale_warelabel`.`update_time`, "
  "`onsale_warelabel`.`create_man` "
  "FROM `onsale_warelabel`";

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::erase_query_statement[] =
  "DELETE FROM `onsale_warelabel`";

  const char access::object_traits_impl< ::onsale_warelabel, id_mysql >::table_name[] =
  "`onsale_warelabel`";

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::onsale_warelabel, id_mysql >::pointer_type
  access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::onsale_warelabel, id_mysql >::object_type >
  access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::onsale_warelabel, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // onsale_warelabel_stat
  //

  bool access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = 0;

    // max_id
    //
    t[1UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;

    // max_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.max_id_value;
    b[n].is_null = &i.max_id_null;
    n++;
  }

  void access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::size_t& v =
        o.count;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.count_value,
        i.count_null);
    }

    // max_id
    //
    {
      unsigned int& v =
        o.max_id;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.max_id_value,
        i.max_id_null);
    }
  }

  access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::query_base_type
  access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(*), "
      "max(id) ");

    r += "FROM `onsale_warelabel`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::view_type >
  access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = query_statement (q);
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        r->query.clause (),
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::onsale_warelabel_stat, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::view_result_impl<view_type> (
        pq.query, st, sts, 0));
  }

  // onsale_warelabelwares
  //

  bool access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // ware_label_id
    //
    t[0UL] = 0;

    // ware_id
    //
    t[1UL] = 0;

    // create_time
    //
    t[2UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // ware_label_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.ware_label_id_value;
    b[n].is_null = &i.ware_label_id_null;
    n++;

    // ware_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.ware_id_value;
    b[n].is_null = &i.ware_id_null;
    n++;

    // create_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.create_time_value;
    b[n].is_null = &i.create_time_null;
    n++;
  }

  bool access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // ware_label_id
    //
    {
      unsigned int const& v =
        o.ware_label_id;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.ware_label_id_value, is_null, v);
      i.ware_label_id_null = is_null;
    }

    // ware_id
    //
    {
      ::int64_t const& v =
        o.ware_id;

      bool is_null (false);
      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_image (
        i.ware_id_value, is_null, v);
      i.ware_id_null = is_null;
    }

    // create_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.create_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.create_time_value, is_null, v);
      i.create_time_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // ware_label_id
    //
    {
      unsigned int& v =
        o.ware_label_id;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.ware_label_id_value,
        i.ware_label_id_null);
    }

    // ware_id
    //
    {
      ::int64_t& v =
        o.ware_id;

      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_value (
        v,
        i.ware_id_value,
        i.ware_id_null);
    }

    // create_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.create_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.create_time_value,
        i.create_time_null);
    }
  }

  const char access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::persist_statement[] =
  "INSERT INTO `onsale_warelabelwares` "
  "(`ware_label_id`, "
  "`ware_id`, "
  "`create_time`) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::query_statement[] =
  "SELECT "
  "`onsale_warelabelwares`.`ware_label_id`, "
  "`onsale_warelabelwares`.`ware_id`, "
  "`onsale_warelabelwares`.`create_time` "
  "FROM `onsale_warelabelwares`";

  const char access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::erase_query_statement[] =
  "DELETE FROM `onsale_warelabelwares`";

  const char access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::table_name[] =
  "`onsale_warelabelwares`";

  void access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::object_type >
  access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) mysql::no_id_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::onsale_warelabelwares, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::no_id_object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // onsale_warelabelwares_stat
  //

  bool access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::size_t& v =
        o.count;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::query_base_type
  access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(*) ");

    r += "FROM `onsale_warelabelwares`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::view_type >
  access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = query_statement (q);
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        r->query.clause (),
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::onsale_warelabelwares_stat, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::view_result_impl<view_type> (
        pq.query, st, sts, 0));
  }

  // onsale_present
  //

  bool access::object_traits_impl< ::onsale_present, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // step_id
    //
    t[0UL] = 0;

    // sku_id
    //
    t[1UL] = 0;

    // sku_price
    //
    t[2UL] = 0;

    // sku_count
    //
    t[3UL] = 0;

    // sku_slug
    //
    if (t[4UL])
    {
      i.sku_slug_value.capacity (i.sku_slug_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_present, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // step_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.step_id_value;
    b[n].is_null = &i.step_id_null;
    n++;

    // sku_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.sku_id_value;
    b[n].is_null = &i.sku_id_null;
    n++;

    // sku_price
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.sku_price_value;
    b[n].is_null = &i.sku_price_null;
    n++;

    // sku_count
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.sku_count_value;
    b[n].is_null = &i.sku_count_null;
    n++;

    // sku_slug
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.sku_slug_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.sku_slug_value.capacity ());
    b[n].length = &i.sku_slug_size;
    b[n].is_null = &i.sku_slug_null;
    n++;
  }

  bool access::object_traits_impl< ::onsale_present, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // step_id
    //
    {
      unsigned int const& v =
        o.step_id;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.step_id_value, is_null, v);
      i.step_id_null = is_null;
    }

    // sku_id
    //
    {
      ::int64_t const& v =
        o.sku_id;

      bool is_null (false);
      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_image (
        i.sku_id_value, is_null, v);
      i.sku_id_null = is_null;
    }

    // sku_price
    //
    {
      double const& v =
        o.sku_price;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.sku_price_value, is_null, v);
      i.sku_price_null = is_null;
    }

    // sku_count
    //
    {
      unsigned int const& v =
        o.sku_count;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.sku_count_value, is_null, v);
      i.sku_count_null = is_null;
    }

    // sku_slug
    //
    {
      ::std::string const& v =
        o.sku_slug;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.sku_slug_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.sku_slug_value,
        size,
        is_null,
        v);
      i.sku_slug_null = is_null;
      i.sku_slug_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.sku_slug_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_present, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // step_id
    //
    {
      unsigned int& v =
        o.step_id;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.step_id_value,
        i.step_id_null);
    }

    // sku_id
    //
    {
      ::int64_t& v =
        o.sku_id;

      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_value (
        v,
        i.sku_id_value,
        i.sku_id_null);
    }

    // sku_price
    //
    {
      double& v =
        o.sku_price;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.sku_price_value,
        i.sku_price_null);
    }

    // sku_count
    //
    {
      unsigned int& v =
        o.sku_count;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.sku_count_value,
        i.sku_count_null);
    }

    // sku_slug
    //
    {
      ::std::string& v =
        o.sku_slug;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.sku_slug_value,
        i.sku_slug_size,
        i.sku_slug_null);
    }
  }

  const char access::object_traits_impl< ::onsale_present, id_mysql >::persist_statement[] =
  "INSERT INTO `onsale_present` "
  "(`step_id`, "
  "`sku_id`, "
  "`sku_price`, "
  "`sku_count`, "
  "`sku_slug`) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::onsale_present, id_mysql >::query_statement[] =
  "SELECT "
  "`onsale_present`.`step_id`, "
  "`onsale_present`.`sku_id`, "
  "`onsale_present`.`sku_price`, "
  "`onsale_present`.`sku_count`, "
  "`onsale_present`.`sku_slug` "
  "FROM `onsale_present`";

  const char access::object_traits_impl< ::onsale_present, id_mysql >::erase_query_statement[] =
  "DELETE FROM `onsale_present`";

  const char access::object_traits_impl< ::onsale_present, id_mysql >::table_name[] =
  "`onsale_present`";

  void access::object_traits_impl< ::onsale_present, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits_impl< ::onsale_present, id_mysql >::object_type >
  access::object_traits_impl< ::onsale_present, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) mysql::no_id_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::onsale_present, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::onsale_present, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::onsale_present, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::no_id_object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // onsale_present_stat
  //

  bool access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::size_t& v =
        o.count;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::onsale_present_stat, id_mysql >::query_base_type
  access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(*) ");

    r += "FROM `onsale_present`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::onsale_present_stat, id_mysql >::view_type >
  access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = query_statement (q);
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        r->query.clause (),
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::onsale_present_stat, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::view_result_impl<view_type> (
        pq.query, st, sts, 0));
  }

  // onsale_step
  //

  struct access::object_traits_impl< ::onsale_step, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::onsale_step, id_mysql >::id_type
  access::object_traits_impl< ::onsale_step, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::onsale_step, id_mysql >::id_type
  access::object_traits_impl< ::onsale_step, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::onsale_step, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // onsale_group_id
    //
    t[1UL] = 0;

    // full_credit
    //
    t[2UL] = 0;

    // favor_credit
    //
    t[3UL] = 0;

    // favor_rate
    //
    t[4UL] = 0;

    // full_count
    //
    t[5UL] = 0;

    // full_rate
    //
    t[6UL] = 0;

    // full_price
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // onsale_group_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.onsale_group_id_value;
    b[n].is_null = &i.onsale_group_id_null;
    n++;

    // full_credit
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.full_credit_value;
    b[n].is_null = &i.full_credit_null;
    n++;

    // favor_credit
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.favor_credit_value;
    b[n].is_null = &i.favor_credit_null;
    n++;

    // favor_rate
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.favor_rate_value;
    b[n].is_null = &i.favor_rate_null;
    n++;

    // full_count
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.full_count_value;
    b[n].is_null = &i.full_count_null;
    n++;

    // full_rate
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.full_rate_value;
    b[n].is_null = &i.full_rate_null;
    n++;

    // full_price
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.full_price_value;
    b[n].is_null = &i.full_price_null;
    n++;
  }

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::onsale_step, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // onsale_group_id
    //
    {
      unsigned int const& v =
        o.onsale_group_id;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.onsale_group_id_value, is_null, v);
      i.onsale_group_id_null = is_null;
    }

    // full_credit
    //
    {
      double const& v =
        o.full_credit;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.full_credit_value, is_null, v);
      i.full_credit_null = is_null;
    }

    // favor_credit
    //
    {
      double const& v =
        o.favor_credit;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.favor_credit_value, is_null, v);
      i.favor_credit_null = is_null;
    }

    // favor_rate
    //
    {
      double const& v =
        o.favor_rate;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.favor_rate_value, is_null, v);
      i.favor_rate_null = is_null;
    }

    // full_count
    //
    {
      unsigned int const& v =
        o.full_count;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.full_count_value, is_null, v);
      i.full_count_null = is_null;
    }

    // full_rate
    //
    {
      double const& v =
        o.full_rate;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.full_rate_value, is_null, v);
      i.full_rate_null = is_null;
    }

    // full_price
    //
    {
      double const& v =
        o.full_price;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.full_price_value, is_null, v);
      i.full_price_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // onsale_group_id
    //
    {
      unsigned int& v =
        o.onsale_group_id;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.onsale_group_id_value,
        i.onsale_group_id_null);
    }

    // full_credit
    //
    {
      double& v =
        o.full_credit;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.full_credit_value,
        i.full_credit_null);
    }

    // favor_credit
    //
    {
      double& v =
        o.favor_credit;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.favor_credit_value,
        i.favor_credit_null);
    }

    // favor_rate
    //
    {
      double& v =
        o.favor_rate;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.favor_rate_value,
        i.favor_rate_null);
    }

    // full_count
    //
    {
      unsigned int& v =
        o.full_count;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.full_count_value,
        i.full_count_null);
    }

    // full_rate
    //
    {
      double& v =
        o.full_rate;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.full_rate_value,
        i.full_rate_null);
    }

    // full_price
    //
    {
      double& v =
        o.full_price;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.full_price_value,
        i.full_price_null);
    }
  }

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::onsale_step, id_mysql >::persist_statement[] =
  "INSERT INTO `onsale_step` "
  "(`id`, "
  "`onsale_group_id`, "
  "`full_credit`, "
  "`favor_credit`, "
  "`favor_rate`, "
  "`full_count`, "
  "`full_rate`, "
  "`full_price`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::onsale_step, id_mysql >::find_statement[] =
  "SELECT "
  "`onsale_step`.`id`, "
  "`onsale_step`.`onsale_group_id`, "
  "`onsale_step`.`full_credit`, "
  "`onsale_step`.`favor_credit`, "
  "`onsale_step`.`favor_rate`, "
  "`onsale_step`.`full_count`, "
  "`onsale_step`.`full_rate`, "
  "`onsale_step`.`full_price` "
  "FROM `onsale_step` "
  "WHERE `onsale_step`.`id`=?";

  const char access::object_traits_impl< ::onsale_step, id_mysql >::update_statement[] =
  "UPDATE `onsale_step` "
  "SET "
  "`onsale_group_id`=?, "
  "`full_credit`=?, "
  "`favor_credit`=?, "
  "`favor_rate`=?, "
  "`full_count`=?, "
  "`full_rate`=?, "
  "`full_price`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::onsale_step, id_mysql >::erase_statement[] =
  "DELETE FROM `onsale_step` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::onsale_step, id_mysql >::query_statement[] =
  "SELECT "
  "`onsale_step`.`id`, "
  "`onsale_step`.`onsale_group_id`, "
  "`onsale_step`.`full_credit`, "
  "`onsale_step`.`favor_credit`, "
  "`onsale_step`.`favor_rate`, "
  "`onsale_step`.`full_count`, "
  "`onsale_step`.`full_rate`, "
  "`onsale_step`.`full_price` "
  "FROM `onsale_step`";

  const char access::object_traits_impl< ::onsale_step, id_mysql >::erase_query_statement[] =
  "DELETE FROM `onsale_step`";

  const char access::object_traits_impl< ::onsale_step, id_mysql >::table_name[] =
  "`onsale_step`";

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::onsale_step, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::onsale_step, id_mysql >::pointer_type
  access::object_traits_impl< ::onsale_step, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::onsale_step, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::onsale_step, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::onsale_step, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::onsale_step, id_mysql >::object_type >
  access::object_traits_impl< ::onsale_step, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::onsale_step, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::onsale_step, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::onsale_step, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // onsale_step_stat
  //

  bool access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::size_t& v =
        o.count;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::onsale_step_stat, id_mysql >::query_base_type
  access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(*) ");

    r += "FROM `onsale_step`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::onsale_step_stat, id_mysql >::view_type >
  access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = query_statement (q);
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        r->query.clause (),
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::onsale_step_stat, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::view_result_impl<view_type> (
        pq.query, st, sts, 0));
  }

  // onsale_onsalegroup
  //

  struct access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::id_type
  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::id_type
  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // slug
    //
    if (t[1UL])
    {
      i.slug_value.capacity (i.slug_size);
      grew = true;
    }

    // name
    //
    if (t[2UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // title
    //
    if (t[3UL])
    {
      i.title_value.capacity (i.title_size);
      grew = true;
    }

    // comment
    //
    if (t[4UL])
    {
      i.comment_value.capacity (i.comment_size);
      grew = true;
    }

    // favor_type
    //
    t[5UL] = 0;

    // label_type
    //
    t[6UL] = 0;

    // ware_label_id
    //
    t[7UL] = 0;

    // involve_count
    //
    t[8UL] = 0;

    // start_time
    //
    t[9UL] = 0;

    // end_time
    //
    t[10UL] = 0;

    // create_time
    //
    t[11UL] = 0;

    // update_time
    //
    t[12UL] = 0;

    // verify_status
    //
    t[13UL] = 0;

    // applicant
    //
    if (t[14UL])
    {
      i.applicant_value.capacity (i.applicant_size);
      grew = true;
    }

    // approver
    //
    if (t[15UL])
    {
      i.approver_value.capacity (i.approver_size);
      grew = true;
    }

    // modifier
    //
    if (t[16UL])
    {
      i.modifier_value.capacity (i.modifier_size);
      grew = true;
    }

    // jump_label
    //
    if (t[17UL])
    {
      i.jump_label_value.capacity (i.jump_label_size);
      grew = true;
    }

    // jump_data
    //
    if (t[18UL])
    {
      i.jump_data_value.capacity (i.jump_data_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // slug
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.slug_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.slug_value.capacity ());
    b[n].length = &i.slug_size;
    b[n].is_null = &i.slug_null;
    n++;

    // name
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.name_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.name_value.capacity ());
    b[n].length = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // title
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.title_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.title_value.capacity ());
    b[n].length = &i.title_size;
    b[n].is_null = &i.title_null;
    n++;

    // comment
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.comment_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.comment_value.capacity ());
    b[n].length = &i.comment_size;
    b[n].is_null = &i.comment_null;
    n++;

    // favor_type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.favor_type_value;
    b[n].is_null = &i.favor_type_null;
    n++;

    // label_type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.label_type_value;
    b[n].is_null = &i.label_type_null;
    n++;

    // ware_label_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.ware_label_id_value;
    b[n].is_null = &i.ware_label_id_null;
    n++;

    // involve_count
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.involve_count_value;
    b[n].is_null = &i.involve_count_null;
    n++;

    // start_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.start_time_value;
    b[n].is_null = &i.start_time_null;
    n++;

    // end_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.end_time_value;
    b[n].is_null = &i.end_time_null;
    n++;

    // create_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.create_time_value;
    b[n].is_null = &i.create_time_null;
    n++;

    // update_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.update_time_value;
    b[n].is_null = &i.update_time_null;
    n++;

    // verify_status
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.verify_status_value;
    b[n].is_null = &i.verify_status_null;
    n++;

    // applicant
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.applicant_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.applicant_value.capacity ());
    b[n].length = &i.applicant_size;
    b[n].is_null = &i.applicant_null;
    n++;

    // approver
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.approver_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.approver_value.capacity ());
    b[n].length = &i.approver_size;
    b[n].is_null = &i.approver_null;
    n++;

    // modifier
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.modifier_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.modifier_value.capacity ());
    b[n].length = &i.modifier_size;
    b[n].is_null = &i.modifier_null;
    n++;

    // jump_label
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.jump_label_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.jump_label_value.capacity ());
    b[n].length = &i.jump_label_size;
    b[n].is_null = &i.jump_label_null;
    n++;

    // jump_data
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.jump_data_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.jump_data_value.capacity ());
    b[n].length = &i.jump_data_size;
    b[n].is_null = &i.jump_data_null;
    n++;
  }

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // slug
    //
    {
      ::std::string const& v =
        o.slug;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.slug_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.slug_value,
        size,
        is_null,
        v);
      i.slug_null = is_null;
      i.slug_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.slug_value.capacity ());
    }

    // name
    //
    {
      ::std::string const& v =
        o.name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.name_value.capacity ());
    }

    // title
    //
    {
      ::std::string const& v =
        o.title;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.title_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.title_value,
        size,
        is_null,
        v);
      i.title_null = is_null;
      i.title_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.title_value.capacity ());
    }

    // comment
    //
    {
      ::std::string const& v =
        o.comment;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.comment_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.comment_value,
        size,
        is_null,
        v);
      i.comment_null = is_null;
      i.comment_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.comment_value.capacity ());
    }

    // favor_type
    //
    {
      int const& v =
        o.favor_type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.favor_type_value, is_null, v);
      i.favor_type_null = is_null;
    }

    // label_type
    //
    {
      int const& v =
        o.label_type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.label_type_value, is_null, v);
      i.label_type_null = is_null;
    }

    // ware_label_id
    //
    {
      int const& v =
        o.ware_label_id;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.ware_label_id_value, is_null, v);
      i.ware_label_id_null = is_null;
    }

    // involve_count
    //
    {
      int const& v =
        o.involve_count;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.involve_count_value, is_null, v);
      i.involve_count_null = is_null;
    }

    // start_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.start_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.start_time_value, is_null, v);
      i.start_time_null = is_null;
    }

    // end_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.end_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.end_time_value, is_null, v);
      i.end_time_null = is_null;
    }

    // create_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.create_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.create_time_value, is_null, v);
      i.create_time_null = is_null;
    }

    // update_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.update_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.update_time_value, is_null, v);
      i.update_time_null = is_null;
    }

    // verify_status
    //
    {
      int const& v =
        o.verify_status;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.verify_status_value, is_null, v);
      i.verify_status_null = is_null;
    }

    // applicant
    //
    {
      ::std::string const& v =
        o.applicant;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.applicant_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.applicant_value,
        size,
        is_null,
        v);
      i.applicant_null = is_null;
      i.applicant_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.applicant_value.capacity ());
    }

    // approver
    //
    {
      ::std::string const& v =
        o.approver;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.approver_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.approver_value,
        size,
        is_null,
        v);
      i.approver_null = is_null;
      i.approver_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.approver_value.capacity ());
    }

    // modifier
    //
    {
      ::std::string const& v =
        o.modifier;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.modifier_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.modifier_value,
        size,
        is_null,
        v);
      i.modifier_null = is_null;
      i.modifier_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.modifier_value.capacity ());
    }

    // jump_label
    //
    {
      ::std::string const& v =
        o.jump_label;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.jump_label_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.jump_label_value,
        size,
        is_null,
        v);
      i.jump_label_null = is_null;
      i.jump_label_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.jump_label_value.capacity ());
    }

    // jump_data
    //
    {
      ::std::string const& v =
        o.jump_data;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.jump_data_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.jump_data_value,
        size,
        is_null,
        v);
      i.jump_data_null = is_null;
      i.jump_data_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.jump_data_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // slug
    //
    {
      ::std::string& v =
        o.slug;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.slug_value,
        i.slug_size,
        i.slug_null);
    }

    // name
    //
    {
      ::std::string& v =
        o.name;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // title
    //
    {
      ::std::string& v =
        o.title;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.title_value,
        i.title_size,
        i.title_null);
    }

    // comment
    //
    {
      ::std::string& v =
        o.comment;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.comment_value,
        i.comment_size,
        i.comment_null);
    }

    // favor_type
    //
    {
      int& v =
        o.favor_type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.favor_type_value,
        i.favor_type_null);
    }

    // label_type
    //
    {
      int& v =
        o.label_type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.label_type_value,
        i.label_type_null);
    }

    // ware_label_id
    //
    {
      int& v =
        o.ware_label_id;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.ware_label_id_value,
        i.ware_label_id_null);
    }

    // involve_count
    //
    {
      int& v =
        o.involve_count;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.involve_count_value,
        i.involve_count_null);
    }

    // start_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.start_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.start_time_value,
        i.start_time_null);
    }

    // end_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.end_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.end_time_value,
        i.end_time_null);
    }

    // create_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.create_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.create_time_value,
        i.create_time_null);
    }

    // update_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.update_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.update_time_value,
        i.update_time_null);
    }

    // verify_status
    //
    {
      int& v =
        o.verify_status;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.verify_status_value,
        i.verify_status_null);
    }

    // applicant
    //
    {
      ::std::string& v =
        o.applicant;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.applicant_value,
        i.applicant_size,
        i.applicant_null);
    }

    // approver
    //
    {
      ::std::string& v =
        o.approver;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.approver_value,
        i.approver_size,
        i.approver_null);
    }

    // modifier
    //
    {
      ::std::string& v =
        o.modifier;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.modifier_value,
        i.modifier_size,
        i.modifier_null);
    }

    // jump_label
    //
    {
      ::std::string& v =
        o.jump_label;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.jump_label_value,
        i.jump_label_size,
        i.jump_label_null);
    }

    // jump_data
    //
    {
      ::std::string& v =
        o.jump_data;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.jump_data_value,
        i.jump_data_size,
        i.jump_data_null);
    }
  }

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::persist_statement[] =
  "INSERT INTO `onsale_onsalegroup` "
  "(`id`, "
  "`slug`, "
  "`name`, "
  "`title`, "
  "`comment`, "
  "`favor_type`, "
  "`label_type`, "
  "`ware_label_id`, "
  "`involve_count`, "
  "`start_time`, "
  "`end_time`, "
  "`create_time`, "
  "`update_time`, "
  "`verify_status`, "
  "`applicant`, "
  "`approver`, "
  "`modifier`, "
  "`jump_label`, "
  "`jump_data`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::find_statement[] =
  "SELECT "
  "`onsale_onsalegroup`.`id`, "
  "`onsale_onsalegroup`.`slug`, "
  "`onsale_onsalegroup`.`name`, "
  "`onsale_onsalegroup`.`title`, "
  "`onsale_onsalegroup`.`comment`, "
  "`onsale_onsalegroup`.`favor_type`, "
  "`onsale_onsalegroup`.`label_type`, "
  "`onsale_onsalegroup`.`ware_label_id`, "
  "`onsale_onsalegroup`.`involve_count`, "
  "`onsale_onsalegroup`.`start_time`, "
  "`onsale_onsalegroup`.`end_time`, "
  "`onsale_onsalegroup`.`create_time`, "
  "`onsale_onsalegroup`.`update_time`, "
  "`onsale_onsalegroup`.`verify_status`, "
  "`onsale_onsalegroup`.`applicant`, "
  "`onsale_onsalegroup`.`approver`, "
  "`onsale_onsalegroup`.`modifier`, "
  "`onsale_onsalegroup`.`jump_label`, "
  "`onsale_onsalegroup`.`jump_data` "
  "FROM `onsale_onsalegroup` "
  "WHERE `onsale_onsalegroup`.`id`=?";

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::update_statement[] =
  "UPDATE `onsale_onsalegroup` "
  "SET "
  "`slug`=?, "
  "`name`=?, "
  "`title`=?, "
  "`comment`=?, "
  "`favor_type`=?, "
  "`label_type`=?, "
  "`ware_label_id`=?, "
  "`involve_count`=?, "
  "`start_time`=?, "
  "`end_time`=?, "
  "`create_time`=?, "
  "`update_time`=?, "
  "`verify_status`=?, "
  "`applicant`=?, "
  "`approver`=?, "
  "`modifier`=?, "
  "`jump_label`=?, "
  "`jump_data`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::erase_statement[] =
  "DELETE FROM `onsale_onsalegroup` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::query_statement[] =
  "SELECT "
  "`onsale_onsalegroup`.`id`, "
  "`onsale_onsalegroup`.`slug`, "
  "`onsale_onsalegroup`.`name`, "
  "`onsale_onsalegroup`.`title`, "
  "`onsale_onsalegroup`.`comment`, "
  "`onsale_onsalegroup`.`favor_type`, "
  "`onsale_onsalegroup`.`label_type`, "
  "`onsale_onsalegroup`.`ware_label_id`, "
  "`onsale_onsalegroup`.`involve_count`, "
  "`onsale_onsalegroup`.`start_time`, "
  "`onsale_onsalegroup`.`end_time`, "
  "`onsale_onsalegroup`.`create_time`, "
  "`onsale_onsalegroup`.`update_time`, "
  "`onsale_onsalegroup`.`verify_status`, "
  "`onsale_onsalegroup`.`applicant`, "
  "`onsale_onsalegroup`.`approver`, "
  "`onsale_onsalegroup`.`modifier`, "
  "`onsale_onsalegroup`.`jump_label`, "
  "`onsale_onsalegroup`.`jump_data` "
  "FROM `onsale_onsalegroup`";

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::erase_query_statement[] =
  "DELETE FROM `onsale_onsalegroup`";

  const char access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::table_name[] =
  "`onsale_onsalegroup`";

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::pointer_type
  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::object_type >
  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::onsale_onsalegroup, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // onsale_onsalegroup_stat
  //

  bool access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = 0;

    // max_id
    //
    t[1UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;

    // max_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.max_id_value;
    b[n].is_null = &i.max_id_null;
    n++;
  }

  void access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::size_t& v =
        o.count;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.count_value,
        i.count_null);
    }

    // max_id
    //
    {
      unsigned int& v =
        o.max_id;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.max_id_value,
        i.max_id_null);
    }
  }

  access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::query_base_type
  access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(*), "
      "max(id) ");

    r += "FROM `onsale_onsalegroup`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::view_type >
  access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = query_statement (q);
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        r->query.clause (),
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::onsale_onsalegroup_stat, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::view_result_impl<view_type> (
        pq.query, st, sts, 0));
  }
}

#include <odb/post.hxx>
