#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Error:
  OK = 0
  FAILED = -10001
  NO_DATA_YOU_EXPECTED = -10002
  MYSQL_DISCONNECTED = -10003
  MYSQL_EXECUTE_ERROR = -10004
  REDIS_DISCONNECTED = -10005
  REDIS_EXECUTE_ERROR = -10006
  COUPON_GROUP_NOT_EXISTS = -10007
  USER_NOT_EXISTS = -10008
  SCENE_TYPE_NOT_EXISTS = -10009
  NO_COUPON_LEFT = -10010
  NOT_IN_DRAW_TIME = -10011
  DRAWN_ALL_YOU_CAN = -10012
  CODE_ENCODE_ERROR = -10013
  CODE_DECODE_ERROR = -10014
  INVALID_PARAMS = -10015
  USER_HAVENOT_THE_CODE = -10016
  NOT_BEEN_FROZEN = -10017
  COUPON_ID_NOT_EXISTS = -10018
  ORDER_ID_NOT_MATCH = -10019
  COUPON_IN_USE = -10020
  COUPON_EXPIRED = -10021
  COUPON_NOT_USABLE = -10022
  COUPON_NOT_PLATFORM = -10023
  COUPON_NOT_SHOPTYPE = -10024
  COUPON_NOT_OF_THIS_SHOP = -10025
  CAN_NOT_GET_THE_LOCK = -10026
  INVALID_ARGOT = -10027
  OUTLOAD_COUNT = -10028
  ILLEGAL_SCENE_TYPE = -10029
  COUPON_NOT_EXISTS = -10030
  INVALID_CODE = -10031
  COUPON_HAS_BEEN_DRAWN = -10032
  COUPON_HAS_BEEN_ROBBED = -10033
  ARGOT_IN_180_DAYS = -10034
  DRAW_TIME_NOT_REACH = -10035
  DRAW_TIME_EXPIRED = -10036
  NO_USABLE_COUPON = -10037

  _VALUES_TO_NAMES = {
    0: "OK",
    -10001: "FAILED",
    -10002: "NO_DATA_YOU_EXPECTED",
    -10003: "MYSQL_DISCONNECTED",
    -10004: "MYSQL_EXECUTE_ERROR",
    -10005: "REDIS_DISCONNECTED",
    -10006: "REDIS_EXECUTE_ERROR",
    -10007: "COUPON_GROUP_NOT_EXISTS",
    -10008: "USER_NOT_EXISTS",
    -10009: "SCENE_TYPE_NOT_EXISTS",
    -10010: "NO_COUPON_LEFT",
    -10011: "NOT_IN_DRAW_TIME",
    -10012: "DRAWN_ALL_YOU_CAN",
    -10013: "CODE_ENCODE_ERROR",
    -10014: "CODE_DECODE_ERROR",
    -10015: "INVALID_PARAMS",
    -10016: "USER_HAVENOT_THE_CODE",
    -10017: "NOT_BEEN_FROZEN",
    -10018: "COUPON_ID_NOT_EXISTS",
    -10019: "ORDER_ID_NOT_MATCH",
    -10020: "COUPON_IN_USE",
    -10021: "COUPON_EXPIRED",
    -10022: "COUPON_NOT_USABLE",
    -10023: "COUPON_NOT_PLATFORM",
    -10024: "COUPON_NOT_SHOPTYPE",
    -10025: "COUPON_NOT_OF_THIS_SHOP",
    -10026: "CAN_NOT_GET_THE_LOCK",
    -10027: "INVALID_ARGOT",
    -10028: "OUTLOAD_COUNT",
    -10029: "ILLEGAL_SCENE_TYPE",
    -10030: "COUPON_NOT_EXISTS",
    -10031: "INVALID_CODE",
    -10032: "COUPON_HAS_BEEN_DRAWN",
    -10033: "COUPON_HAS_BEEN_ROBBED",
    -10034: "ARGOT_IN_180_DAYS",
    -10035: "DRAW_TIME_NOT_REACH",
    -10036: "DRAW_TIME_EXPIRED",
    -10037: "NO_USABLE_COUPON",
  }

  _NAMES_TO_VALUES = {
    "OK": 0,
    "FAILED": -10001,
    "NO_DATA_YOU_EXPECTED": -10002,
    "MYSQL_DISCONNECTED": -10003,
    "MYSQL_EXECUTE_ERROR": -10004,
    "REDIS_DISCONNECTED": -10005,
    "REDIS_EXECUTE_ERROR": -10006,
    "COUPON_GROUP_NOT_EXISTS": -10007,
    "USER_NOT_EXISTS": -10008,
    "SCENE_TYPE_NOT_EXISTS": -10009,
    "NO_COUPON_LEFT": -10010,
    "NOT_IN_DRAW_TIME": -10011,
    "DRAWN_ALL_YOU_CAN": -10012,
    "CODE_ENCODE_ERROR": -10013,
    "CODE_DECODE_ERROR": -10014,
    "INVALID_PARAMS": -10015,
    "USER_HAVENOT_THE_CODE": -10016,
    "NOT_BEEN_FROZEN": -10017,
    "COUPON_ID_NOT_EXISTS": -10018,
    "ORDER_ID_NOT_MATCH": -10019,
    "COUPON_IN_USE": -10020,
    "COUPON_EXPIRED": -10021,
    "COUPON_NOT_USABLE": -10022,
    "COUPON_NOT_PLATFORM": -10023,
    "COUPON_NOT_SHOPTYPE": -10024,
    "COUPON_NOT_OF_THIS_SHOP": -10025,
    "CAN_NOT_GET_THE_LOCK": -10026,
    "INVALID_ARGOT": -10027,
    "OUTLOAD_COUNT": -10028,
    "ILLEGAL_SCENE_TYPE": -10029,
    "COUPON_NOT_EXISTS": -10030,
    "INVALID_CODE": -10031,
    "COUPON_HAS_BEEN_DRAWN": -10032,
    "COUPON_HAS_BEEN_ROBBED": -10033,
    "ARGOT_IN_180_DAYS": -10034,
    "DRAW_TIME_NOT_REACH": -10035,
    "DRAW_TIME_EXPIRED": -10036,
    "NO_USABLE_COUPON": -10037,
  }


class DefaultConfig:
  """
  Attributes:
   - default_jump_label
   - default_jump_data
   - default_url
   - default_switch
   - default_text
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'default_jump_label', None, None, ), # 1
    (2, TType.STRING, 'default_jump_data', None, None, ), # 2
    (3, TType.STRING, 'default_url', None, None, ), # 3
    (4, TType.BOOL, 'default_switch', None, None, ), # 4
    (5, TType.STRING, 'default_text', None, None, ), # 5
  )

  def __init__(self, default_jump_label=None, default_jump_data=None, default_url=None, default_switch=None, default_text=None,):
    self.default_jump_label = default_jump_label
    self.default_jump_data = default_jump_data
    self.default_url = default_url
    self.default_switch = default_switch
    self.default_text = default_text

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.default_jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.default_jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.default_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.default_switch = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.default_text = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DefaultConfig')
    if self.default_jump_label is not None:
      oprot.writeFieldBegin('default_jump_label', TType.STRING, 1)
      oprot.writeString(self.default_jump_label)
      oprot.writeFieldEnd()
    if self.default_jump_data is not None:
      oprot.writeFieldBegin('default_jump_data', TType.STRING, 2)
      oprot.writeString(self.default_jump_data)
      oprot.writeFieldEnd()
    if self.default_url is not None:
      oprot.writeFieldBegin('default_url', TType.STRING, 3)
      oprot.writeString(self.default_url)
      oprot.writeFieldEnd()
    if self.default_switch is not None:
      oprot.writeFieldBegin('default_switch', TType.BOOL, 4)
      oprot.writeBool(self.default_switch)
      oprot.writeFieldEnd()
    if self.default_text is not None:
      oprot.writeFieldBegin('default_text', TType.STRING, 5)
      oprot.writeString(self.default_text)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.default_jump_label)
    value = (value * 31) ^ hash(self.default_jump_data)
    value = (value * 31) ^ hash(self.default_url)
    value = (value * 31) ^ hash(self.default_switch)
    value = (value * 31) ^ hash(self.default_text)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabel:
  """
  Attributes:
   - name
   - scope_type
   - sub_type
   - create_time
   - update_time
   - ware_label_id
   - create_man
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'scope_type', None, None, ), # 2
    (3, TType.I32, 'sub_type', None, None, ), # 3
    (4, TType.I32, 'create_time', None, None, ), # 4
    (5, TType.I32, 'update_time', None, None, ), # 5
    (6, TType.I32, 'ware_label_id', None, None, ), # 6
    (7, TType.STRING, 'create_man', None, None, ), # 7
  )

  def __init__(self, name=None, scope_type=None, sub_type=None, create_time=None, update_time=None, ware_label_id=None, create_man=None,):
    self.name = name
    self.scope_type = scope_type
    self.sub_type = sub_type
    self.create_time = create_time
    self.update_time = update_time
    self.ware_label_id = ware_label_id
    self.create_man = create_man

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.scope_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sub_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.create_man = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabel')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.scope_type is not None:
      oprot.writeFieldBegin('scope_type', TType.I32, 2)
      oprot.writeI32(self.scope_type)
      oprot.writeFieldEnd()
    if self.sub_type is not None:
      oprot.writeFieldBegin('sub_type', TType.I32, 3)
      oprot.writeI32(self.sub_type)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 4)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 5)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 6)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.create_man is not None:
      oprot.writeFieldBegin('create_man', TType.STRING, 7)
      oprot.writeString(self.create_man)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.scope_type)
    value = (value * 31) ^ hash(self.sub_type)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.create_man)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabelWares:
  """
  Attributes:
   - ware_label_id
   - ware_id
   - ware_slug
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ware_label_id', None, None, ), # 1
    (2, TType.I64, 'ware_id', None, None, ), # 2
    (3, TType.STRING, 'ware_slug', None, None, ), # 3
  )

  def __init__(self, ware_label_id=None, ware_id=None, ware_slug=None,):
    self.ware_label_id = ware_label_id
    self.ware_id = ware_id
    self.ware_slug = ware_slug

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ware_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ware_slug = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabelWares')
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 1)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.ware_id is not None:
      oprot.writeFieldBegin('ware_id', TType.I64, 2)
      oprot.writeI64(self.ware_id)
      oprot.writeFieldEnd()
    if self.ware_slug is not None:
      oprot.writeFieldBegin('ware_slug', TType.STRING, 3)
      oprot.writeString(self.ware_slug)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.ware_id)
    value = (value * 31) ^ hash(self.ware_slug)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabelWaresCache:
  """
  Attributes:
   - cache
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cache', (TType.STRUCT,(WareLabelWares, WareLabelWares.thrift_spec)), None, ), # 1
  )

  def __init__(self, cache=None,):
    self.cache = cache

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cache = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = WareLabelWares()
            _elem5.read(iprot)
            self.cache.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabelWaresCache')
    if self.cache is not None:
      oprot.writeFieldBegin('cache', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cache))
      for iter6 in self.cache:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cache)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponGroup:
  """
  Attributes:
   - name
   - title
   - comment
   - ware_label_id
   - favor_type
   - scope_type
   - sub_type
   - scene_type
   - full
   - favor
   - rate
   - argot
   - max_count
   - delta
   - drawn_count
   - payed_count
   - create_time
   - can_draw_count
   - start_draw_time
   - end_draw_time
   - is_duration_type
   - duration_value
   - start_use_time
   - end_use_time
   - verify_status
   - applicant
   - approver
   - modifier
   - seller_id
   - url
   - id
   - img
   - slug
   - delta_verify_status
   - img_width
   - img_height
   - button_text
   - button_jump
   - jump_label
   - jump_data
   - argot_jump_label
   - argot_jump_data
   - update_time
   - version
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'comment', None, None, ), # 3
    (4, TType.I32, 'ware_label_id', None, None, ), # 4
    (5, TType.I32, 'favor_type', None, None, ), # 5
    (6, TType.I32, 'scope_type', None, None, ), # 6
    (7, TType.I32, 'sub_type', None, None, ), # 7
    (8, TType.I32, 'scene_type', None, None, ), # 8
    (9, TType.DOUBLE, 'full', None, None, ), # 9
    (10, TType.DOUBLE, 'favor', None, None, ), # 10
    (11, TType.DOUBLE, 'rate', None, None, ), # 11
    (12, TType.STRING, 'argot', None, None, ), # 12
    (13, TType.I32, 'max_count', None, None, ), # 13
    (14, TType.I32, 'delta', None, None, ), # 14
    (15, TType.I32, 'drawn_count', None, None, ), # 15
    (16, TType.I32, 'payed_count', None, None, ), # 16
    (17, TType.I32, 'create_time', None, None, ), # 17
    (18, TType.I32, 'can_draw_count', None, None, ), # 18
    (19, TType.I32, 'start_draw_time', None, None, ), # 19
    (20, TType.I32, 'end_draw_time', None, None, ), # 20
    (21, TType.BOOL, 'is_duration_type', None, None, ), # 21
    (22, TType.I32, 'duration_value', None, None, ), # 22
    (23, TType.I32, 'start_use_time', None, None, ), # 23
    (24, TType.I32, 'end_use_time', None, None, ), # 24
    (25, TType.I32, 'verify_status', None, None, ), # 25
    (26, TType.STRING, 'applicant', None, None, ), # 26
    (27, TType.STRING, 'approver', None, None, ), # 27
    (28, TType.STRING, 'modifier', None, None, ), # 28
    (29, TType.I64, 'seller_id', None, None, ), # 29
    (30, TType.STRING, 'url', None, None, ), # 30
    (31, TType.I32, 'id', None, None, ), # 31
    (32, TType.STRING, 'img', None, None, ), # 32
    (33, TType.STRING, 'slug', None, None, ), # 33
    (34, TType.I32, 'delta_verify_status', None, None, ), # 34
    (35, TType.I32, 'img_width', None, None, ), # 35
    (36, TType.I32, 'img_height', None, None, ), # 36
    (37, TType.STRING, 'button_text', None, None, ), # 37
    (38, TType.STRING, 'button_jump', None, None, ), # 38
    (39, TType.STRING, 'jump_label', None, None, ), # 39
    (40, TType.STRING, 'jump_data', None, None, ), # 40
    (41, TType.STRING, 'argot_jump_label', None, None, ), # 41
    (42, TType.STRING, 'argot_jump_data', None, None, ), # 42
    (43, TType.I32, 'update_time', None, None, ), # 43
    (44, TType.I32, 'version', None, None, ), # 44
    (45, TType.STRING, 'description', None, None, ), # 45
  )

  def __init__(self, name=None, title=None, comment=None, ware_label_id=None, favor_type=None, scope_type=None, sub_type=None, scene_type=None, full=None, favor=None, rate=None, argot=None, max_count=None, delta=None, drawn_count=None, payed_count=None, create_time=None, can_draw_count=None, start_draw_time=None, end_draw_time=None, is_duration_type=None, duration_value=None, start_use_time=None, end_use_time=None, verify_status=None, applicant=None, approver=None, modifier=None, seller_id=None, url=None, id=None, img=None, slug=None, delta_verify_status=None, img_width=None, img_height=None, button_text=None, button_jump=None, jump_label=None, jump_data=None, argot_jump_label=None, argot_jump_data=None, update_time=None, version=None, description=None,):
    self.name = name
    self.title = title
    self.comment = comment
    self.ware_label_id = ware_label_id
    self.favor_type = favor_type
    self.scope_type = scope_type
    self.sub_type = sub_type
    self.scene_type = scene_type
    self.full = full
    self.favor = favor
    self.rate = rate
    self.argot = argot
    self.max_count = max_count
    self.delta = delta
    self.drawn_count = drawn_count
    self.payed_count = payed_count
    self.create_time = create_time
    self.can_draw_count = can_draw_count
    self.start_draw_time = start_draw_time
    self.end_draw_time = end_draw_time
    self.is_duration_type = is_duration_type
    self.duration_value = duration_value
    self.start_use_time = start_use_time
    self.end_use_time = end_use_time
    self.verify_status = verify_status
    self.applicant = applicant
    self.approver = approver
    self.modifier = modifier
    self.seller_id = seller_id
    self.url = url
    self.id = id
    self.img = img
    self.slug = slug
    self.delta_verify_status = delta_verify_status
    self.img_width = img_width
    self.img_height = img_height
    self.button_text = button_text
    self.button_jump = button_jump
    self.jump_label = jump_label
    self.jump_data = jump_data
    self.argot_jump_label = argot_jump_label
    self.argot_jump_data = argot_jump_data
    self.update_time = update_time
    self.version = version
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.favor_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.scope_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sub_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.scene_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.full = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.favor = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.rate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.argot = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.max_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.delta = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.drawn_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.payed_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.can_draw_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.start_draw_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.end_draw_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.BOOL:
          self.is_duration_type = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.duration_value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.start_use_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.end_use_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.verify_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.applicant = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.approver = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.modifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.img = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.slug = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.delta_verify_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.img_width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.img_height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.button_text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.button_jump = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.argot_jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.argot_jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponGroup')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 3)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 4)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.favor_type is not None:
      oprot.writeFieldBegin('favor_type', TType.I32, 5)
      oprot.writeI32(self.favor_type)
      oprot.writeFieldEnd()
    if self.scope_type is not None:
      oprot.writeFieldBegin('scope_type', TType.I32, 6)
      oprot.writeI32(self.scope_type)
      oprot.writeFieldEnd()
    if self.sub_type is not None:
      oprot.writeFieldBegin('sub_type', TType.I32, 7)
      oprot.writeI32(self.sub_type)
      oprot.writeFieldEnd()
    if self.scene_type is not None:
      oprot.writeFieldBegin('scene_type', TType.I32, 8)
      oprot.writeI32(self.scene_type)
      oprot.writeFieldEnd()
    if self.full is not None:
      oprot.writeFieldBegin('full', TType.DOUBLE, 9)
      oprot.writeDouble(self.full)
      oprot.writeFieldEnd()
    if self.favor is not None:
      oprot.writeFieldBegin('favor', TType.DOUBLE, 10)
      oprot.writeDouble(self.favor)
      oprot.writeFieldEnd()
    if self.rate is not None:
      oprot.writeFieldBegin('rate', TType.DOUBLE, 11)
      oprot.writeDouble(self.rate)
      oprot.writeFieldEnd()
    if self.argot is not None:
      oprot.writeFieldBegin('argot', TType.STRING, 12)
      oprot.writeString(self.argot)
      oprot.writeFieldEnd()
    if self.max_count is not None:
      oprot.writeFieldBegin('max_count', TType.I32, 13)
      oprot.writeI32(self.max_count)
      oprot.writeFieldEnd()
    if self.delta is not None:
      oprot.writeFieldBegin('delta', TType.I32, 14)
      oprot.writeI32(self.delta)
      oprot.writeFieldEnd()
    if self.drawn_count is not None:
      oprot.writeFieldBegin('drawn_count', TType.I32, 15)
      oprot.writeI32(self.drawn_count)
      oprot.writeFieldEnd()
    if self.payed_count is not None:
      oprot.writeFieldBegin('payed_count', TType.I32, 16)
      oprot.writeI32(self.payed_count)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 17)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.can_draw_count is not None:
      oprot.writeFieldBegin('can_draw_count', TType.I32, 18)
      oprot.writeI32(self.can_draw_count)
      oprot.writeFieldEnd()
    if self.start_draw_time is not None:
      oprot.writeFieldBegin('start_draw_time', TType.I32, 19)
      oprot.writeI32(self.start_draw_time)
      oprot.writeFieldEnd()
    if self.end_draw_time is not None:
      oprot.writeFieldBegin('end_draw_time', TType.I32, 20)
      oprot.writeI32(self.end_draw_time)
      oprot.writeFieldEnd()
    if self.is_duration_type is not None:
      oprot.writeFieldBegin('is_duration_type', TType.BOOL, 21)
      oprot.writeBool(self.is_duration_type)
      oprot.writeFieldEnd()
    if self.duration_value is not None:
      oprot.writeFieldBegin('duration_value', TType.I32, 22)
      oprot.writeI32(self.duration_value)
      oprot.writeFieldEnd()
    if self.start_use_time is not None:
      oprot.writeFieldBegin('start_use_time', TType.I32, 23)
      oprot.writeI32(self.start_use_time)
      oprot.writeFieldEnd()
    if self.end_use_time is not None:
      oprot.writeFieldBegin('end_use_time', TType.I32, 24)
      oprot.writeI32(self.end_use_time)
      oprot.writeFieldEnd()
    if self.verify_status is not None:
      oprot.writeFieldBegin('verify_status', TType.I32, 25)
      oprot.writeI32(self.verify_status)
      oprot.writeFieldEnd()
    if self.applicant is not None:
      oprot.writeFieldBegin('applicant', TType.STRING, 26)
      oprot.writeString(self.applicant)
      oprot.writeFieldEnd()
    if self.approver is not None:
      oprot.writeFieldBegin('approver', TType.STRING, 27)
      oprot.writeString(self.approver)
      oprot.writeFieldEnd()
    if self.modifier is not None:
      oprot.writeFieldBegin('modifier', TType.STRING, 28)
      oprot.writeString(self.modifier)
      oprot.writeFieldEnd()
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 29)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 30)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 31)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.img is not None:
      oprot.writeFieldBegin('img', TType.STRING, 32)
      oprot.writeString(self.img)
      oprot.writeFieldEnd()
    if self.slug is not None:
      oprot.writeFieldBegin('slug', TType.STRING, 33)
      oprot.writeString(self.slug)
      oprot.writeFieldEnd()
    if self.delta_verify_status is not None:
      oprot.writeFieldBegin('delta_verify_status', TType.I32, 34)
      oprot.writeI32(self.delta_verify_status)
      oprot.writeFieldEnd()
    if self.img_width is not None:
      oprot.writeFieldBegin('img_width', TType.I32, 35)
      oprot.writeI32(self.img_width)
      oprot.writeFieldEnd()
    if self.img_height is not None:
      oprot.writeFieldBegin('img_height', TType.I32, 36)
      oprot.writeI32(self.img_height)
      oprot.writeFieldEnd()
    if self.button_text is not None:
      oprot.writeFieldBegin('button_text', TType.STRING, 37)
      oprot.writeString(self.button_text)
      oprot.writeFieldEnd()
    if self.button_jump is not None:
      oprot.writeFieldBegin('button_jump', TType.STRING, 38)
      oprot.writeString(self.button_jump)
      oprot.writeFieldEnd()
    if self.jump_label is not None:
      oprot.writeFieldBegin('jump_label', TType.STRING, 39)
      oprot.writeString(self.jump_label)
      oprot.writeFieldEnd()
    if self.jump_data is not None:
      oprot.writeFieldBegin('jump_data', TType.STRING, 40)
      oprot.writeString(self.jump_data)
      oprot.writeFieldEnd()
    if self.argot_jump_label is not None:
      oprot.writeFieldBegin('argot_jump_label', TType.STRING, 41)
      oprot.writeString(self.argot_jump_label)
      oprot.writeFieldEnd()
    if self.argot_jump_data is not None:
      oprot.writeFieldBegin('argot_jump_data', TType.STRING, 42)
      oprot.writeString(self.argot_jump_data)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 43)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 44)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 45)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.favor_type)
    value = (value * 31) ^ hash(self.scope_type)
    value = (value * 31) ^ hash(self.sub_type)
    value = (value * 31) ^ hash(self.scene_type)
    value = (value * 31) ^ hash(self.full)
    value = (value * 31) ^ hash(self.favor)
    value = (value * 31) ^ hash(self.rate)
    value = (value * 31) ^ hash(self.argot)
    value = (value * 31) ^ hash(self.max_count)
    value = (value * 31) ^ hash(self.delta)
    value = (value * 31) ^ hash(self.drawn_count)
    value = (value * 31) ^ hash(self.payed_count)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.can_draw_count)
    value = (value * 31) ^ hash(self.start_draw_time)
    value = (value * 31) ^ hash(self.end_draw_time)
    value = (value * 31) ^ hash(self.is_duration_type)
    value = (value * 31) ^ hash(self.duration_value)
    value = (value * 31) ^ hash(self.start_use_time)
    value = (value * 31) ^ hash(self.end_use_time)
    value = (value * 31) ^ hash(self.verify_status)
    value = (value * 31) ^ hash(self.applicant)
    value = (value * 31) ^ hash(self.approver)
    value = (value * 31) ^ hash(self.modifier)
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.img)
    value = (value * 31) ^ hash(self.slug)
    value = (value * 31) ^ hash(self.delta_verify_status)
    value = (value * 31) ^ hash(self.img_width)
    value = (value * 31) ^ hash(self.img_height)
    value = (value * 31) ^ hash(self.button_text)
    value = (value * 31) ^ hash(self.button_jump)
    value = (value * 31) ^ hash(self.jump_label)
    value = (value * 31) ^ hash(self.jump_data)
    value = (value * 31) ^ hash(self.argot_jump_label)
    value = (value * 31) ^ hash(self.argot_jump_data)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Coupon:
  """
  Attributes:
   - coupon_group_id
   - code
   - user_id
   - order_id
   - create_time
   - order_create_time
   - drawn_time
   - frozen_time
   - payed_time
   - coupon_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.I64, 'user_id', None, None, ), # 3
    (4, TType.STRING, 'order_id', None, None, ), # 4
    (5, TType.I32, 'create_time', None, None, ), # 5
    (6, TType.I32, 'order_create_time', None, None, ), # 6
    (7, TType.I32, 'drawn_time', None, None, ), # 7
    (8, TType.I32, 'frozen_time', None, None, ), # 8
    (9, TType.I32, 'payed_time', None, None, ), # 9
    (10, TType.I32, 'coupon_id', None, None, ), # 10
  )

  def __init__(self, coupon_group_id=None, code=None, user_id=None, order_id=None, create_time=None, order_create_time=None, drawn_time=None, frozen_time=None, payed_time=None, coupon_id=None,):
    self.coupon_group_id = coupon_group_id
    self.code = code
    self.user_id = user_id
    self.order_id = order_id
    self.create_time = create_time
    self.order_create_time = order_create_time
    self.drawn_time = drawn_time
    self.frozen_time = frozen_time
    self.payed_time = payed_time
    self.coupon_id = coupon_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.order_create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.drawn_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.frozen_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.payed_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.coupon_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coupon')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 4)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 5)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.order_create_time is not None:
      oprot.writeFieldBegin('order_create_time', TType.I32, 6)
      oprot.writeI32(self.order_create_time)
      oprot.writeFieldEnd()
    if self.drawn_time is not None:
      oprot.writeFieldBegin('drawn_time', TType.I32, 7)
      oprot.writeI32(self.drawn_time)
      oprot.writeFieldEnd()
    if self.frozen_time is not None:
      oprot.writeFieldBegin('frozen_time', TType.I32, 8)
      oprot.writeI32(self.frozen_time)
      oprot.writeFieldEnd()
    if self.payed_time is not None:
      oprot.writeFieldBegin('payed_time', TType.I32, 9)
      oprot.writeI32(self.payed_time)
      oprot.writeFieldEnd()
    if self.coupon_id is not None:
      oprot.writeFieldBegin('coupon_id', TType.I32, 10)
      oprot.writeI32(self.coupon_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.order_create_time)
    value = (value * 31) ^ hash(self.drawn_time)
    value = (value * 31) ^ hash(self.frozen_time)
    value = (value * 31) ^ hash(self.payed_time)
    value = (value * 31) ^ hash(self.coupon_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCoupon:
  """
  Attributes:
   - user_id
   - coupon_group_id
   - coupon_id
   - code
   - create_time
   - update_time
   - use_status
   - client_id
   - seller_id
   - channel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.I32, 'coupon_group_id', None, None, ), # 2
    (3, TType.I32, 'coupon_id', None, None, ), # 3
    (4, TType.STRING, 'code', None, None, ), # 4
    (5, TType.I32, 'create_time', None, None, ), # 5
    (6, TType.I32, 'update_time', None, None, ), # 6
    (7, TType.I32, 'use_status', None, None, ), # 7
    (8, TType.STRING, 'client_id', None, None, ), # 8
    (9, TType.I64, 'seller_id', None, None, ), # 9
    (10, TType.I32, 'channel_id', None, None, ), # 10
  )

  def __init__(self, user_id=None, coupon_group_id=None, coupon_id=None, code=None, create_time=None, update_time=None, use_status=None, client_id=None, seller_id=None, channel_id=None,):
    self.user_id = user_id
    self.coupon_group_id = coupon_group_id
    self.coupon_id = coupon_id
    self.code = code
    self.create_time = create_time
    self.update_time = update_time
    self.use_status = use_status
    self.client_id = client_id
    self.seller_id = seller_id
    self.channel_id = channel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coupon_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.use_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.channel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCoupon')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 2)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.coupon_id is not None:
      oprot.writeFieldBegin('coupon_id', TType.I32, 3)
      oprot.writeI32(self.coupon_id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 4)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 5)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 6)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.use_status is not None:
      oprot.writeFieldBegin('use_status', TType.I32, 7)
      oprot.writeI32(self.use_status)
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 8)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 9)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.channel_id is not None:
      oprot.writeFieldBegin('channel_id', TType.I32, 10)
      oprot.writeI32(self.channel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.coupon_id)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.use_status)
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.channel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CacheCoupon:
  """
  Attributes:
   - coupon_group_id
   - code
   - user_id
   - order_id
   - create_time
   - order_create_time
   - drawn_time
   - frozen_time
   - payed_time
   - update_time
   - use_status
   - start_use_time
   - end_use_time
   - coupon_id
   - name
   - title
   - comment
   - ware_label_id
   - favor_type
   - scope_type
   - sub_type
   - scene_type
   - full
   - favor
   - rate
   - argot
   - seller_id
   - url
   - img
   - client_id
   - slug
   - img_width
   - img_height
   - button_text
   - button_jump
   - jump_label
   - jump_data
   - argot_jump_label
   - argot_jump_data
   - version
   - description
   - type
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.I64, 'user_id', None, None, ), # 3
    (4, TType.STRING, 'order_id', None, None, ), # 4
    (5, TType.I32, 'create_time', None, None, ), # 5
    (6, TType.I32, 'order_create_time', None, None, ), # 6
    (7, TType.I32, 'drawn_time', None, None, ), # 7
    (8, TType.I32, 'frozen_time', None, None, ), # 8
    (9, TType.I32, 'payed_time', None, None, ), # 9
    (10, TType.I32, 'update_time', None, None, ), # 10
    (11, TType.I32, 'use_status', None, None, ), # 11
    (12, TType.I32, 'start_use_time', None, None, ), # 12
    (13, TType.I32, 'end_use_time', None, None, ), # 13
    (14, TType.I32, 'coupon_id', None, None, ), # 14
    (15, TType.STRING, 'name', None, None, ), # 15
    (16, TType.STRING, 'title', None, None, ), # 16
    (17, TType.STRING, 'comment', None, None, ), # 17
    (18, TType.I32, 'ware_label_id', None, None, ), # 18
    (19, TType.I32, 'favor_type', None, None, ), # 19
    (20, TType.I32, 'scope_type', None, None, ), # 20
    (21, TType.I32, 'sub_type', None, None, ), # 21
    (22, TType.I32, 'scene_type', None, None, ), # 22
    (23, TType.DOUBLE, 'full', None, None, ), # 23
    (24, TType.DOUBLE, 'favor', None, None, ), # 24
    (25, TType.DOUBLE, 'rate', None, None, ), # 25
    (26, TType.STRING, 'argot', None, None, ), # 26
    (27, TType.I64, 'seller_id', None, None, ), # 27
    (28, TType.STRING, 'url', None, None, ), # 28
    (29, TType.STRING, 'img', None, None, ), # 29
    (30, TType.STRING, 'client_id', None, None, ), # 30
    (31, TType.STRING, 'slug', None, None, ), # 31
    (32, TType.I32, 'img_width', None, None, ), # 32
    (33, TType.I32, 'img_height', None, None, ), # 33
    (34, TType.STRING, 'button_text', None, None, ), # 34
    (35, TType.STRING, 'button_jump', None, None, ), # 35
    (36, TType.STRING, 'jump_label', None, None, ), # 36
    (37, TType.STRING, 'jump_data', None, None, ), # 37
    (38, TType.STRING, 'argot_jump_label', None, None, ), # 38
    (39, TType.STRING, 'argot_jump_data', None, None, ), # 39
    (40, TType.I32, 'version', None, None, ), # 40
    (41, TType.STRING, 'description', None, None, ), # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.I32, 'type', None, None, ), # 100
    (101, TType.DOUBLE, 'value', None, None, ), # 101
  )

  def __init__(self, coupon_group_id=None, code=None, user_id=None, order_id=None, create_time=None, order_create_time=None, drawn_time=None, frozen_time=None, payed_time=None, update_time=None, use_status=None, start_use_time=None, end_use_time=None, coupon_id=None, name=None, title=None, comment=None, ware_label_id=None, favor_type=None, scope_type=None, sub_type=None, scene_type=None, full=None, favor=None, rate=None, argot=None, seller_id=None, url=None, img=None, client_id=None, slug=None, img_width=None, img_height=None, button_text=None, button_jump=None, jump_label=None, jump_data=None, argot_jump_label=None, argot_jump_data=None, version=None, description=None, type=None, value=None,):
    self.coupon_group_id = coupon_group_id
    self.code = code
    self.user_id = user_id
    self.order_id = order_id
    self.create_time = create_time
    self.order_create_time = order_create_time
    self.drawn_time = drawn_time
    self.frozen_time = frozen_time
    self.payed_time = payed_time
    self.update_time = update_time
    self.use_status = use_status
    self.start_use_time = start_use_time
    self.end_use_time = end_use_time
    self.coupon_id = coupon_id
    self.name = name
    self.title = title
    self.comment = comment
    self.ware_label_id = ware_label_id
    self.favor_type = favor_type
    self.scope_type = scope_type
    self.sub_type = sub_type
    self.scene_type = scene_type
    self.full = full
    self.favor = favor
    self.rate = rate
    self.argot = argot
    self.seller_id = seller_id
    self.url = url
    self.img = img
    self.client_id = client_id
    self.slug = slug
    self.img_width = img_width
    self.img_height = img_height
    self.button_text = button_text
    self.button_jump = button_jump
    self.jump_label = jump_label
    self.jump_data = jump_data
    self.argot_jump_label = argot_jump_label
    self.argot_jump_data = argot_jump_data
    self.version = version
    self.description = description
    self.type = type
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.order_create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.drawn_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.frozen_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.payed_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.use_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.start_use_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.end_use_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.coupon_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.favor_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.scope_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.sub_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.scene_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.full = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.favor = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.rate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.argot = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.img = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.slug = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.img_width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.img_height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.button_text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRING:
          self.button_jump = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.argot_jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.argot_jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.DOUBLE:
          self.value = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CacheCoupon')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 4)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 5)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.order_create_time is not None:
      oprot.writeFieldBegin('order_create_time', TType.I32, 6)
      oprot.writeI32(self.order_create_time)
      oprot.writeFieldEnd()
    if self.drawn_time is not None:
      oprot.writeFieldBegin('drawn_time', TType.I32, 7)
      oprot.writeI32(self.drawn_time)
      oprot.writeFieldEnd()
    if self.frozen_time is not None:
      oprot.writeFieldBegin('frozen_time', TType.I32, 8)
      oprot.writeI32(self.frozen_time)
      oprot.writeFieldEnd()
    if self.payed_time is not None:
      oprot.writeFieldBegin('payed_time', TType.I32, 9)
      oprot.writeI32(self.payed_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 10)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.use_status is not None:
      oprot.writeFieldBegin('use_status', TType.I32, 11)
      oprot.writeI32(self.use_status)
      oprot.writeFieldEnd()
    if self.start_use_time is not None:
      oprot.writeFieldBegin('start_use_time', TType.I32, 12)
      oprot.writeI32(self.start_use_time)
      oprot.writeFieldEnd()
    if self.end_use_time is not None:
      oprot.writeFieldBegin('end_use_time', TType.I32, 13)
      oprot.writeI32(self.end_use_time)
      oprot.writeFieldEnd()
    if self.coupon_id is not None:
      oprot.writeFieldBegin('coupon_id', TType.I32, 14)
      oprot.writeI32(self.coupon_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 15)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 16)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 17)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 18)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.favor_type is not None:
      oprot.writeFieldBegin('favor_type', TType.I32, 19)
      oprot.writeI32(self.favor_type)
      oprot.writeFieldEnd()
    if self.scope_type is not None:
      oprot.writeFieldBegin('scope_type', TType.I32, 20)
      oprot.writeI32(self.scope_type)
      oprot.writeFieldEnd()
    if self.sub_type is not None:
      oprot.writeFieldBegin('sub_type', TType.I32, 21)
      oprot.writeI32(self.sub_type)
      oprot.writeFieldEnd()
    if self.scene_type is not None:
      oprot.writeFieldBegin('scene_type', TType.I32, 22)
      oprot.writeI32(self.scene_type)
      oprot.writeFieldEnd()
    if self.full is not None:
      oprot.writeFieldBegin('full', TType.DOUBLE, 23)
      oprot.writeDouble(self.full)
      oprot.writeFieldEnd()
    if self.favor is not None:
      oprot.writeFieldBegin('favor', TType.DOUBLE, 24)
      oprot.writeDouble(self.favor)
      oprot.writeFieldEnd()
    if self.rate is not None:
      oprot.writeFieldBegin('rate', TType.DOUBLE, 25)
      oprot.writeDouble(self.rate)
      oprot.writeFieldEnd()
    if self.argot is not None:
      oprot.writeFieldBegin('argot', TType.STRING, 26)
      oprot.writeString(self.argot)
      oprot.writeFieldEnd()
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 27)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 28)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.img is not None:
      oprot.writeFieldBegin('img', TType.STRING, 29)
      oprot.writeString(self.img)
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 30)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.slug is not None:
      oprot.writeFieldBegin('slug', TType.STRING, 31)
      oprot.writeString(self.slug)
      oprot.writeFieldEnd()
    if self.img_width is not None:
      oprot.writeFieldBegin('img_width', TType.I32, 32)
      oprot.writeI32(self.img_width)
      oprot.writeFieldEnd()
    if self.img_height is not None:
      oprot.writeFieldBegin('img_height', TType.I32, 33)
      oprot.writeI32(self.img_height)
      oprot.writeFieldEnd()
    if self.button_text is not None:
      oprot.writeFieldBegin('button_text', TType.STRING, 34)
      oprot.writeString(self.button_text)
      oprot.writeFieldEnd()
    if self.button_jump is not None:
      oprot.writeFieldBegin('button_jump', TType.STRING, 35)
      oprot.writeString(self.button_jump)
      oprot.writeFieldEnd()
    if self.jump_label is not None:
      oprot.writeFieldBegin('jump_label', TType.STRING, 36)
      oprot.writeString(self.jump_label)
      oprot.writeFieldEnd()
    if self.jump_data is not None:
      oprot.writeFieldBegin('jump_data', TType.STRING, 37)
      oprot.writeString(self.jump_data)
      oprot.writeFieldEnd()
    if self.argot_jump_label is not None:
      oprot.writeFieldBegin('argot_jump_label', TType.STRING, 38)
      oprot.writeString(self.argot_jump_label)
      oprot.writeFieldEnd()
    if self.argot_jump_data is not None:
      oprot.writeFieldBegin('argot_jump_data', TType.STRING, 39)
      oprot.writeString(self.argot_jump_data)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 40)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 41)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 100)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.DOUBLE, 101)
      oprot.writeDouble(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.order_create_time)
    value = (value * 31) ^ hash(self.drawn_time)
    value = (value * 31) ^ hash(self.frozen_time)
    value = (value * 31) ^ hash(self.payed_time)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.use_status)
    value = (value * 31) ^ hash(self.start_use_time)
    value = (value * 31) ^ hash(self.end_use_time)
    value = (value * 31) ^ hash(self.coupon_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.favor_type)
    value = (value * 31) ^ hash(self.scope_type)
    value = (value * 31) ^ hash(self.sub_type)
    value = (value * 31) ^ hash(self.scene_type)
    value = (value * 31) ^ hash(self.full)
    value = (value * 31) ^ hash(self.favor)
    value = (value * 31) ^ hash(self.rate)
    value = (value * 31) ^ hash(self.argot)
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.img)
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.slug)
    value = (value * 31) ^ hash(self.img_width)
    value = (value * 31) ^ hash(self.img_height)
    value = (value * 31) ^ hash(self.button_text)
    value = (value * 31) ^ hash(self.button_jump)
    value = (value * 31) ^ hash(self.jump_label)
    value = (value * 31) ^ hash(self.jump_data)
    value = (value * 31) ^ hash(self.argot_jump_label)
    value = (value * 31) ^ hash(self.argot_jump_data)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CacheCouponGroup:
  """
  Attributes:
   - name
   - title
   - comment
   - ware_label_id
   - favor_type
   - scope_type
   - sub_type
   - scene_type
   - full
   - favor
   - rate
   - argot
   - max_count
   - drawn_count
   - create_time
   - can_draw_count
   - start_draw_time
   - end_draw_time
   - seller_id
   - url
   - id
   - img
   - slug
   - img_width
   - img_height
   - button_text
   - button_jump
   - jump_label
   - jump_data
   - argot_jump_label
   - argot_jump_data
   - update_time
   - version
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'comment', None, None, ), # 3
    (4, TType.I32, 'ware_label_id', None, None, ), # 4
    (5, TType.I32, 'favor_type', None, None, ), # 5
    (6, TType.I32, 'scope_type', None, None, ), # 6
    (7, TType.I32, 'sub_type', None, None, ), # 7
    (8, TType.I32, 'scene_type', None, None, ), # 8
    (9, TType.DOUBLE, 'full', None, None, ), # 9
    (10, TType.DOUBLE, 'favor', None, None, ), # 10
    (11, TType.DOUBLE, 'rate', None, None, ), # 11
    (12, TType.STRING, 'argot', None, None, ), # 12
    (13, TType.I32, 'max_count', None, None, ), # 13
    (14, TType.I32, 'drawn_count', None, None, ), # 14
    (15, TType.I32, 'create_time', None, None, ), # 15
    (16, TType.I32, 'can_draw_count', None, None, ), # 16
    (17, TType.I32, 'start_draw_time', None, None, ), # 17
    (18, TType.I32, 'end_draw_time', None, None, ), # 18
    (19, TType.I64, 'seller_id', None, None, ), # 19
    (20, TType.STRING, 'url', None, None, ), # 20
    (21, TType.I32, 'id', None, None, ), # 21
    (22, TType.STRING, 'img', None, None, ), # 22
    (23, TType.STRING, 'slug', None, None, ), # 23
    (24, TType.I32, 'img_width', None, None, ), # 24
    (25, TType.I32, 'img_height', None, None, ), # 25
    (26, TType.STRING, 'button_text', None, None, ), # 26
    (27, TType.STRING, 'button_jump', None, None, ), # 27
    (28, TType.STRING, 'jump_label', None, None, ), # 28
    (29, TType.STRING, 'jump_data', None, None, ), # 29
    (30, TType.STRING, 'argot_jump_label', None, None, ), # 30
    (31, TType.STRING, 'argot_jump_data', None, None, ), # 31
    (32, TType.I32, 'update_time', None, None, ), # 32
    (33, TType.I32, 'version', None, None, ), # 33
    (34, TType.STRING, 'description', None, None, ), # 34
  )

  def __init__(self, name=None, title=None, comment=None, ware_label_id=None, favor_type=None, scope_type=None, sub_type=None, scene_type=None, full=None, favor=None, rate=None, argot=None, max_count=None, drawn_count=None, create_time=None, can_draw_count=None, start_draw_time=None, end_draw_time=None, seller_id=None, url=None, id=None, img=None, slug=None, img_width=None, img_height=None, button_text=None, button_jump=None, jump_label=None, jump_data=None, argot_jump_label=None, argot_jump_data=None, update_time=None, version=None, description=None,):
    self.name = name
    self.title = title
    self.comment = comment
    self.ware_label_id = ware_label_id
    self.favor_type = favor_type
    self.scope_type = scope_type
    self.sub_type = sub_type
    self.scene_type = scene_type
    self.full = full
    self.favor = favor
    self.rate = rate
    self.argot = argot
    self.max_count = max_count
    self.drawn_count = drawn_count
    self.create_time = create_time
    self.can_draw_count = can_draw_count
    self.start_draw_time = start_draw_time
    self.end_draw_time = end_draw_time
    self.seller_id = seller_id
    self.url = url
    self.id = id
    self.img = img
    self.slug = slug
    self.img_width = img_width
    self.img_height = img_height
    self.button_text = button_text
    self.button_jump = button_jump
    self.jump_label = jump_label
    self.jump_data = jump_data
    self.argot_jump_label = argot_jump_label
    self.argot_jump_data = argot_jump_data
    self.update_time = update_time
    self.version = version
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.favor_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.scope_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sub_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.scene_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.full = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.favor = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.rate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.argot = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.max_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.drawn_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.can_draw_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.start_draw_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.end_draw_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.img = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.slug = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.img_width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.img_height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.button_text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.button_jump = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.argot_jump_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.argot_jump_data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.update_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CacheCouponGroup')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 3)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 4)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    if self.favor_type is not None:
      oprot.writeFieldBegin('favor_type', TType.I32, 5)
      oprot.writeI32(self.favor_type)
      oprot.writeFieldEnd()
    if self.scope_type is not None:
      oprot.writeFieldBegin('scope_type', TType.I32, 6)
      oprot.writeI32(self.scope_type)
      oprot.writeFieldEnd()
    if self.sub_type is not None:
      oprot.writeFieldBegin('sub_type', TType.I32, 7)
      oprot.writeI32(self.sub_type)
      oprot.writeFieldEnd()
    if self.scene_type is not None:
      oprot.writeFieldBegin('scene_type', TType.I32, 8)
      oprot.writeI32(self.scene_type)
      oprot.writeFieldEnd()
    if self.full is not None:
      oprot.writeFieldBegin('full', TType.DOUBLE, 9)
      oprot.writeDouble(self.full)
      oprot.writeFieldEnd()
    if self.favor is not None:
      oprot.writeFieldBegin('favor', TType.DOUBLE, 10)
      oprot.writeDouble(self.favor)
      oprot.writeFieldEnd()
    if self.rate is not None:
      oprot.writeFieldBegin('rate', TType.DOUBLE, 11)
      oprot.writeDouble(self.rate)
      oprot.writeFieldEnd()
    if self.argot is not None:
      oprot.writeFieldBegin('argot', TType.STRING, 12)
      oprot.writeString(self.argot)
      oprot.writeFieldEnd()
    if self.max_count is not None:
      oprot.writeFieldBegin('max_count', TType.I32, 13)
      oprot.writeI32(self.max_count)
      oprot.writeFieldEnd()
    if self.drawn_count is not None:
      oprot.writeFieldBegin('drawn_count', TType.I32, 14)
      oprot.writeI32(self.drawn_count)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 15)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.can_draw_count is not None:
      oprot.writeFieldBegin('can_draw_count', TType.I32, 16)
      oprot.writeI32(self.can_draw_count)
      oprot.writeFieldEnd()
    if self.start_draw_time is not None:
      oprot.writeFieldBegin('start_draw_time', TType.I32, 17)
      oprot.writeI32(self.start_draw_time)
      oprot.writeFieldEnd()
    if self.end_draw_time is not None:
      oprot.writeFieldBegin('end_draw_time', TType.I32, 18)
      oprot.writeI32(self.end_draw_time)
      oprot.writeFieldEnd()
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 19)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 20)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 21)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.img is not None:
      oprot.writeFieldBegin('img', TType.STRING, 22)
      oprot.writeString(self.img)
      oprot.writeFieldEnd()
    if self.slug is not None:
      oprot.writeFieldBegin('slug', TType.STRING, 23)
      oprot.writeString(self.slug)
      oprot.writeFieldEnd()
    if self.img_width is not None:
      oprot.writeFieldBegin('img_width', TType.I32, 24)
      oprot.writeI32(self.img_width)
      oprot.writeFieldEnd()
    if self.img_height is not None:
      oprot.writeFieldBegin('img_height', TType.I32, 25)
      oprot.writeI32(self.img_height)
      oprot.writeFieldEnd()
    if self.button_text is not None:
      oprot.writeFieldBegin('button_text', TType.STRING, 26)
      oprot.writeString(self.button_text)
      oprot.writeFieldEnd()
    if self.button_jump is not None:
      oprot.writeFieldBegin('button_jump', TType.STRING, 27)
      oprot.writeString(self.button_jump)
      oprot.writeFieldEnd()
    if self.jump_label is not None:
      oprot.writeFieldBegin('jump_label', TType.STRING, 28)
      oprot.writeString(self.jump_label)
      oprot.writeFieldEnd()
    if self.jump_data is not None:
      oprot.writeFieldBegin('jump_data', TType.STRING, 29)
      oprot.writeString(self.jump_data)
      oprot.writeFieldEnd()
    if self.argot_jump_label is not None:
      oprot.writeFieldBegin('argot_jump_label', TType.STRING, 30)
      oprot.writeString(self.argot_jump_label)
      oprot.writeFieldEnd()
    if self.argot_jump_data is not None:
      oprot.writeFieldBegin('argot_jump_data', TType.STRING, 31)
      oprot.writeString(self.argot_jump_data)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I32, 32)
      oprot.writeI32(self.update_time)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 33)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 34)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.ware_label_id)
    value = (value * 31) ^ hash(self.favor_type)
    value = (value * 31) ^ hash(self.scope_type)
    value = (value * 31) ^ hash(self.sub_type)
    value = (value * 31) ^ hash(self.scene_type)
    value = (value * 31) ^ hash(self.full)
    value = (value * 31) ^ hash(self.favor)
    value = (value * 31) ^ hash(self.rate)
    value = (value * 31) ^ hash(self.argot)
    value = (value * 31) ^ hash(self.max_count)
    value = (value * 31) ^ hash(self.drawn_count)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.can_draw_count)
    value = (value * 31) ^ hash(self.start_draw_time)
    value = (value * 31) ^ hash(self.end_draw_time)
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.img)
    value = (value * 31) ^ hash(self.slug)
    value = (value * 31) ^ hash(self.img_width)
    value = (value * 31) ^ hash(self.img_height)
    value = (value * 31) ^ hash(self.button_text)
    value = (value * 31) ^ hash(self.button_jump)
    value = (value * 31) ^ hash(self.jump_label)
    value = (value * 31) ^ hash(self.jump_data)
    value = (value * 31) ^ hash(self.argot_jump_label)
    value = (value * 31) ^ hash(self.argot_jump_data)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CacheCodes:
  """
  Attributes:
   - codes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'codes', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, codes=None,):
    self.codes = codes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.codes = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.codes.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CacheCodes')
    if self.codes is not None:
      oprot.writeFieldBegin('codes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.codes))
      for iter13 in self.codes:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.codes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidOperation(TException):
  """
  Attributes:
   - fault
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fault', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, fault=None, why=None,):
    self.fault = fault
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.fault = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOperation')
    if self.fault is not None:
      oprot.writeFieldBegin('fault', TType.I32, 1)
      oprot.writeI32(self.fault)
      oprot.writeFieldEnd()
    if self.why is not None:
      oprot.writeFieldBegin('why', TType.STRING, 2)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fault)
    value = (value * 31) ^ hash(self.why)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MultipleCondition:
  """
  Attributes:
   - andCondList
   - orCondList
   - orderCondList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'andCondList', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'orCondList', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'orderCondList', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, andCondList=None, orCondList=None, orderCondList=None,):
    self.andCondList = andCondList
    self.orCondList = orCondList
    self.orderCondList = orderCondList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.andCondList = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.andCondList.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.orCondList = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readString();
            self.orCondList.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.orderCondList = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = iprot.readString();
            self.orderCondList.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MultipleCondition')
    if self.andCondList is not None:
      oprot.writeFieldBegin('andCondList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.andCondList))
      for iter32 in self.andCondList:
        oprot.writeString(iter32)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orCondList is not None:
      oprot.writeFieldBegin('orCondList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.orCondList))
      for iter33 in self.orCondList:
        oprot.writeString(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orderCondList is not None:
      oprot.writeFieldBegin('orderCondList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.orderCondList))
      for iter34 in self.orderCondList:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.andCondList)
    value = (value * 31) ^ hash(self.orCondList)
    value = (value * 31) ^ hash(self.orderCondList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
