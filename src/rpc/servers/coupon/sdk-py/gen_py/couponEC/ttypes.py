#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import coupon.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class GetDefaultConfigReq:
  """
  Attributes:
   - dummy
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'dummy', None, None, ), # 1
  )

  def __init__(self, dummy=None,):
    self.dummy = dummy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.dummy = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetDefaultConfigReq')
    if self.dummy is not None:
      oprot.writeFieldBegin('dummy', TType.BOOL, 1)
      oprot.writeBool(self.dummy)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dummy is None:
      raise TProtocol.TProtocolException(message='Required field dummy is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dummy)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetDefaultConfigRsp:
  """
  Attributes:
   - error
   - errmsg
   - config
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRUCT, 'config', (coupon.ttypes.DefaultConfig, coupon.ttypes.DefaultConfig.thrift_spec), None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, config=None,):
    self.error = error
    self.errmsg = errmsg
    self.config = config

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.config = coupon.ttypes.DefaultConfig()
          self.config.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetDefaultConfigRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.config is not None:
      oprot.writeFieldBegin('config', TType.STRUCT, 3)
      self.config.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.config)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DecodeCodeReq:
  """
  Attributes:
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
  )

  def __init__(self, code=None,):
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DecodeCodeReq')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DecodeCodeRsp:
  """
  Attributes:
   - error
   - errmsg
   - code
   - coupon_group_id
   - coupon_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRING, 'code', None, None, ), # 3
    (4, TType.I32, 'coupon_group_id', None, None, ), # 4
    (5, TType.I32, 'coupon_id', None, None, ), # 5
  )

  def __init__(self, error=None, errmsg=None, code=None, coupon_group_id=None, coupon_id=None,):
    self.error = error
    self.errmsg = errmsg
    self.code = code
    self.coupon_group_id = coupon_group_id
    self.coupon_id = coupon_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.coupon_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DecodeCodeRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 3)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 4)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.coupon_id is not None:
      oprot.writeFieldBegin('coupon_id', TType.I32, 5)
      oprot.writeI32(self.coupon_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.coupon_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CheckArgotReq:
  """
  Attributes:
   - argot
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'argot', None, None, ), # 1
  )

  def __init__(self, argot=None,):
    self.argot = argot

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.argot = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CheckArgotReq')
    if self.argot is not None:
      oprot.writeFieldBegin('argot', TType.STRING, 1)
      oprot.writeString(self.argot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.argot is None:
      raise TProtocol.TProtocolException(message='Required field argot is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.argot)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CheckArgotRsp:
  """
  Attributes:
   - error
   - errmsg
   - argot
   - coupon_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRING, 'argot', None, None, ), # 3
    (4, TType.I32, 'coupon_group_id', None, None, ), # 4
  )

  def __init__(self, error=None, errmsg=None, argot=None, coupon_group_id=None,):
    self.error = error
    self.errmsg = errmsg
    self.argot = argot
    self.coupon_group_id = coupon_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.argot = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CheckArgotRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.argot is not None:
      oprot.writeFieldBegin('argot', TType.STRING, 3)
      oprot.writeString(self.argot)
      oprot.writeFieldEnd()
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 4)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.argot)
    value = (value * 31) ^ hash(self.coupon_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserLeftCouponsCountReq:
  """
  Attributes:
   - coupon_group_id
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
    (2, TType.I64, 'user_id', None, None, ), # 2
  )

  def __init__(self, coupon_group_id=None, user_id=None,):
    self.coupon_group_id = coupon_group_id
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserLeftCouponsCountReq')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 2)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coupon_group_id is None:
      raise TProtocol.TProtocolException(message='Required field coupon_group_id is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.user_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserLeftCouponsCountRsp:
  """
  Attributes:
   - error
   - errmsg
   - left_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I32, 'left_count', None, None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, left_count=None,):
    self.error = error
    self.errmsg = errmsg
    self.left_count = left_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.left_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserLeftCouponsCountRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.left_count is not None:
      oprot.writeFieldBegin('left_count', TType.I32, 3)
      oprot.writeI32(self.left_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.left_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrawnCountTodayReq:
  """
  Attributes:
   - coupon_group_id
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
    (2, TType.I64, 'user_id', None, None, ), # 2
  )

  def __init__(self, coupon_group_id=None, user_id=None,):
    self.coupon_group_id = coupon_group_id
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrawnCountTodayReq')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 2)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coupon_group_id is None:
      raise TProtocol.TProtocolException(message='Required field coupon_group_id is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.user_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrawnCountTodayRsp:
  """
  Attributes:
   - error
   - errmsg
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, count=None,):
    self.error = error
    self.errmsg = errmsg
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrawnCountTodayRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientCouponsReq:
  """
  Attributes:
   - coupon_group_id
   - client_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
    (2, TType.STRING, 'client_id', None, None, ), # 2
  )

  def __init__(self, coupon_group_id=None, client_id=None,):
    self.coupon_group_id = coupon_group_id
    self.client_id = client_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientCouponsReq')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 2)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coupon_group_id is None:
      raise TProtocol.TProtocolException(message='Required field coupon_group_id is unset!')
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.client_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientCouponsRsp:
  """
  Attributes:
   - error
   - errmsg
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, count=None,):
    self.error = error
    self.errmsg = errmsg
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientCouponsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrawReq:
  """
  Attributes:
   - coupon_group_id
   - user_id
   - client_id
   - argot
   - scene_type
   - code
   - channel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
    (2, TType.I64, 'user_id', None, None, ), # 2
    (3, TType.STRING, 'client_id', None, None, ), # 3
    (4, TType.STRING, 'argot', None, None, ), # 4
    (5, TType.I32, 'scene_type', None, None, ), # 5
    (6, TType.STRING, 'code', None, None, ), # 6
    (7, TType.I32, 'channel_id', None, None, ), # 7
  )

  def __init__(self, coupon_group_id=None, user_id=None, client_id=None, argot=None, scene_type=None, code=None, channel_id=None,):
    self.coupon_group_id = coupon_group_id
    self.user_id = user_id
    self.client_id = client_id
    self.argot = argot
    self.scene_type = scene_type
    self.code = code
    self.channel_id = channel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.argot = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.scene_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.channel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrawReq')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 2)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 3)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.argot is not None:
      oprot.writeFieldBegin('argot', TType.STRING, 4)
      oprot.writeString(self.argot)
      oprot.writeFieldEnd()
    if self.scene_type is not None:
      oprot.writeFieldBegin('scene_type', TType.I32, 5)
      oprot.writeI32(self.scene_type)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 6)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.channel_id is not None:
      oprot.writeFieldBegin('channel_id', TType.I32, 7)
      oprot.writeI32(self.channel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coupon_group_id is None:
      raise TProtocol.TProtocolException(message='Required field coupon_group_id is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.scene_type is None:
      raise TProtocol.TProtocolException(message='Required field scene_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.argot)
    value = (value * 31) ^ hash(self.scene_type)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.channel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrawRsp:
  """
  Attributes:
   - error
   - errmsg
   - code
   - cacheCoupon
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRING, 'code', None, None, ), # 3
    (4, TType.STRUCT, 'cacheCoupon', (coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec), None, ), # 4
  )

  def __init__(self, error=None, errmsg=None, code=None, cacheCoupon=None,):
    self.error = error
    self.errmsg = errmsg
    self.code = code
    self.cacheCoupon = cacheCoupon

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.cacheCoupon = coupon.ttypes.CacheCoupon()
          self.cacheCoupon.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrawRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 3)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.cacheCoupon is not None:
      oprot.writeFieldBegin('cacheCoupon', TType.STRUCT, 4)
      self.cacheCoupon.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.cacheCoupon)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollbackReq:
  """
  Attributes:
   - code
   - user_id
   - order_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.I64, 'user_id', None, None, ), # 2
    (3, TType.STRING, 'order_id', None, None, ), # 3
  )

  def __init__(self, code=None, user_id=None, order_id=None,):
    self.code = code
    self.user_id = user_id
    self.order_id = order_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollbackReq')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 2)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 3)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.order_id is None:
      raise TProtocol.TProtocolException(message='Required field order_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.order_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollbackRsp:
  """
  Attributes:
   - error
   - errmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
  )

  def __init__(self, error=None, errmsg=None,):
    self.error = error
    self.errmsg = errmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollbackRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FreezeReq:
  """
  Attributes:
   - code
   - user_id
   - order_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.I64, 'user_id', None, None, ), # 2
    (3, TType.STRING, 'order_id', None, None, ), # 3
  )

  def __init__(self, code=None, user_id=None, order_id=None,):
    self.code = code
    self.user_id = user_id
    self.order_id = order_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FreezeReq')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 2)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 3)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.order_id is None:
      raise TProtocol.TProtocolException(message='Required field order_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.order_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FreezeRsp:
  """
  Attributes:
   - error
   - errmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
  )

  def __init__(self, error=None, errmsg=None,):
    self.error = error
    self.errmsg = errmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FreezeRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PayReq:
  """
  Attributes:
   - code
   - user_id
   - order_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.I64, 'user_id', None, None, ), # 2
    (3, TType.STRING, 'order_id', None, None, ), # 3
  )

  def __init__(self, code=None, user_id=None, order_id=None,):
    self.code = code
    self.user_id = user_id
    self.order_id = order_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayReq')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 2)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 3)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.order_id is None:
      raise TProtocol.TProtocolException(message='Required field order_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.order_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PayRsp:
  """
  Attributes:
   - error
   - errmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
  )

  def __init__(self, error=None, errmsg=None,):
    self.error = error
    self.errmsg = errmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCouponsReq:
  """
  Attributes:
   - user_id
   - page
   - count
   - use_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.I32, 'page', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
    (4, TType.I32, 'use_status', None, None, ), # 4
  )

  def __init__(self, user_id=None, page=None, count=None, use_status=None,):
    self.user_id = user_id
    self.page = page
    self.count = count
    self.use_status = use_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.use_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCouponsReq')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 2)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.use_status is not None:
      oprot.writeFieldBegin('use_status', TType.I32, 4)
      oprot.writeI32(self.use_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    if self.use_status is None:
      raise TProtocol.TProtocolException(message='Required field use_status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.use_status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCouponsRsp:
  """
  Attributes:
   - error
   - errmsg
   - user_id
   - page
   - count
   - use_status
   - total
   - coupons
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I64, 'user_id', None, None, ), # 3
    (4, TType.I32, 'page', None, None, ), # 4
    (5, TType.I32, 'count', None, None, ), # 5
    (6, TType.I32, 'use_status', None, None, ), # 6
    (7, TType.I32, 'total', None, None, ), # 7
    (8, TType.LIST, 'coupons', (TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec)), None, ), # 8
  )

  def __init__(self, error=None, errmsg=None, user_id=None, page=None, count=None, use_status=None, total=None, coupons=None,):
    self.error = error
    self.errmsg = errmsg
    self.user_id = user_id
    self.page = page
    self.count = count
    self.use_status = use_status
    self.total = total
    self.coupons = coupons

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.use_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.coupons = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = coupon.ttypes.CacheCoupon()
            _elem5.read(iprot)
            self.coupons.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCouponsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 4)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.use_status is not None:
      oprot.writeFieldBegin('use_status', TType.I32, 6)
      oprot.writeI32(self.use_status)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 7)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.coupons is not None:
      oprot.writeFieldBegin('coupons', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.coupons))
      for iter6 in self.coupons:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.use_status)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.coupons)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareActsReq:
  """
  Attributes:
   - ware_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'ware_ids', (TType.I64,None), None, ), # 1
  )

  def __init__(self, ware_ids=None,):
    self.ware_ids = ware_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.ware_ids = set()
          (_etype10, _size7) = iprot.readSetBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.ware_ids.add(_elem12)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareActsReq')
    if self.ware_ids is not None:
      oprot.writeFieldBegin('ware_ids', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.ware_ids))
      for iter13 in self.ware_ids:
        oprot.writeI64(iter13)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ware_ids is None:
      raise TProtocol.TProtocolException(message='Required field ware_ids is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ware_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareActsRsp:
  """
  Attributes:
   - error
   - errmsg
   - wareActs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.MAP, 'wareActs', (TType.I64,None,TType.LIST,(TType.STRUCT,(coupon.ttypes.CouponGroup, coupon.ttypes.CouponGroup.thrift_spec))), None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, wareActs=None,):
    self.error = error
    self.errmsg = errmsg
    self.wareActs = wareActs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.wareActs = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
          for _i18 in xrange(_size14):
            _key19 = iprot.readI64();
            _val20 = []
            (_etype24, _size21) = iprot.readListBegin()
            for _i25 in xrange(_size21):
              _elem26 = coupon.ttypes.CouponGroup()
              _elem26.read(iprot)
              _val20.append(_elem26)
            iprot.readListEnd()
            self.wareActs[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareActsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.wareActs is not None:
      oprot.writeFieldBegin('wareActs', TType.MAP, 3)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.wareActs))
      for kiter27,viter28 in self.wareActs.items():
        oprot.writeI64(kiter27)
        oprot.writeListBegin(TType.STRUCT, len(viter28))
        for iter29 in viter28:
          iter29.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.wareActs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceInfo:
  """
  Attributes:
   - market_price
   - sale_price
   - pay_price
   - favor_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'market_price', None, None, ), # 1
    (2, TType.DOUBLE, 'sale_price', None, None, ), # 2
    (3, TType.DOUBLE, 'pay_price', None, None, ), # 3
    (4, TType.DOUBLE, 'favor_price', None, None, ), # 4
  )

  def __init__(self, market_price=None, sale_price=None, pay_price=None, favor_price=None,):
    self.market_price = market_price
    self.sale_price = sale_price
    self.pay_price = pay_price
    self.favor_price = favor_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.market_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.pay_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.favor_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceInfo')
    if self.market_price is not None:
      oprot.writeFieldBegin('market_price', TType.DOUBLE, 1)
      oprot.writeDouble(self.market_price)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 2)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.pay_price is not None:
      oprot.writeFieldBegin('pay_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.pay_price)
      oprot.writeFieldEnd()
    if self.favor_price is not None:
      oprot.writeFieldBegin('favor_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.favor_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.market_price)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.pay_price)
    value = (value * 31) ^ hash(self.favor_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkuInfo:
  """
  Attributes:
   - sku_id
   - sku_count
   - sale_price
   - market_price
   - ware_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sku_id', None, None, ), # 1
    (2, TType.I32, 'sku_count', None, None, ), # 2
    (3, TType.DOUBLE, 'sale_price', None, None, ), # 3
    (4, TType.DOUBLE, 'market_price', None, None, ), # 4
    (5, TType.I64, 'ware_id', None, None, ), # 5
  )

  def __init__(self, sku_id=None, sku_count=None, sale_price=None, market_price=None, ware_id=None,):
    self.sku_id = sku_id
    self.sku_count = sku_count
    self.sale_price = sale_price
    self.market_price = market_price
    self.ware_id = ware_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sku_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sku_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.market_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.ware_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkuInfo')
    if self.sku_id is not None:
      oprot.writeFieldBegin('sku_id', TType.I64, 1)
      oprot.writeI64(self.sku_id)
      oprot.writeFieldEnd()
    if self.sku_count is not None:
      oprot.writeFieldBegin('sku_count', TType.I32, 2)
      oprot.writeI32(self.sku_count)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.market_price is not None:
      oprot.writeFieldBegin('market_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.market_price)
      oprot.writeFieldEnd()
    if self.ware_id is not None:
      oprot.writeFieldBegin('ware_id', TType.I64, 5)
      oprot.writeI64(self.ware_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sku_id)
    value = (value * 31) ^ hash(self.sku_count)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.market_price)
    value = (value * 31) ^ hash(self.ware_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SellerInfo:
  """
  Attributes:
   - seller_id
   - skus
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'seller_id', None, None, ), # 1
    (2, TType.MAP, 'skus', (TType.I64,None,TType.STRUCT,(SkuInfo, SkuInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, seller_id=None, skus=None,):
    self.seller_id = seller_id
    self.skus = skus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.seller_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.skus = {}
          (_ktype31, _vtype32, _size30 ) = iprot.readMapBegin()
          for _i34 in xrange(_size30):
            _key35 = iprot.readI64();
            _val36 = SkuInfo()
            _val36.read(iprot)
            self.skus[_key35] = _val36
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SellerInfo')
    if self.seller_id is not None:
      oprot.writeFieldBegin('seller_id', TType.I64, 1)
      oprot.writeI64(self.seller_id)
      oprot.writeFieldEnd()
    if self.skus is not None:
      oprot.writeFieldBegin('skus', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.skus))
      for kiter37,viter38 in self.skus.items():
        oprot.writeI64(kiter37)
        viter38.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.seller_id)
    value = (value * 31) ^ hash(self.skus)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsableCouponsReq:
  """
  Attributes:
   - user_id
   - sellers
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.MAP, 'sellers', (TType.I64,None,TType.STRUCT,(SellerInfo, SellerInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, user_id=None, sellers=None,):
    self.user_id = user_id
    self.sellers = sellers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.sellers = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readI64();
            _val45 = SellerInfo()
            _val45.read(iprot)
            self.sellers[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsableCouponsReq')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.sellers is not None:
      oprot.writeFieldBegin('sellers', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sellers))
      for kiter46,viter47 in self.sellers.items():
        oprot.writeI64(kiter46)
        viter47.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.sellers is None:
      raise TProtocol.TProtocolException(message='Required field sellers is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.sellers)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsableCouponsRsp:
  """
  Attributes:
   - error
   - errmsg
   - user_id
   - sellers
   - platUsableCoupons
   - sellerUsableCoupons
   - code_cacheCoupon_map
   - orderPrice
   - sellerId_priceInfo_map
   - sellerId_skuId_priceInfo_map
   - platCode_totalSalePrice_map
   - sellerId_code_totalSalePrice_map
   - sellerId_skuId_code_totalSalePrice_map
   - platCode_wareSet_map
   - sellerId_code_wareSet_map
   - sellerId_wareId_code_map
   - skuID_wareID_map
   - usableCodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I64, 'user_id', None, None, ), # 3
    (4, TType.MAP, 'sellers', (TType.I64,None,TType.STRUCT,(SellerInfo, SellerInfo.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'platUsableCoupons', (TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'sellerUsableCoupons', (TType.I64,None,TType.LIST,(TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec))), None, ), # 6
    (7, TType.MAP, 'code_cacheCoupon_map', (TType.STRING,None,TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec)), None, ), # 7
    (8, TType.STRUCT, 'orderPrice', (PriceInfo, PriceInfo.thrift_spec), None, ), # 8
    (9, TType.MAP, 'sellerId_priceInfo_map', (TType.I64,None,TType.STRUCT,(PriceInfo, PriceInfo.thrift_spec)), None, ), # 9
    (10, TType.MAP, 'sellerId_skuId_priceInfo_map', (TType.I64,None,TType.MAP,(TType.I64,None,TType.STRUCT,(PriceInfo, PriceInfo.thrift_spec))), None, ), # 10
    (11, TType.MAP, 'platCode_totalSalePrice_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 11
    (12, TType.MAP, 'sellerId_code_totalSalePrice_map', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.DOUBLE,None)), None, ), # 12
    (13, TType.MAP, 'sellerId_skuId_code_totalSalePrice_map', (TType.I64,None,TType.MAP,(TType.I64,None,TType.MAP,(TType.STRING,None,TType.DOUBLE,None))), None, ), # 13
    (14, TType.MAP, 'platCode_wareSet_map', (TType.STRING,None,TType.SET,(TType.I64,None)), None, ), # 14
    (15, TType.MAP, 'sellerId_code_wareSet_map', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.I64,None))), None, ), # 15
    (16, TType.MAP, 'sellerId_wareId_code_map', (TType.I64,None,TType.MAP,(TType.I64,None,TType.MAP,(TType.STRING,None,TType.BOOL,None))), None, ), # 16
    (17, TType.MAP, 'skuID_wareID_map', (TType.I64,None,TType.I64,None), None, ), # 17
    (18, TType.LIST, 'usableCodes', (TType.STRING,None), None, ), # 18
  )

  def __init__(self, error=None, errmsg=None, user_id=None, sellers=None, platUsableCoupons=None, sellerUsableCoupons=None, code_cacheCoupon_map=None, orderPrice=None, sellerId_priceInfo_map=None, sellerId_skuId_priceInfo_map=None, platCode_totalSalePrice_map=None, sellerId_code_totalSalePrice_map=None, sellerId_skuId_code_totalSalePrice_map=None, platCode_wareSet_map=None, sellerId_code_wareSet_map=None, sellerId_wareId_code_map=None, skuID_wareID_map=None, usableCodes=None,):
    self.error = error
    self.errmsg = errmsg
    self.user_id = user_id
    self.sellers = sellers
    self.platUsableCoupons = platUsableCoupons
    self.sellerUsableCoupons = sellerUsableCoupons
    self.code_cacheCoupon_map = code_cacheCoupon_map
    self.orderPrice = orderPrice
    self.sellerId_priceInfo_map = sellerId_priceInfo_map
    self.sellerId_skuId_priceInfo_map = sellerId_skuId_priceInfo_map
    self.platCode_totalSalePrice_map = platCode_totalSalePrice_map
    self.sellerId_code_totalSalePrice_map = sellerId_code_totalSalePrice_map
    self.sellerId_skuId_code_totalSalePrice_map = sellerId_skuId_code_totalSalePrice_map
    self.platCode_wareSet_map = platCode_wareSet_map
    self.sellerId_code_wareSet_map = sellerId_code_wareSet_map
    self.sellerId_wareId_code_map = sellerId_wareId_code_map
    self.skuID_wareID_map = skuID_wareID_map
    self.usableCodes = usableCodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.sellers = {}
          (_ktype49, _vtype50, _size48 ) = iprot.readMapBegin()
          for _i52 in xrange(_size48):
            _key53 = iprot.readI64();
            _val54 = SellerInfo()
            _val54.read(iprot)
            self.sellers[_key53] = _val54
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.platUsableCoupons = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = coupon.ttypes.CacheCoupon()
            _elem60.read(iprot)
            self.platUsableCoupons.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.sellerUsableCoupons = {}
          (_ktype62, _vtype63, _size61 ) = iprot.readMapBegin()
          for _i65 in xrange(_size61):
            _key66 = iprot.readI64();
            _val67 = []
            (_etype71, _size68) = iprot.readListBegin()
            for _i72 in xrange(_size68):
              _elem73 = coupon.ttypes.CacheCoupon()
              _elem73.read(iprot)
              _val67.append(_elem73)
            iprot.readListEnd()
            self.sellerUsableCoupons[_key66] = _val67
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.code_cacheCoupon_map = {}
          (_ktype75, _vtype76, _size74 ) = iprot.readMapBegin()
          for _i78 in xrange(_size74):
            _key79 = iprot.readString();
            _val80 = coupon.ttypes.CacheCoupon()
            _val80.read(iprot)
            self.code_cacheCoupon_map[_key79] = _val80
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.orderPrice = PriceInfo()
          self.orderPrice.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.sellerId_priceInfo_map = {}
          (_ktype82, _vtype83, _size81 ) = iprot.readMapBegin()
          for _i85 in xrange(_size81):
            _key86 = iprot.readI64();
            _val87 = PriceInfo()
            _val87.read(iprot)
            self.sellerId_priceInfo_map[_key86] = _val87
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.sellerId_skuId_priceInfo_map = {}
          (_ktype89, _vtype90, _size88 ) = iprot.readMapBegin()
          for _i92 in xrange(_size88):
            _key93 = iprot.readI64();
            _val94 = {}
            (_ktype96, _vtype97, _size95 ) = iprot.readMapBegin()
            for _i99 in xrange(_size95):
              _key100 = iprot.readI64();
              _val101 = PriceInfo()
              _val101.read(iprot)
              _val94[_key100] = _val101
            iprot.readMapEnd()
            self.sellerId_skuId_priceInfo_map[_key93] = _val94
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.MAP:
          self.platCode_totalSalePrice_map = {}
          (_ktype103, _vtype104, _size102 ) = iprot.readMapBegin()
          for _i106 in xrange(_size102):
            _key107 = iprot.readString();
            _val108 = iprot.readDouble();
            self.platCode_totalSalePrice_map[_key107] = _val108
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.MAP:
          self.sellerId_code_totalSalePrice_map = {}
          (_ktype110, _vtype111, _size109 ) = iprot.readMapBegin()
          for _i113 in xrange(_size109):
            _key114 = iprot.readI64();
            _val115 = {}
            (_ktype117, _vtype118, _size116 ) = iprot.readMapBegin()
            for _i120 in xrange(_size116):
              _key121 = iprot.readString();
              _val122 = iprot.readDouble();
              _val115[_key121] = _val122
            iprot.readMapEnd()
            self.sellerId_code_totalSalePrice_map[_key114] = _val115
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.MAP:
          self.sellerId_skuId_code_totalSalePrice_map = {}
          (_ktype124, _vtype125, _size123 ) = iprot.readMapBegin()
          for _i127 in xrange(_size123):
            _key128 = iprot.readI64();
            _val129 = {}
            (_ktype131, _vtype132, _size130 ) = iprot.readMapBegin()
            for _i134 in xrange(_size130):
              _key135 = iprot.readI64();
              _val136 = {}
              (_ktype138, _vtype139, _size137 ) = iprot.readMapBegin()
              for _i141 in xrange(_size137):
                _key142 = iprot.readString();
                _val143 = iprot.readDouble();
                _val136[_key142] = _val143
              iprot.readMapEnd()
              _val129[_key135] = _val136
            iprot.readMapEnd()
            self.sellerId_skuId_code_totalSalePrice_map[_key128] = _val129
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.MAP:
          self.platCode_wareSet_map = {}
          (_ktype145, _vtype146, _size144 ) = iprot.readMapBegin()
          for _i148 in xrange(_size144):
            _key149 = iprot.readString();
            _val150 = set()
            (_etype154, _size151) = iprot.readSetBegin()
            for _i155 in xrange(_size151):
              _elem156 = iprot.readI64();
              _val150.add(_elem156)
            iprot.readSetEnd()
            self.platCode_wareSet_map[_key149] = _val150
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.MAP:
          self.sellerId_code_wareSet_map = {}
          (_ktype158, _vtype159, _size157 ) = iprot.readMapBegin()
          for _i161 in xrange(_size157):
            _key162 = iprot.readI64();
            _val163 = {}
            (_ktype165, _vtype166, _size164 ) = iprot.readMapBegin()
            for _i168 in xrange(_size164):
              _key169 = iprot.readString();
              _val170 = set()
              (_etype174, _size171) = iprot.readSetBegin()
              for _i175 in xrange(_size171):
                _elem176 = iprot.readI64();
                _val170.add(_elem176)
              iprot.readSetEnd()
              _val163[_key169] = _val170
            iprot.readMapEnd()
            self.sellerId_code_wareSet_map[_key162] = _val163
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.MAP:
          self.sellerId_wareId_code_map = {}
          (_ktype178, _vtype179, _size177 ) = iprot.readMapBegin()
          for _i181 in xrange(_size177):
            _key182 = iprot.readI64();
            _val183 = {}
            (_ktype185, _vtype186, _size184 ) = iprot.readMapBegin()
            for _i188 in xrange(_size184):
              _key189 = iprot.readI64();
              _val190 = {}
              (_ktype192, _vtype193, _size191 ) = iprot.readMapBegin()
              for _i195 in xrange(_size191):
                _key196 = iprot.readString();
                _val197 = iprot.readBool();
                _val190[_key196] = _val197
              iprot.readMapEnd()
              _val183[_key189] = _val190
            iprot.readMapEnd()
            self.sellerId_wareId_code_map[_key182] = _val183
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.MAP:
          self.skuID_wareID_map = {}
          (_ktype199, _vtype200, _size198 ) = iprot.readMapBegin()
          for _i202 in xrange(_size198):
            _key203 = iprot.readI64();
            _val204 = iprot.readI64();
            self.skuID_wareID_map[_key203] = _val204
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.usableCodes = []
          (_etype208, _size205) = iprot.readListBegin()
          for _i209 in xrange(_size205):
            _elem210 = iprot.readString();
            self.usableCodes.append(_elem210)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsableCouponsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.sellers is not None:
      oprot.writeFieldBegin('sellers', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sellers))
      for kiter211,viter212 in self.sellers.items():
        oprot.writeI64(kiter211)
        viter212.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.platUsableCoupons is not None:
      oprot.writeFieldBegin('platUsableCoupons', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.platUsableCoupons))
      for iter213 in self.platUsableCoupons:
        iter213.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sellerUsableCoupons is not None:
      oprot.writeFieldBegin('sellerUsableCoupons', TType.MAP, 6)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.sellerUsableCoupons))
      for kiter214,viter215 in self.sellerUsableCoupons.items():
        oprot.writeI64(kiter214)
        oprot.writeListBegin(TType.STRUCT, len(viter215))
        for iter216 in viter215:
          iter216.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.code_cacheCoupon_map is not None:
      oprot.writeFieldBegin('code_cacheCoupon_map', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.code_cacheCoupon_map))
      for kiter217,viter218 in self.code_cacheCoupon_map.items():
        oprot.writeString(kiter217)
        viter218.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.orderPrice is not None:
      oprot.writeFieldBegin('orderPrice', TType.STRUCT, 8)
      self.orderPrice.write(oprot)
      oprot.writeFieldEnd()
    if self.sellerId_priceInfo_map is not None:
      oprot.writeFieldBegin('sellerId_priceInfo_map', TType.MAP, 9)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sellerId_priceInfo_map))
      for kiter219,viter220 in self.sellerId_priceInfo_map.items():
        oprot.writeI64(kiter219)
        viter220.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sellerId_skuId_priceInfo_map is not None:
      oprot.writeFieldBegin('sellerId_skuId_priceInfo_map', TType.MAP, 10)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.sellerId_skuId_priceInfo_map))
      for kiter221,viter222 in self.sellerId_skuId_priceInfo_map.items():
        oprot.writeI64(kiter221)
        oprot.writeMapBegin(TType.I64, TType.STRUCT, len(viter222))
        for kiter223,viter224 in viter222.items():
          oprot.writeI64(kiter223)
          viter224.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.platCode_totalSalePrice_map is not None:
      oprot.writeFieldBegin('platCode_totalSalePrice_map', TType.MAP, 11)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.platCode_totalSalePrice_map))
      for kiter225,viter226 in self.platCode_totalSalePrice_map.items():
        oprot.writeString(kiter225)
        oprot.writeDouble(viter226)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sellerId_code_totalSalePrice_map is not None:
      oprot.writeFieldBegin('sellerId_code_totalSalePrice_map', TType.MAP, 12)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.sellerId_code_totalSalePrice_map))
      for kiter227,viter228 in self.sellerId_code_totalSalePrice_map.items():
        oprot.writeI64(kiter227)
        oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(viter228))
        for kiter229,viter230 in viter228.items():
          oprot.writeString(kiter229)
          oprot.writeDouble(viter230)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sellerId_skuId_code_totalSalePrice_map is not None:
      oprot.writeFieldBegin('sellerId_skuId_code_totalSalePrice_map', TType.MAP, 13)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.sellerId_skuId_code_totalSalePrice_map))
      for kiter231,viter232 in self.sellerId_skuId_code_totalSalePrice_map.items():
        oprot.writeI64(kiter231)
        oprot.writeMapBegin(TType.I64, TType.MAP, len(viter232))
        for kiter233,viter234 in viter232.items():
          oprot.writeI64(kiter233)
          oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(viter234))
          for kiter235,viter236 in viter234.items():
            oprot.writeString(kiter235)
            oprot.writeDouble(viter236)
          oprot.writeMapEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.platCode_wareSet_map is not None:
      oprot.writeFieldBegin('platCode_wareSet_map', TType.MAP, 14)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.platCode_wareSet_map))
      for kiter237,viter238 in self.platCode_wareSet_map.items():
        oprot.writeString(kiter237)
        oprot.writeSetBegin(TType.I64, len(viter238))
        for iter239 in viter238:
          oprot.writeI64(iter239)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sellerId_code_wareSet_map is not None:
      oprot.writeFieldBegin('sellerId_code_wareSet_map', TType.MAP, 15)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.sellerId_code_wareSet_map))
      for kiter240,viter241 in self.sellerId_code_wareSet_map.items():
        oprot.writeI64(kiter240)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter241))
        for kiter242,viter243 in viter241.items():
          oprot.writeString(kiter242)
          oprot.writeSetBegin(TType.I64, len(viter243))
          for iter244 in viter243:
            oprot.writeI64(iter244)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sellerId_wareId_code_map is not None:
      oprot.writeFieldBegin('sellerId_wareId_code_map', TType.MAP, 16)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.sellerId_wareId_code_map))
      for kiter245,viter246 in self.sellerId_wareId_code_map.items():
        oprot.writeI64(kiter245)
        oprot.writeMapBegin(TType.I64, TType.MAP, len(viter246))
        for kiter247,viter248 in viter246.items():
          oprot.writeI64(kiter247)
          oprot.writeMapBegin(TType.STRING, TType.BOOL, len(viter248))
          for kiter249,viter250 in viter248.items():
            oprot.writeString(kiter249)
            oprot.writeBool(viter250)
          oprot.writeMapEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.skuID_wareID_map is not None:
      oprot.writeFieldBegin('skuID_wareID_map', TType.MAP, 17)
      oprot.writeMapBegin(TType.I64, TType.I64, len(self.skuID_wareID_map))
      for kiter251,viter252 in self.skuID_wareID_map.items():
        oprot.writeI64(kiter251)
        oprot.writeI64(viter252)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.usableCodes is not None:
      oprot.writeFieldBegin('usableCodes', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.usableCodes))
      for iter253 in self.usableCodes:
        oprot.writeString(iter253)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.sellers)
    value = (value * 31) ^ hash(self.platUsableCoupons)
    value = (value * 31) ^ hash(self.sellerUsableCoupons)
    value = (value * 31) ^ hash(self.code_cacheCoupon_map)
    value = (value * 31) ^ hash(self.orderPrice)
    value = (value * 31) ^ hash(self.sellerId_priceInfo_map)
    value = (value * 31) ^ hash(self.sellerId_skuId_priceInfo_map)
    value = (value * 31) ^ hash(self.platCode_totalSalePrice_map)
    value = (value * 31) ^ hash(self.sellerId_code_totalSalePrice_map)
    value = (value * 31) ^ hash(self.sellerId_skuId_code_totalSalePrice_map)
    value = (value * 31) ^ hash(self.platCode_wareSet_map)
    value = (value * 31) ^ hash(self.sellerId_code_wareSet_map)
    value = (value * 31) ^ hash(self.sellerId_wareId_code_map)
    value = (value * 31) ^ hash(self.skuID_wareID_map)
    value = (value * 31) ^ hash(self.usableCodes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotUsableCouponsReq:
  """
  Attributes:
   - user_id
   - sellers
   - usableCodes
   - page
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.MAP, 'sellers', (TType.I64,None,TType.STRUCT,(SellerInfo, SellerInfo.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'usableCodes', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'page', None, None, ), # 4
    (5, TType.I32, 'count', None, None, ), # 5
  )

  def __init__(self, user_id=None, sellers=None, usableCodes=None, page=None, count=None,):
    self.user_id = user_id
    self.sellers = sellers
    self.usableCodes = usableCodes
    self.page = page
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.sellers = {}
          (_ktype255, _vtype256, _size254 ) = iprot.readMapBegin()
          for _i258 in xrange(_size254):
            _key259 = iprot.readI64();
            _val260 = SellerInfo()
            _val260.read(iprot)
            self.sellers[_key259] = _val260
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.usableCodes = []
          (_etype264, _size261) = iprot.readListBegin()
          for _i265 in xrange(_size261):
            _elem266 = iprot.readString();
            self.usableCodes.append(_elem266)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotUsableCouponsReq')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.sellers is not None:
      oprot.writeFieldBegin('sellers', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sellers))
      for kiter267,viter268 in self.sellers.items():
        oprot.writeI64(kiter267)
        viter268.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.usableCodes is not None:
      oprot.writeFieldBegin('usableCodes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.usableCodes))
      for iter269 in self.usableCodes:
        oprot.writeString(iter269)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 4)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.sellers is None:
      raise TProtocol.TProtocolException(message='Required field sellers is unset!')
    if self.usableCodes is None:
      raise TProtocol.TProtocolException(message='Required field usableCodes is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.sellers)
    value = (value * 31) ^ hash(self.usableCodes)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotUsableCouponsRsp:
  """
  Attributes:
   - error
   - errmsg
   - user_id
   - sellers
   - usableCodes
   - notUsableCoupons
   - page
   - count
   - total
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I64, 'user_id', None, None, ), # 3
    (4, TType.MAP, 'sellers', (TType.I64,None,TType.STRUCT,(SellerInfo, SellerInfo.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'usableCodes', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'notUsableCoupons', (TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec)), None, ), # 6
    (7, TType.I32, 'page', None, None, ), # 7
    (8, TType.I32, 'count', None, None, ), # 8
    (9, TType.I32, 'total', None, None, ), # 9
  )

  def __init__(self, error=None, errmsg=None, user_id=None, sellers=None, usableCodes=None, notUsableCoupons=None, page=None, count=None, total=None,):
    self.error = error
    self.errmsg = errmsg
    self.user_id = user_id
    self.sellers = sellers
    self.usableCodes = usableCodes
    self.notUsableCoupons = notUsableCoupons
    self.page = page
    self.count = count
    self.total = total

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.sellers = {}
          (_ktype271, _vtype272, _size270 ) = iprot.readMapBegin()
          for _i274 in xrange(_size270):
            _key275 = iprot.readI64();
            _val276 = SellerInfo()
            _val276.read(iprot)
            self.sellers[_key275] = _val276
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.usableCodes = []
          (_etype280, _size277) = iprot.readListBegin()
          for _i281 in xrange(_size277):
            _elem282 = iprot.readString();
            self.usableCodes.append(_elem282)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.notUsableCoupons = []
          (_etype286, _size283) = iprot.readListBegin()
          for _i287 in xrange(_size283):
            _elem288 = coupon.ttypes.CacheCoupon()
            _elem288.read(iprot)
            self.notUsableCoupons.append(_elem288)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotUsableCouponsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.sellers is not None:
      oprot.writeFieldBegin('sellers', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sellers))
      for kiter289,viter290 in self.sellers.items():
        oprot.writeI64(kiter289)
        viter290.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.usableCodes is not None:
      oprot.writeFieldBegin('usableCodes', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.usableCodes))
      for iter291 in self.usableCodes:
        oprot.writeString(iter291)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.notUsableCoupons is not None:
      oprot.writeFieldBegin('notUsableCoupons', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.notUsableCoupons))
      for iter292 in self.notUsableCoupons:
        iter292.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 7)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 8)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 9)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.sellers)
    value = (value * 31) ^ hash(self.usableCodes)
    value = (value * 31) ^ hash(self.notUsableCoupons)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.total)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApportionReq:
  """
  Attributes:
   - user_id
   - sellers
   - plat_code
   - sellerId_code_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.MAP, 'sellers', (TType.I64,None,TType.STRUCT,(SellerInfo, SellerInfo.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'plat_code', None, None, ), # 3
    (4, TType.MAP, 'sellerId_code_map', (TType.I64,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, user_id=None, sellers=None, plat_code=None, sellerId_code_map=None,):
    self.user_id = user_id
    self.sellers = sellers
    self.plat_code = plat_code
    self.sellerId_code_map = sellerId_code_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.sellers = {}
          (_ktype294, _vtype295, _size293 ) = iprot.readMapBegin()
          for _i297 in xrange(_size293):
            _key298 = iprot.readI64();
            _val299 = SellerInfo()
            _val299.read(iprot)
            self.sellers[_key298] = _val299
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.plat_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.sellerId_code_map = {}
          (_ktype301, _vtype302, _size300 ) = iprot.readMapBegin()
          for _i304 in xrange(_size300):
            _key305 = iprot.readI64();
            _val306 = iprot.readString();
            self.sellerId_code_map[_key305] = _val306
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApportionReq')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.sellers is not None:
      oprot.writeFieldBegin('sellers', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.sellers))
      for kiter307,viter308 in self.sellers.items():
        oprot.writeI64(kiter307)
        viter308.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.plat_code is not None:
      oprot.writeFieldBegin('plat_code', TType.STRING, 3)
      oprot.writeString(self.plat_code)
      oprot.writeFieldEnd()
    if self.sellerId_code_map is not None:
      oprot.writeFieldBegin('sellerId_code_map', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.sellerId_code_map))
      for kiter309,viter310 in self.sellerId_code_map.items():
        oprot.writeI64(kiter309)
        oprot.writeString(viter310)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.sellers is None:
      raise TProtocol.TProtocolException(message='Required field sellers is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.sellers)
    value = (value * 31) ^ hash(self.plat_code)
    value = (value * 31) ^ hash(self.sellerId_code_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApportionRsp:
  """
  Attributes:
   - error
   - errmsg
   - usableCouponsRsp
   - toggle_cacheCoupon_map
   - sellerId_cacheCoupon_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRUCT, 'usableCouponsRsp', (UsableCouponsRsp, UsableCouponsRsp.thrift_spec), None, ), # 3
    (4, TType.MAP, 'toggle_cacheCoupon_map', (TType.STRING,None,TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'sellerId_cacheCoupon_map', (TType.I64,None,TType.LIST,(TType.STRUCT,(coupon.ttypes.CacheCoupon, coupon.ttypes.CacheCoupon.thrift_spec))), None, ), # 5
  )

  def __init__(self, error=None, errmsg=None, usableCouponsRsp=None, toggle_cacheCoupon_map=None, sellerId_cacheCoupon_map=None,):
    self.error = error
    self.errmsg = errmsg
    self.usableCouponsRsp = usableCouponsRsp
    self.toggle_cacheCoupon_map = toggle_cacheCoupon_map
    self.sellerId_cacheCoupon_map = sellerId_cacheCoupon_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.usableCouponsRsp = UsableCouponsRsp()
          self.usableCouponsRsp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.toggle_cacheCoupon_map = {}
          (_ktype312, _vtype313, _size311 ) = iprot.readMapBegin()
          for _i315 in xrange(_size311):
            _key316 = iprot.readString();
            _val317 = coupon.ttypes.CacheCoupon()
            _val317.read(iprot)
            self.toggle_cacheCoupon_map[_key316] = _val317
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.sellerId_cacheCoupon_map = {}
          (_ktype319, _vtype320, _size318 ) = iprot.readMapBegin()
          for _i322 in xrange(_size318):
            _key323 = iprot.readI64();
            _val324 = []
            (_etype328, _size325) = iprot.readListBegin()
            for _i329 in xrange(_size325):
              _elem330 = coupon.ttypes.CacheCoupon()
              _elem330.read(iprot)
              _val324.append(_elem330)
            iprot.readListEnd()
            self.sellerId_cacheCoupon_map[_key323] = _val324
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApportionRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.usableCouponsRsp is not None:
      oprot.writeFieldBegin('usableCouponsRsp', TType.STRUCT, 3)
      self.usableCouponsRsp.write(oprot)
      oprot.writeFieldEnd()
    if self.toggle_cacheCoupon_map is not None:
      oprot.writeFieldBegin('toggle_cacheCoupon_map', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.toggle_cacheCoupon_map))
      for kiter331,viter332 in self.toggle_cacheCoupon_map.items():
        oprot.writeString(kiter331)
        viter332.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sellerId_cacheCoupon_map is not None:
      oprot.writeFieldBegin('sellerId_cacheCoupon_map', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.sellerId_cacheCoupon_map))
      for kiter333,viter334 in self.sellerId_cacheCoupon_map.items():
        oprot.writeI64(kiter333)
        oprot.writeListBegin(TType.STRUCT, len(viter334))
        for iter335 in viter334:
          iter335.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.usableCouponsRsp)
    value = (value * 31) ^ hash(self.toggle_cacheCoupon_map)
    value = (value * 31) ^ hash(self.sellerId_cacheCoupon_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CacheCouponGroupsReq:
  """
  Attributes:
   - coupon_group_id_set
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'coupon_group_id_set', (TType.I32,None), None, ), # 1
  )

  def __init__(self, coupon_group_id_set=None,):
    self.coupon_group_id_set = coupon_group_id_set

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.coupon_group_id_set = set()
          (_etype339, _size336) = iprot.readSetBegin()
          for _i340 in xrange(_size336):
            _elem341 = iprot.readI32();
            self.coupon_group_id_set.add(_elem341)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CacheCouponGroupsReq')
    if self.coupon_group_id_set is not None:
      oprot.writeFieldBegin('coupon_group_id_set', TType.SET, 1)
      oprot.writeSetBegin(TType.I32, len(self.coupon_group_id_set))
      for iter342 in self.coupon_group_id_set:
        oprot.writeI32(iter342)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coupon_group_id_set is None:
      raise TProtocol.TProtocolException(message='Required field coupon_group_id_set is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id_set)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CacheCouponGroupsRsp:
  """
  Attributes:
   - error
   - errmsg
   - cacheCouponGroupList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.LIST, 'cacheCouponGroupList', (TType.STRUCT,(coupon.ttypes.CacheCouponGroup, coupon.ttypes.CacheCouponGroup.thrift_spec)), None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, cacheCouponGroupList=None,):
    self.error = error
    self.errmsg = errmsg
    self.cacheCouponGroupList = cacheCouponGroupList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cacheCouponGroupList = []
          (_etype346, _size343) = iprot.readListBegin()
          for _i347 in xrange(_size343):
            _elem348 = coupon.ttypes.CacheCouponGroup()
            _elem348.read(iprot)
            self.cacheCouponGroupList.append(_elem348)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CacheCouponGroupsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.cacheCouponGroupList is not None:
      oprot.writeFieldBegin('cacheCouponGroupList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.cacheCouponGroupList))
      for iter349 in self.cacheCouponGroupList:
        iter349.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.cacheCouponGroupList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RelatedCouponGroupsReq:
  """
  Attributes:
   - coupon_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_group_id', None, None, ), # 1
  )

  def __init__(self, coupon_group_id=None,):
    self.coupon_group_id = coupon_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RelatedCouponGroupsReq')
    if self.coupon_group_id is not None:
      oprot.writeFieldBegin('coupon_group_id', TType.I32, 1)
      oprot.writeI32(self.coupon_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coupon_group_id is None:
      raise TProtocol.TProtocolException(message='Required field coupon_group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.coupon_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RelatedCouponGroupsRsp:
  """
  Attributes:
   - error
   - errmsg
   - couponGroupList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.LIST, 'couponGroupList', (TType.STRUCT,(coupon.ttypes.CouponGroup, coupon.ttypes.CouponGroup.thrift_spec)), None, ), # 3
  )

  def __init__(self, error=None, errmsg=None, couponGroupList=None,):
    self.error = error
    self.errmsg = errmsg
    self.couponGroupList = couponGroupList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.couponGroupList = []
          (_etype353, _size350) = iprot.readListBegin()
          for _i354 in xrange(_size350):
            _elem355 = coupon.ttypes.CouponGroup()
            _elem355.read(iprot)
            self.couponGroupList.append(_elem355)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RelatedCouponGroupsRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.couponGroupList is not None:
      oprot.writeFieldBegin('couponGroupList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.couponGroupList))
      for iter356 in self.couponGroupList:
        iter356.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.couponGroupList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabelReq:
  """
  Attributes:
   - ware_label_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ware_label_id', None, None, ), # 1
  )

  def __init__(self, ware_label_id=None,):
    self.ware_label_id = ware_label_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ware_label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabelReq')
    if self.ware_label_id is not None:
      oprot.writeFieldBegin('ware_label_id', TType.I32, 1)
      oprot.writeI32(self.ware_label_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ware_label_id is None:
      raise TProtocol.TProtocolException(message='Required field ware_label_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ware_label_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareLabelRsp:
  """
  Attributes:
   - error
   - errmsg
   - wareLabel
   - waresList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRUCT, 'wareLabel', (coupon.ttypes.WareLabel, coupon.ttypes.WareLabel.thrift_spec), None, ), # 3
    (4, TType.LIST, 'waresList', (TType.STRUCT,(coupon.ttypes.WareLabelWares, coupon.ttypes.WareLabelWares.thrift_spec)), None, ), # 4
  )

  def __init__(self, error=None, errmsg=None, wareLabel=None, waresList=None,):
    self.error = error
    self.errmsg = errmsg
    self.wareLabel = wareLabel
    self.waresList = waresList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.wareLabel = coupon.ttypes.WareLabel()
          self.wareLabel.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.waresList = []
          (_etype360, _size357) = iprot.readListBegin()
          for _i361 in xrange(_size357):
            _elem362 = coupon.ttypes.WareLabelWares()
            _elem362.read(iprot)
            self.waresList.append(_elem362)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareLabelRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.wareLabel is not None:
      oprot.writeFieldBegin('wareLabel', TType.STRUCT, 3)
      self.wareLabel.write(oprot)
      oprot.writeFieldEnd()
    if self.waresList is not None:
      oprot.writeFieldBegin('waresList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.waresList))
      for iter363 in self.waresList:
        iter363.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.wareLabel)
    value = (value * 31) ^ hash(self.waresList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerTimeReq:
  """
  Attributes:
   - local_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'local_time', None, None, ), # 1
  )

  def __init__(self, local_time=None,):
    self.local_time = local_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.local_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerTimeReq')
    if self.local_time is not None:
      oprot.writeFieldBegin('local_time', TType.I32, 1)
      oprot.writeI32(self.local_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.local_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerTimeRsp:
  """
  Attributes:
   - error
   - errmsg
   - local_time
   - server_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.I32, 'local_time', None, None, ), # 3
    (4, TType.I32, 'server_time', None, None, ), # 4
  )

  def __init__(self, error=None, errmsg=None, local_time=None, server_time=None,):
    self.error = error
    self.errmsg = errmsg
    self.local_time = local_time
    self.server_time = server_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.local_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.server_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerTimeRsp')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.local_time is not None:
      oprot.writeFieldBegin('local_time', TType.I32, 3)
      oprot.writeI32(self.local_time)
      oprot.writeFieldEnd()
    if self.server_time is not None:
      oprot.writeFieldBegin('server_time', TType.I32, 4)
      oprot.writeI32(self.server_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.local_time)
    value = (value * 31) ^ hash(self.server_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
