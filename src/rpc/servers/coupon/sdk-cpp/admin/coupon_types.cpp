/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "coupon_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace coupon {

int _kErrorValues[] = {
  Error::OK,
  Error::FAILED,
  Error::NO_DATA_YOU_EXPECTED,
  Error::MYSQL_DISCONNECTED,
  Error::MYSQL_EXECUTE_ERROR,
  Error::REDIS_DISCONNECTED,
  Error::REDIS_EXECUTE_ERROR,
  Error::COUPON_GROUP_NOT_EXISTS,
  Error::USER_NOT_EXISTS,
  Error::SCENE_TYPE_NOT_EXISTS,
  Error::NO_COUPON_LEFT,
  Error::NOT_IN_DRAW_TIME,
  Error::DRAWN_ALL_YOU_CAN,
  Error::CODE_ENCODE_ERROR,
  Error::CODE_DECODE_ERROR,
  Error::INVALID_PARAMS,
  Error::USER_HAVENOT_THE_CODE,
  Error::NOT_BEEN_FROZEN,
  Error::COUPON_ID_NOT_EXISTS,
  Error::ORDER_ID_NOT_MATCH,
  Error::COUPON_IN_USE,
  Error::COUPON_EXPIRED,
  Error::COUPON_NOT_USABLE,
  Error::COUPON_NOT_PLATFORM,
  Error::COUPON_NOT_SHOPTYPE,
  Error::COUPON_NOT_OF_THIS_SHOP,
  Error::CAN_NOT_GET_THE_LOCK,
  Error::INVALID_ARGOT,
  Error::OUTLOAD_COUNT,
  Error::ILLEGAL_SCENE_TYPE,
  Error::COUPON_NOT_EXISTS,
  Error::INVALID_CODE,
  Error::COUPON_HAS_BEEN_DRAWN,
  Error::COUPON_HAS_BEEN_ROBBED,
  Error::ARGOT_IN_180_DAYS,
  Error::DRAW_TIME_NOT_REACH,
  Error::DRAW_TIME_EXPIRED,
  Error::NO_USABLE_COUPON
};
const char* _kErrorNames[] = {
  "OK",
  "FAILED",
  "NO_DATA_YOU_EXPECTED",
  "MYSQL_DISCONNECTED",
  "MYSQL_EXECUTE_ERROR",
  "REDIS_DISCONNECTED",
  "REDIS_EXECUTE_ERROR",
  "COUPON_GROUP_NOT_EXISTS",
  "USER_NOT_EXISTS",
  "SCENE_TYPE_NOT_EXISTS",
  "NO_COUPON_LEFT",
  "NOT_IN_DRAW_TIME",
  "DRAWN_ALL_YOU_CAN",
  "CODE_ENCODE_ERROR",
  "CODE_DECODE_ERROR",
  "INVALID_PARAMS",
  "USER_HAVENOT_THE_CODE",
  "NOT_BEEN_FROZEN",
  "COUPON_ID_NOT_EXISTS",
  "ORDER_ID_NOT_MATCH",
  "COUPON_IN_USE",
  "COUPON_EXPIRED",
  "COUPON_NOT_USABLE",
  "COUPON_NOT_PLATFORM",
  "COUPON_NOT_SHOPTYPE",
  "COUPON_NOT_OF_THIS_SHOP",
  "CAN_NOT_GET_THE_LOCK",
  "INVALID_ARGOT",
  "OUTLOAD_COUNT",
  "ILLEGAL_SCENE_TYPE",
  "COUPON_NOT_EXISTS",
  "INVALID_CODE",
  "COUPON_HAS_BEEN_DRAWN",
  "COUPON_HAS_BEEN_ROBBED",
  "ARGOT_IN_180_DAYS",
  "DRAW_TIME_NOT_REACH",
  "DRAW_TIME_EXPIRED",
  "NO_USABLE_COUPON"
};
const std::map<int, const char*> _Error_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(38, _kErrorValues, _kErrorNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


DefaultConfig::~DefaultConfig() throw() {
}


void DefaultConfig::__set_default_jump_label(const std::string& val) {
  this->default_jump_label = val;
}

void DefaultConfig::__set_default_jump_data(const std::string& val) {
  this->default_jump_data = val;
}

void DefaultConfig::__set_default_url(const std::string& val) {
  this->default_url = val;
}

void DefaultConfig::__set_default_switch(const bool val) {
  this->default_switch = val;
}

void DefaultConfig::__set_default_text(const std::string& val) {
  this->default_text = val;
}

const char* DefaultConfig::ascii_fingerprint = "D15635F063E02B657E6FB6315CC06E70";
const uint8_t DefaultConfig::binary_fingerprint[16] = {0xD1,0x56,0x35,0xF0,0x63,0xE0,0x2B,0x65,0x7E,0x6F,0xB6,0x31,0x5C,0xC0,0x6E,0x70};

uint32_t DefaultConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_jump_label);
          this->__isset.default_jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_jump_data);
          this->__isset.default_jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_url);
          this->__isset.default_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->default_switch);
          this->__isset.default_switch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_text);
          this->__isset.default_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DefaultConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DefaultConfig");

  xfer += oprot->writeFieldBegin("default_jump_label", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->default_jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_jump_data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->default_jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->default_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_switch", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->default_switch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_text", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->default_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DefaultConfig &a, DefaultConfig &b) {
  using ::std::swap;
  swap(a.default_jump_label, b.default_jump_label);
  swap(a.default_jump_data, b.default_jump_data);
  swap(a.default_url, b.default_url);
  swap(a.default_switch, b.default_switch);
  swap(a.default_text, b.default_text);
  swap(a.__isset, b.__isset);
}

DefaultConfig::DefaultConfig(const DefaultConfig& other0) {
  default_jump_label = other0.default_jump_label;
  default_jump_data = other0.default_jump_data;
  default_url = other0.default_url;
  default_switch = other0.default_switch;
  default_text = other0.default_text;
  __isset = other0.__isset;
}
DefaultConfig& DefaultConfig::operator=(const DefaultConfig& other1) {
  default_jump_label = other1.default_jump_label;
  default_jump_data = other1.default_jump_data;
  default_url = other1.default_url;
  default_switch = other1.default_switch;
  default_text = other1.default_text;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DefaultConfig& obj) {
  using apache::thrift::to_string;
  out << "DefaultConfig(";
  out << "default_jump_label=" << to_string(obj.default_jump_label);
  out << ", " << "default_jump_data=" << to_string(obj.default_jump_data);
  out << ", " << "default_url=" << to_string(obj.default_url);
  out << ", " << "default_switch=" << to_string(obj.default_switch);
  out << ", " << "default_text=" << to_string(obj.default_text);
  out << ")";
  return out;
}


WareLabel::~WareLabel() throw() {
}


void WareLabel::__set_name(const std::string& val) {
  this->name = val;
}

void WareLabel::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void WareLabel::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void WareLabel::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void WareLabel::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void WareLabel::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void WareLabel::__set_create_man(const std::string& val) {
  this->create_man = val;
}

const char* WareLabel::ascii_fingerprint = "7AC6F6A26D79CCDFC42B800865AE39ED";
const uint8_t WareLabel::binary_fingerprint[16] = {0x7A,0xC6,0xF6,0xA2,0x6D,0x79,0xCC,0xDF,0xC4,0x2B,0x80,0x08,0x65,0xAE,0x39,0xED};

uint32_t WareLabel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          this->__isset.scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          this->__isset.sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->create_man);
          this->__isset.create_man = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabel");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_man", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->create_man);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabel &a, WareLabel &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.create_time, b.create_time);
  swap(a.update_time, b.update_time);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.create_man, b.create_man);
  swap(a.__isset, b.__isset);
}

WareLabel::WareLabel(const WareLabel& other2) {
  name = other2.name;
  scope_type = other2.scope_type;
  sub_type = other2.sub_type;
  create_time = other2.create_time;
  update_time = other2.update_time;
  ware_label_id = other2.ware_label_id;
  create_man = other2.create_man;
  __isset = other2.__isset;
}
WareLabel& WareLabel::operator=(const WareLabel& other3) {
  name = other3.name;
  scope_type = other3.scope_type;
  sub_type = other3.sub_type;
  create_time = other3.create_time;
  update_time = other3.update_time;
  ware_label_id = other3.ware_label_id;
  create_man = other3.create_man;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabel& obj) {
  using apache::thrift::to_string;
  out << "WareLabel(";
  out << "name=" << to_string(obj.name);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "create_man=" << to_string(obj.create_man);
  out << ")";
  return out;
}


WareLabelWares::~WareLabelWares() throw() {
}


void WareLabelWares::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void WareLabelWares::__set_ware_id(const int64_t val) {
  this->ware_id = val;
}

void WareLabelWares::__set_ware_slug(const std::string& val) {
  this->ware_slug = val;
}

const char* WareLabelWares::ascii_fingerprint = "A260D3573D95B3BD751F6453CCF5CDF7";
const uint8_t WareLabelWares::binary_fingerprint[16] = {0xA2,0x60,0xD3,0x57,0x3D,0x95,0xB3,0xBD,0x75,0x1F,0x64,0x53,0xCC,0xF5,0xCD,0xF7};

uint32_t WareLabelWares::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ware_id);
          this->__isset.ware_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ware_slug);
          this->__isset.ware_slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWares::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWares");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ware_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_slug", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ware_slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWares &a, WareLabelWares &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.ware_id, b.ware_id);
  swap(a.ware_slug, b.ware_slug);
  swap(a.__isset, b.__isset);
}

WareLabelWares::WareLabelWares(const WareLabelWares& other4) {
  ware_label_id = other4.ware_label_id;
  ware_id = other4.ware_id;
  ware_slug = other4.ware_slug;
  __isset = other4.__isset;
}
WareLabelWares& WareLabelWares::operator=(const WareLabelWares& other5) {
  ware_label_id = other5.ware_label_id;
  ware_id = other5.ware_id;
  ware_slug = other5.ware_slug;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWares& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWares(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "ware_id=" << to_string(obj.ware_id);
  out << ", " << "ware_slug=" << to_string(obj.ware_slug);
  out << ")";
  return out;
}


WareLabelWaresCache::~WareLabelWaresCache() throw() {
}


void WareLabelWaresCache::__set_cache(const std::vector<WareLabelWares> & val) {
  this->cache = val;
}

const char* WareLabelWaresCache::ascii_fingerprint = "D47ED972F5454274FCA5B3867B623D21";
const uint8_t WareLabelWaresCache::binary_fingerprint[16] = {0xD4,0x7E,0xD9,0x72,0xF5,0x45,0x42,0x74,0xFC,0xA5,0xB3,0x86,0x7B,0x62,0x3D,0x21};

uint32_t WareLabelWaresCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cache.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->cache.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->cache[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresCache");

  xfer += oprot->writeFieldBegin("cache", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cache.size()));
    std::vector<WareLabelWares> ::const_iterator _iter11;
    for (_iter11 = this->cache.begin(); _iter11 != this->cache.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresCache &a, WareLabelWaresCache &b) {
  using ::std::swap;
  swap(a.cache, b.cache);
  swap(a.__isset, b.__isset);
}

WareLabelWaresCache::WareLabelWaresCache(const WareLabelWaresCache& other12) {
  cache = other12.cache;
  __isset = other12.__isset;
}
WareLabelWaresCache& WareLabelWaresCache::operator=(const WareLabelWaresCache& other13) {
  cache = other13.cache;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresCache& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresCache(";
  out << "cache=" << to_string(obj.cache);
  out << ")";
  return out;
}


CouponGroup::~CouponGroup() throw() {
}


void CouponGroup::__set_name(const std::string& val) {
  this->name = val;
}

void CouponGroup::__set_title(const std::string& val) {
  this->title = val;
}

void CouponGroup::__set_comment(const std::string& val) {
  this->comment = val;
}

void CouponGroup::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void CouponGroup::__set_favor_type(const int32_t val) {
  this->favor_type = val;
}

void CouponGroup::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void CouponGroup::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void CouponGroup::__set_scene_type(const int32_t val) {
  this->scene_type = val;
}

void CouponGroup::__set_full(const double val) {
  this->full = val;
}

void CouponGroup::__set_favor(const double val) {
  this->favor = val;
}

void CouponGroup::__set_rate(const double val) {
  this->rate = val;
}

void CouponGroup::__set_argot(const std::string& val) {
  this->argot = val;
}

void CouponGroup::__set_max_count(const int32_t val) {
  this->max_count = val;
}

void CouponGroup::__set_delta(const int32_t val) {
  this->delta = val;
}

void CouponGroup::__set_drawn_count(const int32_t val) {
  this->drawn_count = val;
}

void CouponGroup::__set_payed_count(const int32_t val) {
  this->payed_count = val;
}

void CouponGroup::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void CouponGroup::__set_can_draw_count(const int32_t val) {
  this->can_draw_count = val;
}

void CouponGroup::__set_start_draw_time(const int32_t val) {
  this->start_draw_time = val;
}

void CouponGroup::__set_end_draw_time(const int32_t val) {
  this->end_draw_time = val;
}

void CouponGroup::__set_is_duration_type(const bool val) {
  this->is_duration_type = val;
}

void CouponGroup::__set_duration_value(const int32_t val) {
  this->duration_value = val;
}

void CouponGroup::__set_start_use_time(const int32_t val) {
  this->start_use_time = val;
}

void CouponGroup::__set_end_use_time(const int32_t val) {
  this->end_use_time = val;
}

void CouponGroup::__set_verify_status(const int32_t val) {
  this->verify_status = val;
}

void CouponGroup::__set_applicant(const std::string& val) {
  this->applicant = val;
}

void CouponGroup::__set_approver(const std::string& val) {
  this->approver = val;
}

void CouponGroup::__set_modifier(const std::string& val) {
  this->modifier = val;
}

void CouponGroup::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void CouponGroup::__set_url(const std::string& val) {
  this->url = val;
}

void CouponGroup::__set_id(const int32_t val) {
  this->id = val;
}

void CouponGroup::__set_img(const std::string& val) {
  this->img = val;
}

void CouponGroup::__set_slug(const std::string& val) {
  this->slug = val;
}

void CouponGroup::__set_delta_verify_status(const int32_t val) {
  this->delta_verify_status = val;
}

void CouponGroup::__set_img_width(const int32_t val) {
  this->img_width = val;
}

void CouponGroup::__set_img_height(const int32_t val) {
  this->img_height = val;
}

void CouponGroup::__set_button_text(const std::string& val) {
  this->button_text = val;
}

void CouponGroup::__set_button_jump(const std::string& val) {
  this->button_jump = val;
}

void CouponGroup::__set_jump_label(const std::string& val) {
  this->jump_label = val;
}

void CouponGroup::__set_jump_data(const std::string& val) {
  this->jump_data = val;
}

void CouponGroup::__set_argot_jump_label(const std::string& val) {
  this->argot_jump_label = val;
}

void CouponGroup::__set_argot_jump_data(const std::string& val) {
  this->argot_jump_data = val;
}

void CouponGroup::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void CouponGroup::__set_version(const int32_t val) {
  this->version = val;
}

void CouponGroup::__set_description(const std::string& val) {
  this->description = val;
}

const char* CouponGroup::ascii_fingerprint = "545D2403809CEC1F51272275E448138B";
const uint8_t CouponGroup::binary_fingerprint[16] = {0x54,0x5D,0x24,0x03,0x80,0x9C,0xEC,0x1F,0x51,0x27,0x22,0x75,0xE4,0x48,0x13,0x8B};

uint32_t CouponGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->favor_type);
          this->__isset.favor_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          this->__isset.scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          this->__isset.sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scene_type);
          this->__isset.scene_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->full);
          this->__isset.full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor);
          this->__isset.favor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          this->__isset.argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_count);
          this->__isset.max_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delta);
          this->__isset.delta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->drawn_count);
          this->__isset.drawn_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->payed_count);
          this->__isset.payed_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->can_draw_count);
          this->__isset.can_draw_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_draw_time);
          this->__isset.start_draw_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_draw_time);
          this->__isset.end_draw_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_duration_type);
          this->__isset.is_duration_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->duration_value);
          this->__isset.duration_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_use_time);
          this->__isset.start_use_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_use_time);
          this->__isset.end_use_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->verify_status);
          this->__isset.verify_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicant);
          this->__isset.applicant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->approver);
          this->__isset.approver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifier);
          this->__isset.modifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->img);
          this->__isset.img = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slug);
          this->__isset.slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delta_verify_status);
          this->__isset.delta_verify_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_width);
          this->__isset.img_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_height);
          this->__isset.img_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_text);
          this->__isset.button_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_jump);
          this->__isset.button_jump = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_label);
          this->__isset.jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_data);
          this->__isset.jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_label);
          this->__isset.argot_jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_data);
          this->__isset.argot_jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CouponGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponGroup");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->favor_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_type", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->scene_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->full);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->favor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_count", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->max_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delta", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->delta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drawn_count", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->drawn_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payed_count", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->payed_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("can_draw_count", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->can_draw_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_draw_time", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->start_draw_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_draw_time", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->end_draw_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_duration_type", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->is_duration_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration_value", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->duration_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_use_time", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->start_use_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_use_time", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->end_use_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verify_status", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->verify_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicant", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->applicant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approver", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->approver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifier", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->modifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 29);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->img);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slug", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delta_verify_status", ::apache::thrift::protocol::T_I32, 34);
  xfer += oprot->writeI32(this->delta_verify_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_width", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->img_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_height", ::apache::thrift::protocol::T_I32, 36);
  xfer += oprot->writeI32(this->img_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_text", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->button_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_jump", ::apache::thrift::protocol::T_STRING, 38);
  xfer += oprot->writeString(this->button_jump);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_label", ::apache::thrift::protocol::T_STRING, 39);
  xfer += oprot->writeString(this->jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_data", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_label", ::apache::thrift::protocol::T_STRING, 41);
  xfer += oprot->writeString(this->argot_jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_data", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->argot_jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 43);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 44);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 45);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponGroup &a, CouponGroup &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.title, b.title);
  swap(a.comment, b.comment);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.favor_type, b.favor_type);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.scene_type, b.scene_type);
  swap(a.full, b.full);
  swap(a.favor, b.favor);
  swap(a.rate, b.rate);
  swap(a.argot, b.argot);
  swap(a.max_count, b.max_count);
  swap(a.delta, b.delta);
  swap(a.drawn_count, b.drawn_count);
  swap(a.payed_count, b.payed_count);
  swap(a.create_time, b.create_time);
  swap(a.can_draw_count, b.can_draw_count);
  swap(a.start_draw_time, b.start_draw_time);
  swap(a.end_draw_time, b.end_draw_time);
  swap(a.is_duration_type, b.is_duration_type);
  swap(a.duration_value, b.duration_value);
  swap(a.start_use_time, b.start_use_time);
  swap(a.end_use_time, b.end_use_time);
  swap(a.verify_status, b.verify_status);
  swap(a.applicant, b.applicant);
  swap(a.approver, b.approver);
  swap(a.modifier, b.modifier);
  swap(a.seller_id, b.seller_id);
  swap(a.url, b.url);
  swap(a.id, b.id);
  swap(a.img, b.img);
  swap(a.slug, b.slug);
  swap(a.delta_verify_status, b.delta_verify_status);
  swap(a.img_width, b.img_width);
  swap(a.img_height, b.img_height);
  swap(a.button_text, b.button_text);
  swap(a.button_jump, b.button_jump);
  swap(a.jump_label, b.jump_label);
  swap(a.jump_data, b.jump_data);
  swap(a.argot_jump_label, b.argot_jump_label);
  swap(a.argot_jump_data, b.argot_jump_data);
  swap(a.update_time, b.update_time);
  swap(a.version, b.version);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

CouponGroup::CouponGroup(const CouponGroup& other14) {
  name = other14.name;
  title = other14.title;
  comment = other14.comment;
  ware_label_id = other14.ware_label_id;
  favor_type = other14.favor_type;
  scope_type = other14.scope_type;
  sub_type = other14.sub_type;
  scene_type = other14.scene_type;
  full = other14.full;
  favor = other14.favor;
  rate = other14.rate;
  argot = other14.argot;
  max_count = other14.max_count;
  delta = other14.delta;
  drawn_count = other14.drawn_count;
  payed_count = other14.payed_count;
  create_time = other14.create_time;
  can_draw_count = other14.can_draw_count;
  start_draw_time = other14.start_draw_time;
  end_draw_time = other14.end_draw_time;
  is_duration_type = other14.is_duration_type;
  duration_value = other14.duration_value;
  start_use_time = other14.start_use_time;
  end_use_time = other14.end_use_time;
  verify_status = other14.verify_status;
  applicant = other14.applicant;
  approver = other14.approver;
  modifier = other14.modifier;
  seller_id = other14.seller_id;
  url = other14.url;
  id = other14.id;
  img = other14.img;
  slug = other14.slug;
  delta_verify_status = other14.delta_verify_status;
  img_width = other14.img_width;
  img_height = other14.img_height;
  button_text = other14.button_text;
  button_jump = other14.button_jump;
  jump_label = other14.jump_label;
  jump_data = other14.jump_data;
  argot_jump_label = other14.argot_jump_label;
  argot_jump_data = other14.argot_jump_data;
  update_time = other14.update_time;
  version = other14.version;
  description = other14.description;
  __isset = other14.__isset;
}
CouponGroup& CouponGroup::operator=(const CouponGroup& other15) {
  name = other15.name;
  title = other15.title;
  comment = other15.comment;
  ware_label_id = other15.ware_label_id;
  favor_type = other15.favor_type;
  scope_type = other15.scope_type;
  sub_type = other15.sub_type;
  scene_type = other15.scene_type;
  full = other15.full;
  favor = other15.favor;
  rate = other15.rate;
  argot = other15.argot;
  max_count = other15.max_count;
  delta = other15.delta;
  drawn_count = other15.drawn_count;
  payed_count = other15.payed_count;
  create_time = other15.create_time;
  can_draw_count = other15.can_draw_count;
  start_draw_time = other15.start_draw_time;
  end_draw_time = other15.end_draw_time;
  is_duration_type = other15.is_duration_type;
  duration_value = other15.duration_value;
  start_use_time = other15.start_use_time;
  end_use_time = other15.end_use_time;
  verify_status = other15.verify_status;
  applicant = other15.applicant;
  approver = other15.approver;
  modifier = other15.modifier;
  seller_id = other15.seller_id;
  url = other15.url;
  id = other15.id;
  img = other15.img;
  slug = other15.slug;
  delta_verify_status = other15.delta_verify_status;
  img_width = other15.img_width;
  img_height = other15.img_height;
  button_text = other15.button_text;
  button_jump = other15.button_jump;
  jump_label = other15.jump_label;
  jump_data = other15.jump_data;
  argot_jump_label = other15.argot_jump_label;
  argot_jump_data = other15.argot_jump_data;
  update_time = other15.update_time;
  version = other15.version;
  description = other15.description;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponGroup& obj) {
  using apache::thrift::to_string;
  out << "CouponGroup(";
  out << "name=" << to_string(obj.name);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "comment=" << to_string(obj.comment);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "favor_type=" << to_string(obj.favor_type);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "scene_type=" << to_string(obj.scene_type);
  out << ", " << "full=" << to_string(obj.full);
  out << ", " << "favor=" << to_string(obj.favor);
  out << ", " << "rate=" << to_string(obj.rate);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ", " << "max_count=" << to_string(obj.max_count);
  out << ", " << "delta=" << to_string(obj.delta);
  out << ", " << "drawn_count=" << to_string(obj.drawn_count);
  out << ", " << "payed_count=" << to_string(obj.payed_count);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "can_draw_count=" << to_string(obj.can_draw_count);
  out << ", " << "start_draw_time=" << to_string(obj.start_draw_time);
  out << ", " << "end_draw_time=" << to_string(obj.end_draw_time);
  out << ", " << "is_duration_type=" << to_string(obj.is_duration_type);
  out << ", " << "duration_value=" << to_string(obj.duration_value);
  out << ", " << "start_use_time=" << to_string(obj.start_use_time);
  out << ", " << "end_use_time=" << to_string(obj.end_use_time);
  out << ", " << "verify_status=" << to_string(obj.verify_status);
  out << ", " << "applicant=" << to_string(obj.applicant);
  out << ", " << "approver=" << to_string(obj.approver);
  out << ", " << "modifier=" << to_string(obj.modifier);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "url=" << to_string(obj.url);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "img=" << to_string(obj.img);
  out << ", " << "slug=" << to_string(obj.slug);
  out << ", " << "delta_verify_status=" << to_string(obj.delta_verify_status);
  out << ", " << "img_width=" << to_string(obj.img_width);
  out << ", " << "img_height=" << to_string(obj.img_height);
  out << ", " << "button_text=" << to_string(obj.button_text);
  out << ", " << "button_jump=" << to_string(obj.button_jump);
  out << ", " << "jump_label=" << to_string(obj.jump_label);
  out << ", " << "jump_data=" << to_string(obj.jump_data);
  out << ", " << "argot_jump_label=" << to_string(obj.argot_jump_label);
  out << ", " << "argot_jump_data=" << to_string(obj.argot_jump_data);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "version=" << to_string(obj.version);
  out << ", " << "description=" << to_string(obj.description);
  out << ")";
  return out;
}


Coupon::~Coupon() throw() {
}


void Coupon::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void Coupon::__set_code(const std::string& val) {
  this->code = val;
}

void Coupon::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void Coupon::__set_order_id(const std::string& val) {
  this->order_id = val;
}

void Coupon::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void Coupon::__set_order_create_time(const int32_t val) {
  this->order_create_time = val;
}

void Coupon::__set_drawn_time(const int32_t val) {
  this->drawn_time = val;
}

void Coupon::__set_frozen_time(const int32_t val) {
  this->frozen_time = val;
}

void Coupon::__set_payed_time(const int32_t val) {
  this->payed_time = val;
}

void Coupon::__set_coupon_id(const int32_t val) {
  this->coupon_id = val;
}

const char* Coupon::ascii_fingerprint = "6600053C119214796A5AEF6A85A2DD68";
const uint8_t Coupon::binary_fingerprint[16] = {0x66,0x00,0x05,0x3C,0x11,0x92,0x14,0x79,0x6A,0x5A,0xEF,0x6A,0x85,0xA2,0xDD,0x68};

uint32_t Coupon::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          this->__isset.coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_id);
          this->__isset.order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order_create_time);
          this->__isset.order_create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->drawn_time);
          this->__isset.drawn_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->frozen_time);
          this->__isset.frozen_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->payed_time);
          this->__isset.payed_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_id);
          this->__isset.coupon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Coupon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Coupon");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_create_time", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->order_create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drawn_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->drawn_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("frozen_time", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->frozen_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payed_time", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->payed_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_id", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->coupon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Coupon &a, Coupon &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.code, b.code);
  swap(a.user_id, b.user_id);
  swap(a.order_id, b.order_id);
  swap(a.create_time, b.create_time);
  swap(a.order_create_time, b.order_create_time);
  swap(a.drawn_time, b.drawn_time);
  swap(a.frozen_time, b.frozen_time);
  swap(a.payed_time, b.payed_time);
  swap(a.coupon_id, b.coupon_id);
  swap(a.__isset, b.__isset);
}

Coupon::Coupon(const Coupon& other16) {
  coupon_group_id = other16.coupon_group_id;
  code = other16.code;
  user_id = other16.user_id;
  order_id = other16.order_id;
  create_time = other16.create_time;
  order_create_time = other16.order_create_time;
  drawn_time = other16.drawn_time;
  frozen_time = other16.frozen_time;
  payed_time = other16.payed_time;
  coupon_id = other16.coupon_id;
  __isset = other16.__isset;
}
Coupon& Coupon::operator=(const Coupon& other17) {
  coupon_group_id = other17.coupon_group_id;
  code = other17.code;
  user_id = other17.user_id;
  order_id = other17.order_id;
  create_time = other17.create_time;
  order_create_time = other17.order_create_time;
  drawn_time = other17.drawn_time;
  frozen_time = other17.frozen_time;
  payed_time = other17.payed_time;
  coupon_id = other17.coupon_id;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Coupon& obj) {
  using apache::thrift::to_string;
  out << "Coupon(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "code=" << to_string(obj.code);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "order_id=" << to_string(obj.order_id);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "order_create_time=" << to_string(obj.order_create_time);
  out << ", " << "drawn_time=" << to_string(obj.drawn_time);
  out << ", " << "frozen_time=" << to_string(obj.frozen_time);
  out << ", " << "payed_time=" << to_string(obj.payed_time);
  out << ", " << "coupon_id=" << to_string(obj.coupon_id);
  out << ")";
  return out;
}


UserCoupon::~UserCoupon() throw() {
}


void UserCoupon::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void UserCoupon::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void UserCoupon::__set_coupon_id(const int32_t val) {
  this->coupon_id = val;
}

void UserCoupon::__set_code(const std::string& val) {
  this->code = val;
}

void UserCoupon::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void UserCoupon::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void UserCoupon::__set_use_status(const int32_t val) {
  this->use_status = val;
}

void UserCoupon::__set_client_id(const std::string& val) {
  this->client_id = val;
}

void UserCoupon::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void UserCoupon::__set_channel_id(const int32_t val) {
  this->channel_id = val;
}

const char* UserCoupon::ascii_fingerprint = "74418F3E9C6D371D643ACBED53B50708";
const uint8_t UserCoupon::binary_fingerprint[16] = {0x74,0x41,0x8F,0x3E,0x9C,0x6D,0x37,0x1D,0x64,0x3A,0xCB,0xED,0x53,0xB5,0x07,0x08};

uint32_t UserCoupon::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          this->__isset.coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_id);
          this->__isset.coupon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_status);
          this->__isset.use_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_id);
          this->__isset.client_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channel_id);
          this->__isset.channel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserCoupon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserCoupon");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->coupon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->use_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_id", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->client_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel_id", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->channel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserCoupon &a, UserCoupon &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.coupon_id, b.coupon_id);
  swap(a.code, b.code);
  swap(a.create_time, b.create_time);
  swap(a.update_time, b.update_time);
  swap(a.use_status, b.use_status);
  swap(a.client_id, b.client_id);
  swap(a.seller_id, b.seller_id);
  swap(a.channel_id, b.channel_id);
  swap(a.__isset, b.__isset);
}

UserCoupon::UserCoupon(const UserCoupon& other18) {
  user_id = other18.user_id;
  coupon_group_id = other18.coupon_group_id;
  coupon_id = other18.coupon_id;
  code = other18.code;
  create_time = other18.create_time;
  update_time = other18.update_time;
  use_status = other18.use_status;
  client_id = other18.client_id;
  seller_id = other18.seller_id;
  channel_id = other18.channel_id;
  __isset = other18.__isset;
}
UserCoupon& UserCoupon::operator=(const UserCoupon& other19) {
  user_id = other19.user_id;
  coupon_group_id = other19.coupon_group_id;
  coupon_id = other19.coupon_id;
  code = other19.code;
  create_time = other19.create_time;
  update_time = other19.update_time;
  use_status = other19.use_status;
  client_id = other19.client_id;
  seller_id = other19.seller_id;
  channel_id = other19.channel_id;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserCoupon& obj) {
  using apache::thrift::to_string;
  out << "UserCoupon(";
  out << "user_id=" << to_string(obj.user_id);
  out << ", " << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "coupon_id=" << to_string(obj.coupon_id);
  out << ", " << "code=" << to_string(obj.code);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "use_status=" << to_string(obj.use_status);
  out << ", " << "client_id=" << to_string(obj.client_id);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "channel_id=" << to_string(obj.channel_id);
  out << ")";
  return out;
}


CacheCoupon::~CacheCoupon() throw() {
}


void CacheCoupon::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void CacheCoupon::__set_code(const std::string& val) {
  this->code = val;
}

void CacheCoupon::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void CacheCoupon::__set_order_id(const std::string& val) {
  this->order_id = val;
}

void CacheCoupon::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void CacheCoupon::__set_order_create_time(const int32_t val) {
  this->order_create_time = val;
}

void CacheCoupon::__set_drawn_time(const int32_t val) {
  this->drawn_time = val;
}

void CacheCoupon::__set_frozen_time(const int32_t val) {
  this->frozen_time = val;
}

void CacheCoupon::__set_payed_time(const int32_t val) {
  this->payed_time = val;
}

void CacheCoupon::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void CacheCoupon::__set_use_status(const int32_t val) {
  this->use_status = val;
}

void CacheCoupon::__set_start_use_time(const int32_t val) {
  this->start_use_time = val;
}

void CacheCoupon::__set_end_use_time(const int32_t val) {
  this->end_use_time = val;
}

void CacheCoupon::__set_coupon_id(const int32_t val) {
  this->coupon_id = val;
}

void CacheCoupon::__set_name(const std::string& val) {
  this->name = val;
}

void CacheCoupon::__set_title(const std::string& val) {
  this->title = val;
}

void CacheCoupon::__set_comment(const std::string& val) {
  this->comment = val;
}

void CacheCoupon::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void CacheCoupon::__set_favor_type(const int32_t val) {
  this->favor_type = val;
}

void CacheCoupon::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void CacheCoupon::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void CacheCoupon::__set_scene_type(const int32_t val) {
  this->scene_type = val;
}

void CacheCoupon::__set_full(const double val) {
  this->full = val;
}

void CacheCoupon::__set_favor(const double val) {
  this->favor = val;
}

void CacheCoupon::__set_rate(const double val) {
  this->rate = val;
}

void CacheCoupon::__set_argot(const std::string& val) {
  this->argot = val;
}

void CacheCoupon::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void CacheCoupon::__set_url(const std::string& val) {
  this->url = val;
}

void CacheCoupon::__set_img(const std::string& val) {
  this->img = val;
}

void CacheCoupon::__set_client_id(const std::string& val) {
  this->client_id = val;
}

void CacheCoupon::__set_slug(const std::string& val) {
  this->slug = val;
}

void CacheCoupon::__set_img_width(const int32_t val) {
  this->img_width = val;
}

void CacheCoupon::__set_img_height(const int32_t val) {
  this->img_height = val;
}

void CacheCoupon::__set_button_text(const std::string& val) {
  this->button_text = val;
}

void CacheCoupon::__set_button_jump(const std::string& val) {
  this->button_jump = val;
}

void CacheCoupon::__set_jump_label(const std::string& val) {
  this->jump_label = val;
}

void CacheCoupon::__set_jump_data(const std::string& val) {
  this->jump_data = val;
}

void CacheCoupon::__set_argot_jump_label(const std::string& val) {
  this->argot_jump_label = val;
}

void CacheCoupon::__set_argot_jump_data(const std::string& val) {
  this->argot_jump_data = val;
}

void CacheCoupon::__set_version(const int32_t val) {
  this->version = val;
}

void CacheCoupon::__set_description(const std::string& val) {
  this->description = val;
}

void CacheCoupon::__set_type(const int32_t val) {
  this->type = val;
}

void CacheCoupon::__set_value(const double val) {
  this->value = val;
}

const char* CacheCoupon::ascii_fingerprint = "4EFC37979FDDC002C5D37493D68177DA";
const uint8_t CacheCoupon::binary_fingerprint[16] = {0x4E,0xFC,0x37,0x97,0x9F,0xDD,0xC0,0x02,0xC5,0xD3,0x74,0x93,0xD6,0x81,0x77,0xDA};

uint32_t CacheCoupon::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          this->__isset.coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_id);
          this->__isset.order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order_create_time);
          this->__isset.order_create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->drawn_time);
          this->__isset.drawn_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->frozen_time);
          this->__isset.frozen_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->payed_time);
          this->__isset.payed_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_status);
          this->__isset.use_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_use_time);
          this->__isset.start_use_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_use_time);
          this->__isset.end_use_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_id);
          this->__isset.coupon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->favor_type);
          this->__isset.favor_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          this->__isset.scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          this->__isset.sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scene_type);
          this->__isset.scene_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->full);
          this->__isset.full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor);
          this->__isset.favor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          this->__isset.argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->img);
          this->__isset.img = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_id);
          this->__isset.client_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slug);
          this->__isset.slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_width);
          this->__isset.img_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_height);
          this->__isset.img_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_text);
          this->__isset.button_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_jump);
          this->__isset.button_jump = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_label);
          this->__isset.jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_data);
          this->__isset.jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_label);
          this->__isset.argot_jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_data);
          this->__isset.argot_jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CacheCoupon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CacheCoupon");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_create_time", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->order_create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drawn_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->drawn_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("frozen_time", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->frozen_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payed_time", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->payed_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_status", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->use_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_use_time", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->start_use_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_use_time", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->end_use_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_id", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->coupon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_type", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->favor_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_type", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->scene_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->full);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->favor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 27);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img", ::apache::thrift::protocol::T_STRING, 29);
  xfer += oprot->writeString(this->img);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_id", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->client_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slug", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_width", ::apache::thrift::protocol::T_I32, 32);
  xfer += oprot->writeI32(this->img_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_height", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->img_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_text", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->button_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_jump", ::apache::thrift::protocol::T_STRING, 35);
  xfer += oprot->writeString(this->button_jump);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_label", ::apache::thrift::protocol::T_STRING, 36);
  xfer += oprot->writeString(this->jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_data", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_label", ::apache::thrift::protocol::T_STRING, 38);
  xfer += oprot->writeString(this->argot_jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_data", ::apache::thrift::protocol::T_STRING, 39);
  xfer += oprot->writeString(this->argot_jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 41);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 100);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 101);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CacheCoupon &a, CacheCoupon &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.code, b.code);
  swap(a.user_id, b.user_id);
  swap(a.order_id, b.order_id);
  swap(a.create_time, b.create_time);
  swap(a.order_create_time, b.order_create_time);
  swap(a.drawn_time, b.drawn_time);
  swap(a.frozen_time, b.frozen_time);
  swap(a.payed_time, b.payed_time);
  swap(a.update_time, b.update_time);
  swap(a.use_status, b.use_status);
  swap(a.start_use_time, b.start_use_time);
  swap(a.end_use_time, b.end_use_time);
  swap(a.coupon_id, b.coupon_id);
  swap(a.name, b.name);
  swap(a.title, b.title);
  swap(a.comment, b.comment);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.favor_type, b.favor_type);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.scene_type, b.scene_type);
  swap(a.full, b.full);
  swap(a.favor, b.favor);
  swap(a.rate, b.rate);
  swap(a.argot, b.argot);
  swap(a.seller_id, b.seller_id);
  swap(a.url, b.url);
  swap(a.img, b.img);
  swap(a.client_id, b.client_id);
  swap(a.slug, b.slug);
  swap(a.img_width, b.img_width);
  swap(a.img_height, b.img_height);
  swap(a.button_text, b.button_text);
  swap(a.button_jump, b.button_jump);
  swap(a.jump_label, b.jump_label);
  swap(a.jump_data, b.jump_data);
  swap(a.argot_jump_label, b.argot_jump_label);
  swap(a.argot_jump_data, b.argot_jump_data);
  swap(a.version, b.version);
  swap(a.description, b.description);
  swap(a.type, b.type);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

CacheCoupon::CacheCoupon(const CacheCoupon& other20) {
  coupon_group_id = other20.coupon_group_id;
  code = other20.code;
  user_id = other20.user_id;
  order_id = other20.order_id;
  create_time = other20.create_time;
  order_create_time = other20.order_create_time;
  drawn_time = other20.drawn_time;
  frozen_time = other20.frozen_time;
  payed_time = other20.payed_time;
  update_time = other20.update_time;
  use_status = other20.use_status;
  start_use_time = other20.start_use_time;
  end_use_time = other20.end_use_time;
  coupon_id = other20.coupon_id;
  name = other20.name;
  title = other20.title;
  comment = other20.comment;
  ware_label_id = other20.ware_label_id;
  favor_type = other20.favor_type;
  scope_type = other20.scope_type;
  sub_type = other20.sub_type;
  scene_type = other20.scene_type;
  full = other20.full;
  favor = other20.favor;
  rate = other20.rate;
  argot = other20.argot;
  seller_id = other20.seller_id;
  url = other20.url;
  img = other20.img;
  client_id = other20.client_id;
  slug = other20.slug;
  img_width = other20.img_width;
  img_height = other20.img_height;
  button_text = other20.button_text;
  button_jump = other20.button_jump;
  jump_label = other20.jump_label;
  jump_data = other20.jump_data;
  argot_jump_label = other20.argot_jump_label;
  argot_jump_data = other20.argot_jump_data;
  version = other20.version;
  description = other20.description;
  type = other20.type;
  value = other20.value;
  __isset = other20.__isset;
}
CacheCoupon& CacheCoupon::operator=(const CacheCoupon& other21) {
  coupon_group_id = other21.coupon_group_id;
  code = other21.code;
  user_id = other21.user_id;
  order_id = other21.order_id;
  create_time = other21.create_time;
  order_create_time = other21.order_create_time;
  drawn_time = other21.drawn_time;
  frozen_time = other21.frozen_time;
  payed_time = other21.payed_time;
  update_time = other21.update_time;
  use_status = other21.use_status;
  start_use_time = other21.start_use_time;
  end_use_time = other21.end_use_time;
  coupon_id = other21.coupon_id;
  name = other21.name;
  title = other21.title;
  comment = other21.comment;
  ware_label_id = other21.ware_label_id;
  favor_type = other21.favor_type;
  scope_type = other21.scope_type;
  sub_type = other21.sub_type;
  scene_type = other21.scene_type;
  full = other21.full;
  favor = other21.favor;
  rate = other21.rate;
  argot = other21.argot;
  seller_id = other21.seller_id;
  url = other21.url;
  img = other21.img;
  client_id = other21.client_id;
  slug = other21.slug;
  img_width = other21.img_width;
  img_height = other21.img_height;
  button_text = other21.button_text;
  button_jump = other21.button_jump;
  jump_label = other21.jump_label;
  jump_data = other21.jump_data;
  argot_jump_label = other21.argot_jump_label;
  argot_jump_data = other21.argot_jump_data;
  version = other21.version;
  description = other21.description;
  type = other21.type;
  value = other21.value;
  __isset = other21.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CacheCoupon& obj) {
  using apache::thrift::to_string;
  out << "CacheCoupon(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "code=" << to_string(obj.code);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "order_id=" << to_string(obj.order_id);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "order_create_time=" << to_string(obj.order_create_time);
  out << ", " << "drawn_time=" << to_string(obj.drawn_time);
  out << ", " << "frozen_time=" << to_string(obj.frozen_time);
  out << ", " << "payed_time=" << to_string(obj.payed_time);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "use_status=" << to_string(obj.use_status);
  out << ", " << "start_use_time=" << to_string(obj.start_use_time);
  out << ", " << "end_use_time=" << to_string(obj.end_use_time);
  out << ", " << "coupon_id=" << to_string(obj.coupon_id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "comment=" << to_string(obj.comment);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "favor_type=" << to_string(obj.favor_type);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "scene_type=" << to_string(obj.scene_type);
  out << ", " << "full=" << to_string(obj.full);
  out << ", " << "favor=" << to_string(obj.favor);
  out << ", " << "rate=" << to_string(obj.rate);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "url=" << to_string(obj.url);
  out << ", " << "img=" << to_string(obj.img);
  out << ", " << "client_id=" << to_string(obj.client_id);
  out << ", " << "slug=" << to_string(obj.slug);
  out << ", " << "img_width=" << to_string(obj.img_width);
  out << ", " << "img_height=" << to_string(obj.img_height);
  out << ", " << "button_text=" << to_string(obj.button_text);
  out << ", " << "button_jump=" << to_string(obj.button_jump);
  out << ", " << "jump_label=" << to_string(obj.jump_label);
  out << ", " << "jump_data=" << to_string(obj.jump_data);
  out << ", " << "argot_jump_label=" << to_string(obj.argot_jump_label);
  out << ", " << "argot_jump_data=" << to_string(obj.argot_jump_data);
  out << ", " << "version=" << to_string(obj.version);
  out << ", " << "description=" << to_string(obj.description);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


CacheCouponGroup::~CacheCouponGroup() throw() {
}


void CacheCouponGroup::__set_name(const std::string& val) {
  this->name = val;
}

void CacheCouponGroup::__set_title(const std::string& val) {
  this->title = val;
}

void CacheCouponGroup::__set_comment(const std::string& val) {
  this->comment = val;
}

void CacheCouponGroup::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void CacheCouponGroup::__set_favor_type(const int32_t val) {
  this->favor_type = val;
}

void CacheCouponGroup::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void CacheCouponGroup::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void CacheCouponGroup::__set_scene_type(const int32_t val) {
  this->scene_type = val;
}

void CacheCouponGroup::__set_full(const double val) {
  this->full = val;
}

void CacheCouponGroup::__set_favor(const double val) {
  this->favor = val;
}

void CacheCouponGroup::__set_rate(const double val) {
  this->rate = val;
}

void CacheCouponGroup::__set_argot(const std::string& val) {
  this->argot = val;
}

void CacheCouponGroup::__set_max_count(const int32_t val) {
  this->max_count = val;
}

void CacheCouponGroup::__set_drawn_count(const int32_t val) {
  this->drawn_count = val;
}

void CacheCouponGroup::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void CacheCouponGroup::__set_can_draw_count(const int32_t val) {
  this->can_draw_count = val;
}

void CacheCouponGroup::__set_start_draw_time(const int32_t val) {
  this->start_draw_time = val;
}

void CacheCouponGroup::__set_end_draw_time(const int32_t val) {
  this->end_draw_time = val;
}

void CacheCouponGroup::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void CacheCouponGroup::__set_url(const std::string& val) {
  this->url = val;
}

void CacheCouponGroup::__set_id(const int32_t val) {
  this->id = val;
}

void CacheCouponGroup::__set_img(const std::string& val) {
  this->img = val;
}

void CacheCouponGroup::__set_slug(const std::string& val) {
  this->slug = val;
}

void CacheCouponGroup::__set_img_width(const int32_t val) {
  this->img_width = val;
}

void CacheCouponGroup::__set_img_height(const int32_t val) {
  this->img_height = val;
}

void CacheCouponGroup::__set_button_text(const std::string& val) {
  this->button_text = val;
}

void CacheCouponGroup::__set_button_jump(const std::string& val) {
  this->button_jump = val;
}

void CacheCouponGroup::__set_jump_label(const std::string& val) {
  this->jump_label = val;
}

void CacheCouponGroup::__set_jump_data(const std::string& val) {
  this->jump_data = val;
}

void CacheCouponGroup::__set_argot_jump_label(const std::string& val) {
  this->argot_jump_label = val;
}

void CacheCouponGroup::__set_argot_jump_data(const std::string& val) {
  this->argot_jump_data = val;
}

void CacheCouponGroup::__set_update_time(const int32_t val) {
  this->update_time = val;
}

void CacheCouponGroup::__set_version(const int32_t val) {
  this->version = val;
}

void CacheCouponGroup::__set_description(const std::string& val) {
  this->description = val;
}

const char* CacheCouponGroup::ascii_fingerprint = "27F6C301776C8D94F163053CDBFA76DF";
const uint8_t CacheCouponGroup::binary_fingerprint[16] = {0x27,0xF6,0xC3,0x01,0x77,0x6C,0x8D,0x94,0xF1,0x63,0x05,0x3C,0xDB,0xFA,0x76,0xDF};

uint32_t CacheCouponGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->favor_type);
          this->__isset.favor_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          this->__isset.scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          this->__isset.sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scene_type);
          this->__isset.scene_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->full);
          this->__isset.full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor);
          this->__isset.favor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          this->__isset.argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_count);
          this->__isset.max_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->drawn_count);
          this->__isset.drawn_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->can_draw_count);
          this->__isset.can_draw_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_draw_time);
          this->__isset.start_draw_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_draw_time);
          this->__isset.end_draw_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->img);
          this->__isset.img = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slug);
          this->__isset.slug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_width);
          this->__isset.img_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_height);
          this->__isset.img_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_text);
          this->__isset.button_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_jump);
          this->__isset.button_jump = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_label);
          this->__isset.jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_data);
          this->__isset.jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_label);
          this->__isset.argot_jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_data);
          this->__isset.argot_jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CacheCouponGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CacheCouponGroup");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->favor_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_type", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->scene_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->full);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->favor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_count", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->max_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drawn_count", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->drawn_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("can_draw_count", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->can_draw_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_draw_time", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->start_draw_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_draw_time", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->end_draw_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->img);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slug", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->slug);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_width", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->img_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_height", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->img_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_text", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->button_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_jump", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->button_jump);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_label", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_data", ::apache::thrift::protocol::T_STRING, 29);
  xfer += oprot->writeString(this->jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_label", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->argot_jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_data", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->argot_jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I32, 32);
  xfer += oprot->writeI32(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CacheCouponGroup &a, CacheCouponGroup &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.title, b.title);
  swap(a.comment, b.comment);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.favor_type, b.favor_type);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.scene_type, b.scene_type);
  swap(a.full, b.full);
  swap(a.favor, b.favor);
  swap(a.rate, b.rate);
  swap(a.argot, b.argot);
  swap(a.max_count, b.max_count);
  swap(a.drawn_count, b.drawn_count);
  swap(a.create_time, b.create_time);
  swap(a.can_draw_count, b.can_draw_count);
  swap(a.start_draw_time, b.start_draw_time);
  swap(a.end_draw_time, b.end_draw_time);
  swap(a.seller_id, b.seller_id);
  swap(a.url, b.url);
  swap(a.id, b.id);
  swap(a.img, b.img);
  swap(a.slug, b.slug);
  swap(a.img_width, b.img_width);
  swap(a.img_height, b.img_height);
  swap(a.button_text, b.button_text);
  swap(a.button_jump, b.button_jump);
  swap(a.jump_label, b.jump_label);
  swap(a.jump_data, b.jump_data);
  swap(a.argot_jump_label, b.argot_jump_label);
  swap(a.argot_jump_data, b.argot_jump_data);
  swap(a.update_time, b.update_time);
  swap(a.version, b.version);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

CacheCouponGroup::CacheCouponGroup(const CacheCouponGroup& other22) {
  name = other22.name;
  title = other22.title;
  comment = other22.comment;
  ware_label_id = other22.ware_label_id;
  favor_type = other22.favor_type;
  scope_type = other22.scope_type;
  sub_type = other22.sub_type;
  scene_type = other22.scene_type;
  full = other22.full;
  favor = other22.favor;
  rate = other22.rate;
  argot = other22.argot;
  max_count = other22.max_count;
  drawn_count = other22.drawn_count;
  create_time = other22.create_time;
  can_draw_count = other22.can_draw_count;
  start_draw_time = other22.start_draw_time;
  end_draw_time = other22.end_draw_time;
  seller_id = other22.seller_id;
  url = other22.url;
  id = other22.id;
  img = other22.img;
  slug = other22.slug;
  img_width = other22.img_width;
  img_height = other22.img_height;
  button_text = other22.button_text;
  button_jump = other22.button_jump;
  jump_label = other22.jump_label;
  jump_data = other22.jump_data;
  argot_jump_label = other22.argot_jump_label;
  argot_jump_data = other22.argot_jump_data;
  update_time = other22.update_time;
  version = other22.version;
  description = other22.description;
  __isset = other22.__isset;
}
CacheCouponGroup& CacheCouponGroup::operator=(const CacheCouponGroup& other23) {
  name = other23.name;
  title = other23.title;
  comment = other23.comment;
  ware_label_id = other23.ware_label_id;
  favor_type = other23.favor_type;
  scope_type = other23.scope_type;
  sub_type = other23.sub_type;
  scene_type = other23.scene_type;
  full = other23.full;
  favor = other23.favor;
  rate = other23.rate;
  argot = other23.argot;
  max_count = other23.max_count;
  drawn_count = other23.drawn_count;
  create_time = other23.create_time;
  can_draw_count = other23.can_draw_count;
  start_draw_time = other23.start_draw_time;
  end_draw_time = other23.end_draw_time;
  seller_id = other23.seller_id;
  url = other23.url;
  id = other23.id;
  img = other23.img;
  slug = other23.slug;
  img_width = other23.img_width;
  img_height = other23.img_height;
  button_text = other23.button_text;
  button_jump = other23.button_jump;
  jump_label = other23.jump_label;
  jump_data = other23.jump_data;
  argot_jump_label = other23.argot_jump_label;
  argot_jump_data = other23.argot_jump_data;
  update_time = other23.update_time;
  version = other23.version;
  description = other23.description;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CacheCouponGroup& obj) {
  using apache::thrift::to_string;
  out << "CacheCouponGroup(";
  out << "name=" << to_string(obj.name);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "comment=" << to_string(obj.comment);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "favor_type=" << to_string(obj.favor_type);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "scene_type=" << to_string(obj.scene_type);
  out << ", " << "full=" << to_string(obj.full);
  out << ", " << "favor=" << to_string(obj.favor);
  out << ", " << "rate=" << to_string(obj.rate);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ", " << "max_count=" << to_string(obj.max_count);
  out << ", " << "drawn_count=" << to_string(obj.drawn_count);
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "can_draw_count=" << to_string(obj.can_draw_count);
  out << ", " << "start_draw_time=" << to_string(obj.start_draw_time);
  out << ", " << "end_draw_time=" << to_string(obj.end_draw_time);
  out << ", " << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "url=" << to_string(obj.url);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "img=" << to_string(obj.img);
  out << ", " << "slug=" << to_string(obj.slug);
  out << ", " << "img_width=" << to_string(obj.img_width);
  out << ", " << "img_height=" << to_string(obj.img_height);
  out << ", " << "button_text=" << to_string(obj.button_text);
  out << ", " << "button_jump=" << to_string(obj.button_jump);
  out << ", " << "jump_label=" << to_string(obj.jump_label);
  out << ", " << "jump_data=" << to_string(obj.jump_data);
  out << ", " << "argot_jump_label=" << to_string(obj.argot_jump_label);
  out << ", " << "argot_jump_data=" << to_string(obj.argot_jump_data);
  out << ", " << "update_time=" << to_string(obj.update_time);
  out << ", " << "version=" << to_string(obj.version);
  out << ", " << "description=" << to_string(obj.description);
  out << ")";
  return out;
}


CacheCodes::~CacheCodes() throw() {
}


void CacheCodes::__set_codes(const std::vector<std::string> & val) {
  this->codes = val;
}

const char* CacheCodes::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t CacheCodes::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t CacheCodes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->codes.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->codes.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readString(this->codes[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.codes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CacheCodes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CacheCodes");

  xfer += oprot->writeFieldBegin("codes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->codes.size()));
    std::vector<std::string> ::const_iterator _iter29;
    for (_iter29 = this->codes.begin(); _iter29 != this->codes.end(); ++_iter29)
    {
      xfer += oprot->writeString((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CacheCodes &a, CacheCodes &b) {
  using ::std::swap;
  swap(a.codes, b.codes);
  swap(a.__isset, b.__isset);
}

CacheCodes::CacheCodes(const CacheCodes& other30) {
  codes = other30.codes;
  __isset = other30.__isset;
}
CacheCodes& CacheCodes::operator=(const CacheCodes& other31) {
  codes = other31.codes;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CacheCodes& obj) {
  using apache::thrift::to_string;
  out << "CacheCodes(";
  out << "codes=" << to_string(obj.codes);
  out << ")";
  return out;
}


InvalidOperation::~InvalidOperation() throw() {
}


void InvalidOperation::__set_fault(const Error::type val) {
  this->fault = val;
}

void InvalidOperation::__set_why(const std::string& val) {
  this->why = val;
}

const char* InvalidOperation::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t InvalidOperation::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t InvalidOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast32;
          xfer += iprot->readI32(ecast32);
          this->fault = (Error::type)ecast32;
          this->__isset.fault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidOperation");

  xfer += oprot->writeFieldBegin("fault", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->fault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  swap(a.fault, b.fault);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

InvalidOperation::InvalidOperation(const InvalidOperation& other33) : TException() {
  fault = other33.fault;
  why = other33.why;
  __isset = other33.__isset;
}
InvalidOperation& InvalidOperation::operator=(const InvalidOperation& other34) {
  fault = other34.fault;
  why = other34.why;
  __isset = other34.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidOperation(";
  out << "fault=" << to_string(obj.fault);
  out << ", " << "why=" << to_string(obj.why);
  out << ")";
  return out;
}


MultipleCondition::~MultipleCondition() throw() {
}


void MultipleCondition::__set_andCondList(const std::vector<std::string> & val) {
  this->andCondList = val;
}

void MultipleCondition::__set_orCondList(const std::vector<std::string> & val) {
  this->orCondList = val;
}

void MultipleCondition::__set_orderCondList(const std::vector<std::string> & val) {
  this->orderCondList = val;
}

const char* MultipleCondition::ascii_fingerprint = "F58DCEBA659ABD254B5B8D11A03A57B9";
const uint8_t MultipleCondition::binary_fingerprint[16] = {0xF5,0x8D,0xCE,0xBA,0x65,0x9A,0xBD,0x25,0x4B,0x5B,0x8D,0x11,0xA0,0x3A,0x57,0xB9};

uint32_t MultipleCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->andCondList.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->andCondList.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += iprot->readString(this->andCondList[_i39]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.andCondList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orCondList.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->orCondList.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += iprot->readString(this->orCondList[_i44]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orCondList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orderCondList.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->orderCondList.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += iprot->readString(this->orderCondList[_i49]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orderCondList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MultipleCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MultipleCondition");

  xfer += oprot->writeFieldBegin("andCondList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->andCondList.size()));
    std::vector<std::string> ::const_iterator _iter50;
    for (_iter50 = this->andCondList.begin(); _iter50 != this->andCondList.end(); ++_iter50)
    {
      xfer += oprot->writeString((*_iter50));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orCondList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orCondList.size()));
    std::vector<std::string> ::const_iterator _iter51;
    for (_iter51 = this->orCondList.begin(); _iter51 != this->orCondList.end(); ++_iter51)
    {
      xfer += oprot->writeString((*_iter51));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderCondList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orderCondList.size()));
    std::vector<std::string> ::const_iterator _iter52;
    for (_iter52 = this->orderCondList.begin(); _iter52 != this->orderCondList.end(); ++_iter52)
    {
      xfer += oprot->writeString((*_iter52));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MultipleCondition &a, MultipleCondition &b) {
  using ::std::swap;
  swap(a.andCondList, b.andCondList);
  swap(a.orCondList, b.orCondList);
  swap(a.orderCondList, b.orderCondList);
  swap(a.__isset, b.__isset);
}

MultipleCondition::MultipleCondition(const MultipleCondition& other53) {
  andCondList = other53.andCondList;
  orCondList = other53.orCondList;
  orderCondList = other53.orderCondList;
  __isset = other53.__isset;
}
MultipleCondition& MultipleCondition::operator=(const MultipleCondition& other54) {
  andCondList = other54.andCondList;
  orCondList = other54.orCondList;
  orderCondList = other54.orderCondList;
  __isset = other54.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MultipleCondition& obj) {
  using apache::thrift::to_string;
  out << "MultipleCondition(";
  out << "andCondList=" << to_string(obj.andCondList);
  out << ", " << "orCondList=" << to_string(obj.orCondList);
  out << ", " << "orderCondList=" << to_string(obj.orderCondList);
  out << ")";
  return out;
}

} // namespace
