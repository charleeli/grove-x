/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef couponAdmin_TYPES_H
#define couponAdmin_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "coupon_types.h"


namespace couponAdmin {

class CreateWareLabelReq;

class CreateWareLabelRsp;

class UpdateWareLabelReq;

class UpdateWareLabelRsp;

class AddWareLabelWaresReq;

class AddWareLabelWaresRsp;

class DelWareLabelWaresReq;

class DelWareLabelWaresRsp;

class CreateCouponGroupReq;

class CreateCouponGroupRsp;

class UpdateCouponGroupReq;

class UpdateCouponGroupRsp;

class CreateCouponTableReq;

class CreateCouponTableRsp;

class CouponCountReq;

class CouponCountRsp;

class CouponListReq;

class CouponListRsp;

class CouponGroupCountReq;

class CouponGroupCountRsp;

class CouponGroupListReq;

class CouponGroupListRsp;

class WareLabelCountReq;

class WareLabelCountRsp;

class WareLabelListReq;

class WareLabelListRsp;

class WareLabelWaresCountReq;

class WareLabelWaresCountRsp;

class WareLabelWaresListReq;

class WareLabelWaresListRsp;

class BatchUserCouponReq;

class BatchUserCouponRsp;

class VerifyArgotReq;

class VerifyArgotRsp;

class BatchDispatchReq;

class BatchDispatchRsp;

class BatchExportReq;

class BatchExportRsp;

class BatchExportCodeReq;

class BatchExportCodeRsp;

class UpdateJumpReq;

class UpdateJumpRsp;

class UpdateArgotJumpReq;

class UpdateArgotJumpRsp;

class UpdateOnlineReq;

class UpdateOnlineRsp;

class OfflineReq;

class OfflineRsp;

class UpdateDefaultConfigReq;

class UpdateDefaultConfigRsp;

class ViewDefaultConfigReq;

class ViewDefaultConfigRsp;


class CreateWareLabelReq {
 public:

  static const char* ascii_fingerprint; // = "117811434B043EA39B98AC2A3E784934";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x78,0x11,0x43,0x4B,0x04,0x3E,0xA3,0x9B,0x98,0xAC,0x2A,0x3E,0x78,0x49,0x34};

  CreateWareLabelReq(const CreateWareLabelReq&);
  CreateWareLabelReq& operator=(const CreateWareLabelReq&);
  CreateWareLabelReq() : name(), scope_type(0), sub_type(0), create_man() {
  }

  virtual ~CreateWareLabelReq() throw();
  std::string name;
  int32_t scope_type;
  int32_t sub_type;
  std::string create_man;

  void __set_name(const std::string& val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_create_man(const std::string& val);

  bool operator == (const CreateWareLabelReq & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(create_man == rhs.create_man))
      return false;
    return true;
  }
  bool operator != (const CreateWareLabelReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateWareLabelReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateWareLabelReq& obj);
};

void swap(CreateWareLabelReq &a, CreateWareLabelReq &b);

typedef struct _CreateWareLabelRsp__isset {
  _CreateWareLabelRsp__isset() : error(false), errmsg(false), ware_label_id(false) {}
  bool error :1;
  bool errmsg :1;
  bool ware_label_id :1;
} _CreateWareLabelRsp__isset;

class CreateWareLabelRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  CreateWareLabelRsp(const CreateWareLabelRsp&);
  CreateWareLabelRsp& operator=(const CreateWareLabelRsp&);
  CreateWareLabelRsp() : error(( ::coupon::Error::type)0), errmsg(), ware_label_id(0) {
  }

  virtual ~CreateWareLabelRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t ware_label_id;

  _CreateWareLabelRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_ware_label_id(const int32_t val);

  bool operator == (const CreateWareLabelRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    return true;
  }
  bool operator != (const CreateWareLabelRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateWareLabelRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateWareLabelRsp& obj);
};

void swap(CreateWareLabelRsp &a, CreateWareLabelRsp &b);


class UpdateWareLabelReq {
 public:

  static const char* ascii_fingerprint; // = "42032288D96B7A4082F1274A92CC5ADC";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x03,0x22,0x88,0xD9,0x6B,0x7A,0x40,0x82,0xF1,0x27,0x4A,0x92,0xCC,0x5A,0xDC};

  UpdateWareLabelReq(const UpdateWareLabelReq&);
  UpdateWareLabelReq& operator=(const UpdateWareLabelReq&);
  UpdateWareLabelReq() {
  }

  virtual ~UpdateWareLabelReq() throw();
   ::coupon::WareLabel wareLabel;

  void __set_wareLabel(const  ::coupon::WareLabel& val);

  bool operator == (const UpdateWareLabelReq & rhs) const
  {
    if (!(wareLabel == rhs.wareLabel))
      return false;
    return true;
  }
  bool operator != (const UpdateWareLabelReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateWareLabelReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateWareLabelReq& obj);
};

void swap(UpdateWareLabelReq &a, UpdateWareLabelReq &b);

typedef struct _UpdateWareLabelRsp__isset {
  _UpdateWareLabelRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateWareLabelRsp__isset;

class UpdateWareLabelRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateWareLabelRsp(const UpdateWareLabelRsp&);
  UpdateWareLabelRsp& operator=(const UpdateWareLabelRsp&);
  UpdateWareLabelRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~UpdateWareLabelRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _UpdateWareLabelRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateWareLabelRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateWareLabelRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateWareLabelRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateWareLabelRsp& obj);
};

void swap(UpdateWareLabelRsp &a, UpdateWareLabelRsp &b);


class AddWareLabelWaresReq {
 public:

  static const char* ascii_fingerprint; // = "D47ED972F5454274FCA5B3867B623D21";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x7E,0xD9,0x72,0xF5,0x45,0x42,0x74,0xFC,0xA5,0xB3,0x86,0x7B,0x62,0x3D,0x21};

  AddWareLabelWaresReq(const AddWareLabelWaresReq&);
  AddWareLabelWaresReq& operator=(const AddWareLabelWaresReq&);
  AddWareLabelWaresReq() {
  }

  virtual ~AddWareLabelWaresReq() throw();
  std::vector< ::coupon::WareLabelWares>  wareLabelWaresList;

  void __set_wareLabelWaresList(const std::vector< ::coupon::WareLabelWares> & val);

  bool operator == (const AddWareLabelWaresReq & rhs) const
  {
    if (!(wareLabelWaresList == rhs.wareLabelWaresList))
      return false;
    return true;
  }
  bool operator != (const AddWareLabelWaresReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddWareLabelWaresReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresReq& obj);
};

void swap(AddWareLabelWaresReq &a, AddWareLabelWaresReq &b);

typedef struct _AddWareLabelWaresRsp__isset {
  _AddWareLabelWaresRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _AddWareLabelWaresRsp__isset;

class AddWareLabelWaresRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  AddWareLabelWaresRsp(const AddWareLabelWaresRsp&);
  AddWareLabelWaresRsp& operator=(const AddWareLabelWaresRsp&);
  AddWareLabelWaresRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~AddWareLabelWaresRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _AddWareLabelWaresRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const AddWareLabelWaresRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const AddWareLabelWaresRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddWareLabelWaresRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresRsp& obj);
};

void swap(AddWareLabelWaresRsp &a, AddWareLabelWaresRsp &b);


class DelWareLabelWaresReq {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  DelWareLabelWaresReq(const DelWareLabelWaresReq&);
  DelWareLabelWaresReq& operator=(const DelWareLabelWaresReq&);
  DelWareLabelWaresReq() : ware_label_id(0), ware_id(0) {
  }

  virtual ~DelWareLabelWaresReq() throw();
  int32_t ware_label_id;
  int64_t ware_id;

  void __set_ware_label_id(const int32_t val);

  void __set_ware_id(const int64_t val);

  bool operator == (const DelWareLabelWaresReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(ware_id == rhs.ware_id))
      return false;
    return true;
  }
  bool operator != (const DelWareLabelWaresReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelWareLabelWaresReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresReq& obj);
};

void swap(DelWareLabelWaresReq &a, DelWareLabelWaresReq &b);

typedef struct _DelWareLabelWaresRsp__isset {
  _DelWareLabelWaresRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _DelWareLabelWaresRsp__isset;

class DelWareLabelWaresRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  DelWareLabelWaresRsp(const DelWareLabelWaresRsp&);
  DelWareLabelWaresRsp& operator=(const DelWareLabelWaresRsp&);
  DelWareLabelWaresRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~DelWareLabelWaresRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _DelWareLabelWaresRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const DelWareLabelWaresRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const DelWareLabelWaresRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelWareLabelWaresRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresRsp& obj);
};

void swap(DelWareLabelWaresRsp &a, DelWareLabelWaresRsp &b);


class CreateCouponGroupReq {
 public:

  static const char* ascii_fingerprint; // = "DF7EBB7176190555C45459A51A3D944B";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x7E,0xBB,0x71,0x76,0x19,0x05,0x55,0xC4,0x54,0x59,0xA5,0x1A,0x3D,0x94,0x4B};

  CreateCouponGroupReq(const CreateCouponGroupReq&);
  CreateCouponGroupReq& operator=(const CreateCouponGroupReq&);
  CreateCouponGroupReq() {
  }

  virtual ~CreateCouponGroupReq() throw();
   ::coupon::CouponGroup couponGroup;

  void __set_couponGroup(const  ::coupon::CouponGroup& val);

  bool operator == (const CreateCouponGroupReq & rhs) const
  {
    if (!(couponGroup == rhs.couponGroup))
      return false;
    return true;
  }
  bool operator != (const CreateCouponGroupReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateCouponGroupReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateCouponGroupReq& obj);
};

void swap(CreateCouponGroupReq &a, CreateCouponGroupReq &b);

typedef struct _CreateCouponGroupRsp__isset {
  _CreateCouponGroupRsp__isset() : error(false), errmsg(false), coupon_group_id(false) {}
  bool error :1;
  bool errmsg :1;
  bool coupon_group_id :1;
} _CreateCouponGroupRsp__isset;

class CreateCouponGroupRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  CreateCouponGroupRsp(const CreateCouponGroupRsp&);
  CreateCouponGroupRsp& operator=(const CreateCouponGroupRsp&);
  CreateCouponGroupRsp() : error(( ::coupon::Error::type)0), errmsg(), coupon_group_id(0) {
  }

  virtual ~CreateCouponGroupRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t coupon_group_id;

  _CreateCouponGroupRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_coupon_group_id(const int32_t val);

  bool operator == (const CreateCouponGroupRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    return true;
  }
  bool operator != (const CreateCouponGroupRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateCouponGroupRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateCouponGroupRsp& obj);
};

void swap(CreateCouponGroupRsp &a, CreateCouponGroupRsp &b);


class UpdateCouponGroupReq {
 public:

  static const char* ascii_fingerprint; // = "DF7EBB7176190555C45459A51A3D944B";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x7E,0xBB,0x71,0x76,0x19,0x05,0x55,0xC4,0x54,0x59,0xA5,0x1A,0x3D,0x94,0x4B};

  UpdateCouponGroupReq(const UpdateCouponGroupReq&);
  UpdateCouponGroupReq& operator=(const UpdateCouponGroupReq&);
  UpdateCouponGroupReq() {
  }

  virtual ~UpdateCouponGroupReq() throw();
   ::coupon::CouponGroup couponGroup;

  void __set_couponGroup(const  ::coupon::CouponGroup& val);

  bool operator == (const UpdateCouponGroupReq & rhs) const
  {
    if (!(couponGroup == rhs.couponGroup))
      return false;
    return true;
  }
  bool operator != (const UpdateCouponGroupReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateCouponGroupReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateCouponGroupReq& obj);
};

void swap(UpdateCouponGroupReq &a, UpdateCouponGroupReq &b);

typedef struct _UpdateCouponGroupRsp__isset {
  _UpdateCouponGroupRsp__isset() : error(false), errmsg(false), couponGroup(false) {}
  bool error :1;
  bool errmsg :1;
  bool couponGroup :1;
} _UpdateCouponGroupRsp__isset;

class UpdateCouponGroupRsp {
 public:

  static const char* ascii_fingerprint; // = "BEA7E60E567DD9DC354A5B3756DBF706";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xA7,0xE6,0x0E,0x56,0x7D,0xD9,0xDC,0x35,0x4A,0x5B,0x37,0x56,0xDB,0xF7,0x06};

  UpdateCouponGroupRsp(const UpdateCouponGroupRsp&);
  UpdateCouponGroupRsp& operator=(const UpdateCouponGroupRsp&);
  UpdateCouponGroupRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~UpdateCouponGroupRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
   ::coupon::CouponGroup couponGroup;

  _UpdateCouponGroupRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_couponGroup(const  ::coupon::CouponGroup& val);

  bool operator == (const UpdateCouponGroupRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(couponGroup == rhs.couponGroup))
      return false;
    return true;
  }
  bool operator != (const UpdateCouponGroupRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateCouponGroupRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateCouponGroupRsp& obj);
};

void swap(UpdateCouponGroupRsp &a, UpdateCouponGroupRsp &b);


class CreateCouponTableReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  CreateCouponTableReq(const CreateCouponTableReq&);
  CreateCouponTableReq& operator=(const CreateCouponTableReq&);
  CreateCouponTableReq() : coupon_group_id(0) {
  }

  virtual ~CreateCouponTableReq() throw();
  int32_t coupon_group_id;

  void __set_coupon_group_id(const int32_t val);

  bool operator == (const CreateCouponTableReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    return true;
  }
  bool operator != (const CreateCouponTableReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateCouponTableReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateCouponTableReq& obj);
};

void swap(CreateCouponTableReq &a, CreateCouponTableReq &b);

typedef struct _CreateCouponTableRsp__isset {
  _CreateCouponTableRsp__isset() : error(false), errmsg(false), tableName(false) {}
  bool error :1;
  bool errmsg :1;
  bool tableName :1;
} _CreateCouponTableRsp__isset;

class CreateCouponTableRsp {
 public:

  static const char* ascii_fingerprint; // = "38C252E94E93B69D04EB3A6EE2F9EDFB";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xC2,0x52,0xE9,0x4E,0x93,0xB6,0x9D,0x04,0xEB,0x3A,0x6E,0xE2,0xF9,0xED,0xFB};

  CreateCouponTableRsp(const CreateCouponTableRsp&);
  CreateCouponTableRsp& operator=(const CreateCouponTableRsp&);
  CreateCouponTableRsp() : error(( ::coupon::Error::type)0), errmsg(), tableName() {
  }

  virtual ~CreateCouponTableRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::string tableName;

  _CreateCouponTableRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_tableName(const std::string& val);

  bool operator == (const CreateCouponTableRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const CreateCouponTableRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateCouponTableRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateCouponTableRsp& obj);
};

void swap(CreateCouponTableRsp &a, CreateCouponTableRsp &b);

typedef struct _CouponCountReq__isset {
  _CouponCountReq__isset() : cond(false) {}
  bool cond :1;
} _CouponCountReq__isset;

class CouponCountReq {
 public:

  static const char* ascii_fingerprint; // = "2F6F451F103E9E5B7691D031B115A9E4";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x6F,0x45,0x1F,0x10,0x3E,0x9E,0x5B,0x76,0x91,0xD0,0x31,0xB1,0x15,0xA9,0xE4};

  CouponCountReq(const CouponCountReq&);
  CouponCountReq& operator=(const CouponCountReq&);
  CouponCountReq() : coupon_group_id(0) {
  }

  virtual ~CouponCountReq() throw();
  int32_t coupon_group_id;
   ::coupon::MultipleCondition cond;

  _CouponCountReq__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_cond(const  ::coupon::MultipleCondition& val);

  bool operator == (const CouponCountReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const CouponCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponCountReq& obj);
};

void swap(CouponCountReq &a, CouponCountReq &b);

typedef struct _CouponCountRsp__isset {
  _CouponCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _CouponCountRsp__isset;

class CouponCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  CouponCountRsp(const CouponCountRsp&);
  CouponCountRsp& operator=(const CouponCountRsp&);
  CouponCountRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0) {
  }

  virtual ~CouponCountRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;

  _CouponCountRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const CouponCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CouponCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponCountRsp& obj);
};

void swap(CouponCountRsp &a, CouponCountRsp &b);

typedef struct _CouponListReq__isset {
  _CouponListReq__isset() : cond(false) {}
  bool cond :1;
} _CouponListReq__isset;

class CouponListReq {
 public:

  static const char* ascii_fingerprint; // = "5BE3C6332EA6690008B5213E3EE1A610";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0xE3,0xC6,0x33,0x2E,0xA6,0x69,0x00,0x08,0xB5,0x21,0x3E,0x3E,0xE1,0xA6,0x10};

  CouponListReq(const CouponListReq&);
  CouponListReq& operator=(const CouponListReq&);
  CouponListReq() : coupon_group_id(0), offset(0), rows(0) {
  }

  virtual ~CouponListReq() throw();
  int32_t coupon_group_id;
   ::coupon::MultipleCondition cond;
  int32_t offset;
  int32_t rows;

  _CouponListReq__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_cond(const  ::coupon::MultipleCondition& val);

  void __set_offset(const int32_t val);

  void __set_rows(const int32_t val);

  bool operator == (const CouponListReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const CouponListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponListReq& obj);
};

void swap(CouponListReq &a, CouponListReq &b);

typedef struct _CouponListRsp__isset {
  _CouponListRsp__isset() : error(false), errmsg(false), couponList(false) {}
  bool error :1;
  bool errmsg :1;
  bool couponList :1;
} _CouponListRsp__isset;

class CouponListRsp {
 public:

  static const char* ascii_fingerprint; // = "F53DF7676F79FDAB5DDC945BBB60EBFF";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x3D,0xF7,0x67,0x6F,0x79,0xFD,0xAB,0x5D,0xDC,0x94,0x5B,0xBB,0x60,0xEB,0xFF};

  CouponListRsp(const CouponListRsp&);
  CouponListRsp& operator=(const CouponListRsp&);
  CouponListRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~CouponListRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector< ::coupon::Coupon>  couponList;

  _CouponListRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_couponList(const std::vector< ::coupon::Coupon> & val);

  bool operator == (const CouponListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(couponList == rhs.couponList))
      return false;
    return true;
  }
  bool operator != (const CouponListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponListRsp& obj);
};

void swap(CouponListRsp &a, CouponListRsp &b);

typedef struct _CouponGroupCountReq__isset {
  _CouponGroupCountReq__isset() : cond(false) {}
  bool cond :1;
} _CouponGroupCountReq__isset;

class CouponGroupCountReq {
 public:

  static const char* ascii_fingerprint; // = "8053C70253C5A9069FE9081AC657A7D5";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x53,0xC7,0x02,0x53,0xC5,0xA9,0x06,0x9F,0xE9,0x08,0x1A,0xC6,0x57,0xA7,0xD5};

  CouponGroupCountReq(const CouponGroupCountReq&);
  CouponGroupCountReq& operator=(const CouponGroupCountReq&);
  CouponGroupCountReq() {
  }

  virtual ~CouponGroupCountReq() throw();
   ::coupon::MultipleCondition cond;

  _CouponGroupCountReq__isset __isset;

  void __set_cond(const  ::coupon::MultipleCondition& val);

  bool operator == (const CouponGroupCountReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const CouponGroupCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponGroupCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponGroupCountReq& obj);
};

void swap(CouponGroupCountReq &a, CouponGroupCountReq &b);

typedef struct _CouponGroupCountRsp__isset {
  _CouponGroupCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _CouponGroupCountRsp__isset;

class CouponGroupCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  CouponGroupCountRsp(const CouponGroupCountRsp&);
  CouponGroupCountRsp& operator=(const CouponGroupCountRsp&);
  CouponGroupCountRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0) {
  }

  virtual ~CouponGroupCountRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;

  _CouponGroupCountRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const CouponGroupCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CouponGroupCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponGroupCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponGroupCountRsp& obj);
};

void swap(CouponGroupCountRsp &a, CouponGroupCountRsp &b);

typedef struct _CouponGroupListReq__isset {
  _CouponGroupListReq__isset() : cond(false) {}
  bool cond :1;
} _CouponGroupListReq__isset;

class CouponGroupListReq {
 public:

  static const char* ascii_fingerprint; // = "BD076B53465FFAADF958E4A7D7BE3635";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x07,0x6B,0x53,0x46,0x5F,0xFA,0xAD,0xF9,0x58,0xE4,0xA7,0xD7,0xBE,0x36,0x35};

  CouponGroupListReq(const CouponGroupListReq&);
  CouponGroupListReq& operator=(const CouponGroupListReq&);
  CouponGroupListReq() : offset(0), rows(0) {
  }

  virtual ~CouponGroupListReq() throw();
   ::coupon::MultipleCondition cond;
  int32_t offset;
  int32_t rows;

  _CouponGroupListReq__isset __isset;

  void __set_cond(const  ::coupon::MultipleCondition& val);

  void __set_offset(const int32_t val);

  void __set_rows(const int32_t val);

  bool operator == (const CouponGroupListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const CouponGroupListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponGroupListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponGroupListReq& obj);
};

void swap(CouponGroupListReq &a, CouponGroupListReq &b);

typedef struct _CouponGroupListRsp__isset {
  _CouponGroupListRsp__isset() : error(false), errmsg(false), couponGroupList(false) {}
  bool error :1;
  bool errmsg :1;
  bool couponGroupList :1;
} _CouponGroupListRsp__isset;

class CouponGroupListRsp {
 public:

  static const char* ascii_fingerprint; // = "6C75BDA8167BE8F5F9B6BE7F0CE142BF";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x75,0xBD,0xA8,0x16,0x7B,0xE8,0xF5,0xF9,0xB6,0xBE,0x7F,0x0C,0xE1,0x42,0xBF};

  CouponGroupListRsp(const CouponGroupListRsp&);
  CouponGroupListRsp& operator=(const CouponGroupListRsp&);
  CouponGroupListRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~CouponGroupListRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector< ::coupon::CouponGroup>  couponGroupList;

  _CouponGroupListRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_couponGroupList(const std::vector< ::coupon::CouponGroup> & val);

  bool operator == (const CouponGroupListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(couponGroupList == rhs.couponGroupList))
      return false;
    return true;
  }
  bool operator != (const CouponGroupListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponGroupListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponGroupListRsp& obj);
};

void swap(CouponGroupListRsp &a, CouponGroupListRsp &b);

typedef struct _WareLabelCountReq__isset {
  _WareLabelCountReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelCountReq__isset;

class WareLabelCountReq {
 public:

  static const char* ascii_fingerprint; // = "8053C70253C5A9069FE9081AC657A7D5";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x53,0xC7,0x02,0x53,0xC5,0xA9,0x06,0x9F,0xE9,0x08,0x1A,0xC6,0x57,0xA7,0xD5};

  WareLabelCountReq(const WareLabelCountReq&);
  WareLabelCountReq& operator=(const WareLabelCountReq&);
  WareLabelCountReq() {
  }

  virtual ~WareLabelCountReq() throw();
   ::coupon::MultipleCondition cond;

  _WareLabelCountReq__isset __isset;

  void __set_cond(const  ::coupon::MultipleCondition& val);

  bool operator == (const WareLabelCountReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const WareLabelCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelCountReq& obj);
};

void swap(WareLabelCountReq &a, WareLabelCountReq &b);

typedef struct _WareLabelCountRsp__isset {
  _WareLabelCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _WareLabelCountRsp__isset;

class WareLabelCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  WareLabelCountRsp(const WareLabelCountRsp&);
  WareLabelCountRsp& operator=(const WareLabelCountRsp&);
  WareLabelCountRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0) {
  }

  virtual ~WareLabelCountRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;

  _WareLabelCountRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const WareLabelCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const WareLabelCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelCountRsp& obj);
};

void swap(WareLabelCountRsp &a, WareLabelCountRsp &b);

typedef struct _WareLabelListReq__isset {
  _WareLabelListReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelListReq__isset;

class WareLabelListReq {
 public:

  static const char* ascii_fingerprint; // = "BD076B53465FFAADF958E4A7D7BE3635";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x07,0x6B,0x53,0x46,0x5F,0xFA,0xAD,0xF9,0x58,0xE4,0xA7,0xD7,0xBE,0x36,0x35};

  WareLabelListReq(const WareLabelListReq&);
  WareLabelListReq& operator=(const WareLabelListReq&);
  WareLabelListReq() : offset(0), rows(0) {
  }

  virtual ~WareLabelListReq() throw();
   ::coupon::MultipleCondition cond;
  int32_t offset;
  int32_t rows;

  _WareLabelListReq__isset __isset;

  void __set_cond(const  ::coupon::MultipleCondition& val);

  void __set_offset(const int32_t val);

  void __set_rows(const int32_t val);

  bool operator == (const WareLabelListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const WareLabelListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelListReq& obj);
};

void swap(WareLabelListReq &a, WareLabelListReq &b);

typedef struct _WareLabelListRsp__isset {
  _WareLabelListRsp__isset() : error(false), errmsg(false), wareLabelList(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareLabelList :1;
} _WareLabelListRsp__isset;

class WareLabelListRsp {
 public:

  static const char* ascii_fingerprint; // = "EEC11B9EA9B8AF43D678B6B21B895416";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xC1,0x1B,0x9E,0xA9,0xB8,0xAF,0x43,0xD6,0x78,0xB6,0xB2,0x1B,0x89,0x54,0x16};

  WareLabelListRsp(const WareLabelListRsp&);
  WareLabelListRsp& operator=(const WareLabelListRsp&);
  WareLabelListRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~WareLabelListRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector< ::coupon::WareLabel>  wareLabelList;

  _WareLabelListRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareLabelList(const std::vector< ::coupon::WareLabel> & val);

  bool operator == (const WareLabelListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareLabelList == rhs.wareLabelList))
      return false;
    return true;
  }
  bool operator != (const WareLabelListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelListRsp& obj);
};

void swap(WareLabelListRsp &a, WareLabelListRsp &b);

typedef struct _WareLabelWaresCountReq__isset {
  _WareLabelWaresCountReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelWaresCountReq__isset;

class WareLabelWaresCountReq {
 public:

  static const char* ascii_fingerprint; // = "8053C70253C5A9069FE9081AC657A7D5";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x53,0xC7,0x02,0x53,0xC5,0xA9,0x06,0x9F,0xE9,0x08,0x1A,0xC6,0x57,0xA7,0xD5};

  WareLabelWaresCountReq(const WareLabelWaresCountReq&);
  WareLabelWaresCountReq& operator=(const WareLabelWaresCountReq&);
  WareLabelWaresCountReq() {
  }

  virtual ~WareLabelWaresCountReq() throw();
   ::coupon::MultipleCondition cond;

  _WareLabelWaresCountReq__isset __isset;

  void __set_cond(const  ::coupon::MultipleCondition& val);

  bool operator == (const WareLabelWaresCountReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountReq& obj);
};

void swap(WareLabelWaresCountReq &a, WareLabelWaresCountReq &b);

typedef struct _WareLabelWaresCountRsp__isset {
  _WareLabelWaresCountRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _WareLabelWaresCountRsp__isset;

class WareLabelWaresCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  WareLabelWaresCountRsp(const WareLabelWaresCountRsp&);
  WareLabelWaresCountRsp& operator=(const WareLabelWaresCountRsp&);
  WareLabelWaresCountRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0) {
  }

  virtual ~WareLabelWaresCountRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;

  _WareLabelWaresCountRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const WareLabelWaresCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountRsp& obj);
};

void swap(WareLabelWaresCountRsp &a, WareLabelWaresCountRsp &b);

typedef struct _WareLabelWaresListReq__isset {
  _WareLabelWaresListReq__isset() : cond(false) {}
  bool cond :1;
} _WareLabelWaresListReq__isset;

class WareLabelWaresListReq {
 public:

  static const char* ascii_fingerprint; // = "BD076B53465FFAADF958E4A7D7BE3635";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x07,0x6B,0x53,0x46,0x5F,0xFA,0xAD,0xF9,0x58,0xE4,0xA7,0xD7,0xBE,0x36,0x35};

  WareLabelWaresListReq(const WareLabelWaresListReq&);
  WareLabelWaresListReq& operator=(const WareLabelWaresListReq&);
  WareLabelWaresListReq() : offset(0), rows(0) {
  }

  virtual ~WareLabelWaresListReq() throw();
   ::coupon::MultipleCondition cond;
  int32_t offset;
  int32_t rows;

  _WareLabelWaresListReq__isset __isset;

  void __set_cond(const  ::coupon::MultipleCondition& val);

  void __set_offset(const int32_t val);

  void __set_rows(const int32_t val);

  bool operator == (const WareLabelWaresListReq & rhs) const
  {
    if (__isset.cond != rhs.__isset.cond)
      return false;
    else if (__isset.cond && !(cond == rhs.cond))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresListReq& obj);
};

void swap(WareLabelWaresListReq &a, WareLabelWaresListReq &b);

typedef struct _WareLabelWaresListRsp__isset {
  _WareLabelWaresListRsp__isset() : error(false), errmsg(false), wareLabelWaresList(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareLabelWaresList :1;
} _WareLabelWaresListRsp__isset;

class WareLabelWaresListRsp {
 public:

  static const char* ascii_fingerprint; // = "C180EC29FACE44EAC94EE66E76269F7B";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x80,0xEC,0x29,0xFA,0xCE,0x44,0xEA,0xC9,0x4E,0xE6,0x6E,0x76,0x26,0x9F,0x7B};

  WareLabelWaresListRsp(const WareLabelWaresListRsp&);
  WareLabelWaresListRsp& operator=(const WareLabelWaresListRsp&);
  WareLabelWaresListRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~WareLabelWaresListRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector< ::coupon::WareLabelWares>  wareLabelWaresList;

  _WareLabelWaresListRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareLabelWaresList(const std::vector< ::coupon::WareLabelWares> & val);

  bool operator == (const WareLabelWaresListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareLabelWaresList == rhs.wareLabelWaresList))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresListRsp& obj);
};

void swap(WareLabelWaresListRsp &a, WareLabelWaresListRsp &b);


class BatchUserCouponReq {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  BatchUserCouponReq(const BatchUserCouponReq&);
  BatchUserCouponReq& operator=(const BatchUserCouponReq&);
  BatchUserCouponReq() {
  }

  virtual ~BatchUserCouponReq() throw();
  std::vector<std::string>  codeList;

  void __set_codeList(const std::vector<std::string> & val);

  bool operator == (const BatchUserCouponReq & rhs) const
  {
    if (!(codeList == rhs.codeList))
      return false;
    return true;
  }
  bool operator != (const BatchUserCouponReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchUserCouponReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchUserCouponReq& obj);
};

void swap(BatchUserCouponReq &a, BatchUserCouponReq &b);

typedef struct _BatchUserCouponRsp__isset {
  _BatchUserCouponRsp__isset() : error(false), errmsg(false), userCouponMap(false) {}
  bool error :1;
  bool errmsg :1;
  bool userCouponMap :1;
} _BatchUserCouponRsp__isset;

class BatchUserCouponRsp {
 public:

  static const char* ascii_fingerprint; // = "A8568A98DF673E728B066807ED986FF7";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x56,0x8A,0x98,0xDF,0x67,0x3E,0x72,0x8B,0x06,0x68,0x07,0xED,0x98,0x6F,0xF7};

  BatchUserCouponRsp(const BatchUserCouponRsp&);
  BatchUserCouponRsp& operator=(const BatchUserCouponRsp&);
  BatchUserCouponRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~BatchUserCouponRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::map<std::string,  ::coupon::UserCoupon>  userCouponMap;

  _BatchUserCouponRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_userCouponMap(const std::map<std::string,  ::coupon::UserCoupon> & val);

  bool operator == (const BatchUserCouponRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(userCouponMap == rhs.userCouponMap))
      return false;
    return true;
  }
  bool operator != (const BatchUserCouponRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchUserCouponRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchUserCouponRsp& obj);
};

void swap(BatchUserCouponRsp &a, BatchUserCouponRsp &b);

typedef struct _VerifyArgotReq__isset {
  _VerifyArgotReq__isset() : start_draw_time(false) {}
  bool start_draw_time :1;
} _VerifyArgotReq__isset;

class VerifyArgotReq {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

  VerifyArgotReq(const VerifyArgotReq&);
  VerifyArgotReq& operator=(const VerifyArgotReq&);
  VerifyArgotReq() : coupon_group_id(0), start_draw_time(0), argot() {
  }

  virtual ~VerifyArgotReq() throw();
  int32_t coupon_group_id;
  int32_t start_draw_time;
  std::string argot;

  _VerifyArgotReq__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_start_draw_time(const int32_t val);

  void __set_argot(const std::string& val);

  bool operator == (const VerifyArgotReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(start_draw_time == rhs.start_draw_time))
      return false;
    if (!(argot == rhs.argot))
      return false;
    return true;
  }
  bool operator != (const VerifyArgotReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyArgotReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VerifyArgotReq& obj);
};

void swap(VerifyArgotReq &a, VerifyArgotReq &b);

typedef struct _VerifyArgotRsp__isset {
  _VerifyArgotRsp__isset() : error(false), errmsg(false), argot(false) {}
  bool error :1;
  bool errmsg :1;
  bool argot :1;
} _VerifyArgotRsp__isset;

class VerifyArgotRsp {
 public:

  static const char* ascii_fingerprint; // = "38C252E94E93B69D04EB3A6EE2F9EDFB";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xC2,0x52,0xE9,0x4E,0x93,0xB6,0x9D,0x04,0xEB,0x3A,0x6E,0xE2,0xF9,0xED,0xFB};

  VerifyArgotRsp(const VerifyArgotRsp&);
  VerifyArgotRsp& operator=(const VerifyArgotRsp&);
  VerifyArgotRsp() : error(( ::coupon::Error::type)0), errmsg(), argot() {
  }

  virtual ~VerifyArgotRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::string argot;

  _VerifyArgotRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_argot(const std::string& val);

  bool operator == (const VerifyArgotRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(argot == rhs.argot))
      return false;
    return true;
  }
  bool operator != (const VerifyArgotRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyArgotRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VerifyArgotRsp& obj);
};

void swap(VerifyArgotRsp &a, VerifyArgotRsp &b);


class BatchDispatchReq {
 public:

  static const char* ascii_fingerprint; // = "10B0DAF3A336BE67A0D106228B97776E";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0xB0,0xDA,0xF3,0xA3,0x36,0xBE,0x67,0xA0,0xD1,0x06,0x22,0x8B,0x97,0x77,0x6E};

  BatchDispatchReq(const BatchDispatchReq&);
  BatchDispatchReq& operator=(const BatchDispatchReq&);
  BatchDispatchReq() : coupon_group_id(0) {
  }

  virtual ~BatchDispatchReq() throw();
  int32_t coupon_group_id;
  std::vector<int64_t>  user_id_list;

  void __set_coupon_group_id(const int32_t val);

  void __set_user_id_list(const std::vector<int64_t> & val);

  bool operator == (const BatchDispatchReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(user_id_list == rhs.user_id_list))
      return false;
    return true;
  }
  bool operator != (const BatchDispatchReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchDispatchReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchDispatchReq& obj);
};

void swap(BatchDispatchReq &a, BatchDispatchReq &b);

typedef struct _BatchDispatchRsp__isset {
  _BatchDispatchRsp__isset() : error(false), errmsg(false), count(false), success_count(false), time_cost(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
  bool success_count :1;
  bool time_cost :1;
} _BatchDispatchRsp__isset;

class BatchDispatchRsp {
 public:

  static const char* ascii_fingerprint; // = "D1D2E3F9C70C318B91FA3656EAB4E80C";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0xD2,0xE3,0xF9,0xC7,0x0C,0x31,0x8B,0x91,0xFA,0x36,0x56,0xEA,0xB4,0xE8,0x0C};

  BatchDispatchRsp(const BatchDispatchRsp&);
  BatchDispatchRsp& operator=(const BatchDispatchRsp&);
  BatchDispatchRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0), success_count(0), time_cost(0) {
  }

  virtual ~BatchDispatchRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;
  int32_t success_count;
  int32_t time_cost;

  _BatchDispatchRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  void __set_success_count(const int32_t val);

  void __set_time_cost(const int32_t val);

  bool operator == (const BatchDispatchRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(success_count == rhs.success_count))
      return false;
    if (!(time_cost == rhs.time_cost))
      return false;
    return true;
  }
  bool operator != (const BatchDispatchRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchDispatchRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchDispatchRsp& obj);
};

void swap(BatchDispatchRsp &a, BatchDispatchRsp &b);


class BatchExportReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  BatchExportReq(const BatchExportReq&);
  BatchExportReq& operator=(const BatchExportReq&);
  BatchExportReq() : coupon_group_id(0), count(0) {
  }

  virtual ~BatchExportReq() throw();
  int32_t coupon_group_id;
  int32_t count;

  void __set_coupon_group_id(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const BatchExportReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const BatchExportReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchExportReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchExportReq& obj);
};

void swap(BatchExportReq &a, BatchExportReq &b);

typedef struct _BatchExportRsp__isset {
  _BatchExportRsp__isset() : error(false), errmsg(false), count(false), time_cost(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
  bool time_cost :1;
} _BatchExportRsp__isset;

class BatchExportRsp {
 public:

  static const char* ascii_fingerprint; // = "31BFBC55E24CCAB83D9E1E9DED82F2A1";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xBF,0xBC,0x55,0xE2,0x4C,0xCA,0xB8,0x3D,0x9E,0x1E,0x9D,0xED,0x82,0xF2,0xA1};

  BatchExportRsp(const BatchExportRsp&);
  BatchExportRsp& operator=(const BatchExportRsp&);
  BatchExportRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0), time_cost(0) {
  }

  virtual ~BatchExportRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;
  int32_t time_cost;

  _BatchExportRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  void __set_time_cost(const int32_t val);

  bool operator == (const BatchExportRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(time_cost == rhs.time_cost))
      return false;
    return true;
  }
  bool operator != (const BatchExportRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchExportRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchExportRsp& obj);
};

void swap(BatchExportRsp &a, BatchExportRsp &b);


class BatchExportCodeReq {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  BatchExportCodeReq(const BatchExportCodeReq&);
  BatchExportCodeReq& operator=(const BatchExportCodeReq&);
  BatchExportCodeReq() : coupon_group_id(0), page(0), count(0) {
  }

  virtual ~BatchExportCodeReq() throw();
  int32_t coupon_group_id;
  int32_t page;
  int32_t count;

  void __set_coupon_group_id(const int32_t val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const BatchExportCodeReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const BatchExportCodeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchExportCodeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchExportCodeReq& obj);
};

void swap(BatchExportCodeReq &a, BatchExportCodeReq &b);

typedef struct _BatchExportCodeRsp__isset {
  _BatchExportCodeRsp__isset() : error(false), errmsg(false), page(false), count(false), total(false), codes(false) {}
  bool error :1;
  bool errmsg :1;
  bool page :1;
  bool count :1;
  bool total :1;
  bool codes :1;
} _BatchExportCodeRsp__isset;

class BatchExportCodeRsp {
 public:

  static const char* ascii_fingerprint; // = "90B5CF11EC9D167122D77415BD5582A1";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xB5,0xCF,0x11,0xEC,0x9D,0x16,0x71,0x22,0xD7,0x74,0x15,0xBD,0x55,0x82,0xA1};

  BatchExportCodeRsp(const BatchExportCodeRsp&);
  BatchExportCodeRsp& operator=(const BatchExportCodeRsp&);
  BatchExportCodeRsp() : error(( ::coupon::Error::type)0), errmsg(), page(0), count(0), total(0) {
  }

  virtual ~BatchExportCodeRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t page;
  int32_t count;
  int32_t total;
  std::vector<std::string>  codes;

  _BatchExportCodeRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  void __set_total(const int32_t val);

  void __set_codes(const std::vector<std::string> & val);

  bool operator == (const BatchExportCodeRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(total == rhs.total))
      return false;
    if (!(codes == rhs.codes))
      return false;
    return true;
  }
  bool operator != (const BatchExportCodeRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchExportCodeRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchExportCodeRsp& obj);
};

void swap(BatchExportCodeRsp &a, BatchExportCodeRsp &b);


class UpdateJumpReq {
 public:

  static const char* ascii_fingerprint; // = "C4A8A7FE71C2DB9CB73D92862AA4C591";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

  UpdateJumpReq(const UpdateJumpReq&);
  UpdateJumpReq& operator=(const UpdateJumpReq&);
  UpdateJumpReq() : coupon_group_id(0), name(), jump_label(), jump_data() {
  }

  virtual ~UpdateJumpReq() throw();
  int32_t coupon_group_id;
  std::string name;
  std::string jump_label;
  std::string jump_data;

  void __set_coupon_group_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_jump_label(const std::string& val);

  void __set_jump_data(const std::string& val);

  bool operator == (const UpdateJumpReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(jump_label == rhs.jump_label))
      return false;
    if (!(jump_data == rhs.jump_data))
      return false;
    return true;
  }
  bool operator != (const UpdateJumpReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateJumpReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateJumpReq& obj);
};

void swap(UpdateJumpReq &a, UpdateJumpReq &b);

typedef struct _UpdateJumpRsp__isset {
  _UpdateJumpRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateJumpRsp__isset;

class UpdateJumpRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateJumpRsp(const UpdateJumpRsp&);
  UpdateJumpRsp& operator=(const UpdateJumpRsp&);
  UpdateJumpRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~UpdateJumpRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _UpdateJumpRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateJumpRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateJumpRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateJumpRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateJumpRsp& obj);
};

void swap(UpdateJumpRsp &a, UpdateJumpRsp &b);


class UpdateArgotJumpReq {
 public:

  static const char* ascii_fingerprint; // = "22764D372E130AE20829A22C3068E8CE";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x76,0x4D,0x37,0x2E,0x13,0x0A,0xE2,0x08,0x29,0xA2,0x2C,0x30,0x68,0xE8,0xCE};

  UpdateArgotJumpReq(const UpdateArgotJumpReq&);
  UpdateArgotJumpReq& operator=(const UpdateArgotJumpReq&);
  UpdateArgotJumpReq() : coupon_group_id(0), name(), img(), img_width(0), img_height(0), button_text(), argot_jump_label(), argot_jump_data() {
  }

  virtual ~UpdateArgotJumpReq() throw();
  int32_t coupon_group_id;
  std::string name;
  std::string img;
  int32_t img_width;
  int32_t img_height;
  std::string button_text;
  std::string argot_jump_label;
  std::string argot_jump_data;

  void __set_coupon_group_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_img(const std::string& val);

  void __set_img_width(const int32_t val);

  void __set_img_height(const int32_t val);

  void __set_button_text(const std::string& val);

  void __set_argot_jump_label(const std::string& val);

  void __set_argot_jump_data(const std::string& val);

  bool operator == (const UpdateArgotJumpReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(img == rhs.img))
      return false;
    if (!(img_width == rhs.img_width))
      return false;
    if (!(img_height == rhs.img_height))
      return false;
    if (!(button_text == rhs.button_text))
      return false;
    if (!(argot_jump_label == rhs.argot_jump_label))
      return false;
    if (!(argot_jump_data == rhs.argot_jump_data))
      return false;
    return true;
  }
  bool operator != (const UpdateArgotJumpReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateArgotJumpReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateArgotJumpReq& obj);
};

void swap(UpdateArgotJumpReq &a, UpdateArgotJumpReq &b);

typedef struct _UpdateArgotJumpRsp__isset {
  _UpdateArgotJumpRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateArgotJumpRsp__isset;

class UpdateArgotJumpRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateArgotJumpRsp(const UpdateArgotJumpRsp&);
  UpdateArgotJumpRsp& operator=(const UpdateArgotJumpRsp&);
  UpdateArgotJumpRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~UpdateArgotJumpRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _UpdateArgotJumpRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateArgotJumpRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateArgotJumpRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateArgotJumpRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateArgotJumpRsp& obj);
};

void swap(UpdateArgotJumpRsp &a, UpdateArgotJumpRsp &b);

typedef struct _UpdateOnlineReq__isset {
  _UpdateOnlineReq__isset() : description(false) {}
  bool description :1;
} _UpdateOnlineReq__isset;

class UpdateOnlineReq {
 public:

  static const char* ascii_fingerprint; // = "81472DE77797F63C4C26A5C6EC76BB23";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x47,0x2D,0xE7,0x77,0x97,0xF6,0x3C,0x4C,0x26,0xA5,0xC6,0xEC,0x76,0xBB,0x23};

  UpdateOnlineReq(const UpdateOnlineReq&);
  UpdateOnlineReq& operator=(const UpdateOnlineReq&);
  UpdateOnlineReq() : coupon_group_id(0), name(), title(), can_draw_count(0), argot(), end_draw_time(0), description() {
  }

  virtual ~UpdateOnlineReq() throw();
  int32_t coupon_group_id;
  std::string name;
  std::string title;
  int32_t can_draw_count;
  std::string argot;
  int32_t end_draw_time;
  std::string description;

  _UpdateOnlineReq__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_title(const std::string& val);

  void __set_can_draw_count(const int32_t val);

  void __set_argot(const std::string& val);

  void __set_end_draw_time(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const UpdateOnlineReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(can_draw_count == rhs.can_draw_count))
      return false;
    if (!(argot == rhs.argot))
      return false;
    if (!(end_draw_time == rhs.end_draw_time))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const UpdateOnlineReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateOnlineReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateOnlineReq& obj);
};

void swap(UpdateOnlineReq &a, UpdateOnlineReq &b);

typedef struct _UpdateOnlineRsp__isset {
  _UpdateOnlineRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateOnlineRsp__isset;

class UpdateOnlineRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateOnlineRsp(const UpdateOnlineRsp&);
  UpdateOnlineRsp& operator=(const UpdateOnlineRsp&);
  UpdateOnlineRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~UpdateOnlineRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _UpdateOnlineRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateOnlineRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateOnlineRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateOnlineRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateOnlineRsp& obj);
};

void swap(UpdateOnlineRsp &a, UpdateOnlineRsp &b);


class OfflineReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  OfflineReq(const OfflineReq&);
  OfflineReq& operator=(const OfflineReq&);
  OfflineReq() : coupon_group_id(0) {
  }

  virtual ~OfflineReq() throw();
  int32_t coupon_group_id;

  void __set_coupon_group_id(const int32_t val);

  bool operator == (const OfflineReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    return true;
  }
  bool operator != (const OfflineReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OfflineReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OfflineReq& obj);
};

void swap(OfflineReq &a, OfflineReq &b);

typedef struct _OfflineRsp__isset {
  _OfflineRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _OfflineRsp__isset;

class OfflineRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  OfflineRsp(const OfflineRsp&);
  OfflineRsp& operator=(const OfflineRsp&);
  OfflineRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~OfflineRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _OfflineRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const OfflineRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const OfflineRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OfflineRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OfflineRsp& obj);
};

void swap(OfflineRsp &a, OfflineRsp &b);


class UpdateDefaultConfigReq {
 public:

  static const char* ascii_fingerprint; // = "C02F58208057D24E2722D5F7A0ADBC6D";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x2F,0x58,0x20,0x80,0x57,0xD2,0x4E,0x27,0x22,0xD5,0xF7,0xA0,0xAD,0xBC,0x6D};

  UpdateDefaultConfigReq(const UpdateDefaultConfigReq&);
  UpdateDefaultConfigReq& operator=(const UpdateDefaultConfigReq&);
  UpdateDefaultConfigReq() {
  }

  virtual ~UpdateDefaultConfigReq() throw();
   ::coupon::DefaultConfig config;

  void __set_config(const  ::coupon::DefaultConfig& val);

  bool operator == (const UpdateDefaultConfigReq & rhs) const
  {
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const UpdateDefaultConfigReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateDefaultConfigReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateDefaultConfigReq& obj);
};

void swap(UpdateDefaultConfigReq &a, UpdateDefaultConfigReq &b);

typedef struct _UpdateDefaultConfigRsp__isset {
  _UpdateDefaultConfigRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _UpdateDefaultConfigRsp__isset;

class UpdateDefaultConfigRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UpdateDefaultConfigRsp(const UpdateDefaultConfigRsp&);
  UpdateDefaultConfigRsp& operator=(const UpdateDefaultConfigRsp&);
  UpdateDefaultConfigRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~UpdateDefaultConfigRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _UpdateDefaultConfigRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const UpdateDefaultConfigRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const UpdateDefaultConfigRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateDefaultConfigRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UpdateDefaultConfigRsp& obj);
};

void swap(UpdateDefaultConfigRsp &a, UpdateDefaultConfigRsp &b);


class ViewDefaultConfigReq {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ViewDefaultConfigReq(const ViewDefaultConfigReq&);
  ViewDefaultConfigReq& operator=(const ViewDefaultConfigReq&);
  ViewDefaultConfigReq() : dummy(0) {
  }

  virtual ~ViewDefaultConfigReq() throw();
  bool dummy;

  void __set_dummy(const bool val);

  bool operator == (const ViewDefaultConfigReq & rhs) const
  {
    if (!(dummy == rhs.dummy))
      return false;
    return true;
  }
  bool operator != (const ViewDefaultConfigReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewDefaultConfigReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ViewDefaultConfigReq& obj);
};

void swap(ViewDefaultConfigReq &a, ViewDefaultConfigReq &b);

typedef struct _ViewDefaultConfigRsp__isset {
  _ViewDefaultConfigRsp__isset() : error(false), errmsg(false), config(false) {}
  bool error :1;
  bool errmsg :1;
  bool config :1;
} _ViewDefaultConfigRsp__isset;

class ViewDefaultConfigRsp {
 public:

  static const char* ascii_fingerprint; // = "DBEDF127FADA999D729B3DA57DB8B462";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xED,0xF1,0x27,0xFA,0xDA,0x99,0x9D,0x72,0x9B,0x3D,0xA5,0x7D,0xB8,0xB4,0x62};

  ViewDefaultConfigRsp(const ViewDefaultConfigRsp&);
  ViewDefaultConfigRsp& operator=(const ViewDefaultConfigRsp&);
  ViewDefaultConfigRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~ViewDefaultConfigRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
   ::coupon::DefaultConfig config;

  _ViewDefaultConfigRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_config(const  ::coupon::DefaultConfig& val);

  bool operator == (const ViewDefaultConfigRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const ViewDefaultConfigRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewDefaultConfigRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ViewDefaultConfigRsp& obj);
};

void swap(ViewDefaultConfigRsp &a, ViewDefaultConfigRsp &b);

} // namespace

#endif
