/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "couponAdmin_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace couponAdmin {


CreateWareLabelReq::~CreateWareLabelReq() throw() {
}


void CreateWareLabelReq::__set_name(const std::string& val) {
  this->name = val;
}

void CreateWareLabelReq::__set_scope_type(const int32_t val) {
  this->scope_type = val;
}

void CreateWareLabelReq::__set_sub_type(const int32_t val) {
  this->sub_type = val;
}

void CreateWareLabelReq::__set_create_man(const std::string& val) {
  this->create_man = val;
}

const char* CreateWareLabelReq::ascii_fingerprint = "117811434B043EA39B98AC2A3E784934";
const uint8_t CreateWareLabelReq::binary_fingerprint[16] = {0x11,0x78,0x11,0x43,0x4B,0x04,0x3E,0xA3,0x9B,0x98,0xAC,0x2A,0x3E,0x78,0x49,0x34};

uint32_t CreateWareLabelReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_scope_type = false;
  bool isset_sub_type = false;
  bool isset_create_man = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_type);
          isset_scope_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_type);
          isset_sub_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->create_man);
          isset_create_man = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scope_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_create_man)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateWareLabelReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateWareLabelReq");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->scope_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sub_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_man", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->create_man);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateWareLabelReq &a, CreateWareLabelReq &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.scope_type, b.scope_type);
  swap(a.sub_type, b.sub_type);
  swap(a.create_man, b.create_man);
}

CreateWareLabelReq::CreateWareLabelReq(const CreateWareLabelReq& other0) {
  name = other0.name;
  scope_type = other0.scope_type;
  sub_type = other0.sub_type;
  create_man = other0.create_man;
}
CreateWareLabelReq& CreateWareLabelReq::operator=(const CreateWareLabelReq& other1) {
  name = other1.name;
  scope_type = other1.scope_type;
  sub_type = other1.sub_type;
  create_man = other1.create_man;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateWareLabelReq& obj) {
  using apache::thrift::to_string;
  out << "CreateWareLabelReq(";
  out << "name=" << to_string(obj.name);
  out << ", " << "scope_type=" << to_string(obj.scope_type);
  out << ", " << "sub_type=" << to_string(obj.sub_type);
  out << ", " << "create_man=" << to_string(obj.create_man);
  out << ")";
  return out;
}


CreateWareLabelRsp::~CreateWareLabelRsp() throw() {
}


void CreateWareLabelRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CreateWareLabelRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CreateWareLabelRsp::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

const char* CreateWareLabelRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t CreateWareLabelRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t CreateWareLabelRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->error = ( ::coupon::Error::type)ecast2;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          this->__isset.ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateWareLabelRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateWareLabelRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateWareLabelRsp &a, CreateWareLabelRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.__isset, b.__isset);
}

CreateWareLabelRsp::CreateWareLabelRsp(const CreateWareLabelRsp& other3) {
  error = other3.error;
  errmsg = other3.errmsg;
  ware_label_id = other3.ware_label_id;
  __isset = other3.__isset;
}
CreateWareLabelRsp& CreateWareLabelRsp::operator=(const CreateWareLabelRsp& other4) {
  error = other4.error;
  errmsg = other4.errmsg;
  ware_label_id = other4.ware_label_id;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateWareLabelRsp& obj) {
  using apache::thrift::to_string;
  out << "CreateWareLabelRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ")";
  return out;
}


UpdateWareLabelReq::~UpdateWareLabelReq() throw() {
}


void UpdateWareLabelReq::__set_wareLabel(const  ::coupon::WareLabel& val) {
  this->wareLabel = val;
}

const char* UpdateWareLabelReq::ascii_fingerprint = "42032288D96B7A4082F1274A92CC5ADC";
const uint8_t UpdateWareLabelReq::binary_fingerprint[16] = {0x42,0x03,0x22,0x88,0xD9,0x6B,0x7A,0x40,0x82,0xF1,0x27,0x4A,0x92,0xCC,0x5A,0xDC};

uint32_t UpdateWareLabelReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_wareLabel = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wareLabel.read(iprot);
          isset_wareLabel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_wareLabel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateWareLabelReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateWareLabelReq");

  xfer += oprot->writeFieldBegin("wareLabel", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->wareLabel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateWareLabelReq &a, UpdateWareLabelReq &b) {
  using ::std::swap;
  swap(a.wareLabel, b.wareLabel);
}

UpdateWareLabelReq::UpdateWareLabelReq(const UpdateWareLabelReq& other5) {
  wareLabel = other5.wareLabel;
}
UpdateWareLabelReq& UpdateWareLabelReq::operator=(const UpdateWareLabelReq& other6) {
  wareLabel = other6.wareLabel;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateWareLabelReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateWareLabelReq(";
  out << "wareLabel=" << to_string(obj.wareLabel);
  out << ")";
  return out;
}


UpdateWareLabelRsp::~UpdateWareLabelRsp() throw() {
}


void UpdateWareLabelRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UpdateWareLabelRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateWareLabelRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateWareLabelRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateWareLabelRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->error = ( ::coupon::Error::type)ecast7;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateWareLabelRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateWareLabelRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateWareLabelRsp &a, UpdateWareLabelRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateWareLabelRsp::UpdateWareLabelRsp(const UpdateWareLabelRsp& other8) {
  error = other8.error;
  errmsg = other8.errmsg;
  __isset = other8.__isset;
}
UpdateWareLabelRsp& UpdateWareLabelRsp::operator=(const UpdateWareLabelRsp& other9) {
  error = other9.error;
  errmsg = other9.errmsg;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateWareLabelRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateWareLabelRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


AddWareLabelWaresReq::~AddWareLabelWaresReq() throw() {
}


void AddWareLabelWaresReq::__set_wareLabelWaresList(const std::vector< ::coupon::WareLabelWares> & val) {
  this->wareLabelWaresList = val;
}

const char* AddWareLabelWaresReq::ascii_fingerprint = "D47ED972F5454274FCA5B3867B623D21";
const uint8_t AddWareLabelWaresReq::binary_fingerprint[16] = {0xD4,0x7E,0xD9,0x72,0xF5,0x45,0x42,0x74,0xFC,0xA5,0xB3,0x86,0x7B,0x62,0x3D,0x21};

uint32_t AddWareLabelWaresReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_wareLabelWaresList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wareLabelWaresList.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->wareLabelWaresList.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->wareLabelWaresList[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_wareLabelWaresList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_wareLabelWaresList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddWareLabelWaresReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddWareLabelWaresReq");

  xfer += oprot->writeFieldBegin("wareLabelWaresList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->wareLabelWaresList.size()));
    std::vector< ::coupon::WareLabelWares> ::const_iterator _iter15;
    for (_iter15 = this->wareLabelWaresList.begin(); _iter15 != this->wareLabelWaresList.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddWareLabelWaresReq &a, AddWareLabelWaresReq &b) {
  using ::std::swap;
  swap(a.wareLabelWaresList, b.wareLabelWaresList);
}

AddWareLabelWaresReq::AddWareLabelWaresReq(const AddWareLabelWaresReq& other16) {
  wareLabelWaresList = other16.wareLabelWaresList;
}
AddWareLabelWaresReq& AddWareLabelWaresReq::operator=(const AddWareLabelWaresReq& other17) {
  wareLabelWaresList = other17.wareLabelWaresList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresReq& obj) {
  using apache::thrift::to_string;
  out << "AddWareLabelWaresReq(";
  out << "wareLabelWaresList=" << to_string(obj.wareLabelWaresList);
  out << ")";
  return out;
}


AddWareLabelWaresRsp::~AddWareLabelWaresRsp() throw() {
}


void AddWareLabelWaresRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void AddWareLabelWaresRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* AddWareLabelWaresRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t AddWareLabelWaresRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t AddWareLabelWaresRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->error = ( ::coupon::Error::type)ecast18;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddWareLabelWaresRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddWareLabelWaresRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddWareLabelWaresRsp &a, AddWareLabelWaresRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

AddWareLabelWaresRsp::AddWareLabelWaresRsp(const AddWareLabelWaresRsp& other19) {
  error = other19.error;
  errmsg = other19.errmsg;
  __isset = other19.__isset;
}
AddWareLabelWaresRsp& AddWareLabelWaresRsp::operator=(const AddWareLabelWaresRsp& other20) {
  error = other20.error;
  errmsg = other20.errmsg;
  __isset = other20.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddWareLabelWaresRsp& obj) {
  using apache::thrift::to_string;
  out << "AddWareLabelWaresRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


DelWareLabelWaresReq::~DelWareLabelWaresReq() throw() {
}


void DelWareLabelWaresReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

void DelWareLabelWaresReq::__set_ware_id(const int64_t val) {
  this->ware_id = val;
}

const char* DelWareLabelWaresReq::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t DelWareLabelWaresReq::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t DelWareLabelWaresReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;
  bool isset_ware_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ware_id);
          isset_ware_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ware_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DelWareLabelWaresReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelWareLabelWaresReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ware_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelWareLabelWaresReq &a, DelWareLabelWaresReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
  swap(a.ware_id, b.ware_id);
}

DelWareLabelWaresReq::DelWareLabelWaresReq(const DelWareLabelWaresReq& other21) {
  ware_label_id = other21.ware_label_id;
  ware_id = other21.ware_id;
}
DelWareLabelWaresReq& DelWareLabelWaresReq::operator=(const DelWareLabelWaresReq& other22) {
  ware_label_id = other22.ware_label_id;
  ware_id = other22.ware_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresReq& obj) {
  using apache::thrift::to_string;
  out << "DelWareLabelWaresReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ", " << "ware_id=" << to_string(obj.ware_id);
  out << ")";
  return out;
}


DelWareLabelWaresRsp::~DelWareLabelWaresRsp() throw() {
}


void DelWareLabelWaresRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void DelWareLabelWaresRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* DelWareLabelWaresRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t DelWareLabelWaresRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t DelWareLabelWaresRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->error = ( ::coupon::Error::type)ecast23;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelWareLabelWaresRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DelWareLabelWaresRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DelWareLabelWaresRsp &a, DelWareLabelWaresRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

DelWareLabelWaresRsp::DelWareLabelWaresRsp(const DelWareLabelWaresRsp& other24) {
  error = other24.error;
  errmsg = other24.errmsg;
  __isset = other24.__isset;
}
DelWareLabelWaresRsp& DelWareLabelWaresRsp::operator=(const DelWareLabelWaresRsp& other25) {
  error = other25.error;
  errmsg = other25.errmsg;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DelWareLabelWaresRsp& obj) {
  using apache::thrift::to_string;
  out << "DelWareLabelWaresRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


CreateCouponGroupReq::~CreateCouponGroupReq() throw() {
}


void CreateCouponGroupReq::__set_couponGroup(const  ::coupon::CouponGroup& val) {
  this->couponGroup = val;
}

const char* CreateCouponGroupReq::ascii_fingerprint = "DF7EBB7176190555C45459A51A3D944B";
const uint8_t CreateCouponGroupReq::binary_fingerprint[16] = {0xDF,0x7E,0xBB,0x71,0x76,0x19,0x05,0x55,0xC4,0x54,0x59,0xA5,0x1A,0x3D,0x94,0x4B};

uint32_t CreateCouponGroupReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_couponGroup = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->couponGroup.read(iprot);
          isset_couponGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_couponGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateCouponGroupReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateCouponGroupReq");

  xfer += oprot->writeFieldBegin("couponGroup", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->couponGroup.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateCouponGroupReq &a, CreateCouponGroupReq &b) {
  using ::std::swap;
  swap(a.couponGroup, b.couponGroup);
}

CreateCouponGroupReq::CreateCouponGroupReq(const CreateCouponGroupReq& other26) {
  couponGroup = other26.couponGroup;
}
CreateCouponGroupReq& CreateCouponGroupReq::operator=(const CreateCouponGroupReq& other27) {
  couponGroup = other27.couponGroup;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateCouponGroupReq& obj) {
  using apache::thrift::to_string;
  out << "CreateCouponGroupReq(";
  out << "couponGroup=" << to_string(obj.couponGroup);
  out << ")";
  return out;
}


CreateCouponGroupRsp::~CreateCouponGroupRsp() throw() {
}


void CreateCouponGroupRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CreateCouponGroupRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CreateCouponGroupRsp::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

const char* CreateCouponGroupRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t CreateCouponGroupRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t CreateCouponGroupRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->error = ( ::coupon::Error::type)ecast28;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          this->__isset.coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateCouponGroupRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateCouponGroupRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateCouponGroupRsp &a, CreateCouponGroupRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.__isset, b.__isset);
}

CreateCouponGroupRsp::CreateCouponGroupRsp(const CreateCouponGroupRsp& other29) {
  error = other29.error;
  errmsg = other29.errmsg;
  coupon_group_id = other29.coupon_group_id;
  __isset = other29.__isset;
}
CreateCouponGroupRsp& CreateCouponGroupRsp::operator=(const CreateCouponGroupRsp& other30) {
  error = other30.error;
  errmsg = other30.errmsg;
  coupon_group_id = other30.coupon_group_id;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateCouponGroupRsp& obj) {
  using apache::thrift::to_string;
  out << "CreateCouponGroupRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ")";
  return out;
}


UpdateCouponGroupReq::~UpdateCouponGroupReq() throw() {
}


void UpdateCouponGroupReq::__set_couponGroup(const  ::coupon::CouponGroup& val) {
  this->couponGroup = val;
}

const char* UpdateCouponGroupReq::ascii_fingerprint = "DF7EBB7176190555C45459A51A3D944B";
const uint8_t UpdateCouponGroupReq::binary_fingerprint[16] = {0xDF,0x7E,0xBB,0x71,0x76,0x19,0x05,0x55,0xC4,0x54,0x59,0xA5,0x1A,0x3D,0x94,0x4B};

uint32_t UpdateCouponGroupReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_couponGroup = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->couponGroup.read(iprot);
          isset_couponGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_couponGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateCouponGroupReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateCouponGroupReq");

  xfer += oprot->writeFieldBegin("couponGroup", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->couponGroup.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateCouponGroupReq &a, UpdateCouponGroupReq &b) {
  using ::std::swap;
  swap(a.couponGroup, b.couponGroup);
}

UpdateCouponGroupReq::UpdateCouponGroupReq(const UpdateCouponGroupReq& other31) {
  couponGroup = other31.couponGroup;
}
UpdateCouponGroupReq& UpdateCouponGroupReq::operator=(const UpdateCouponGroupReq& other32) {
  couponGroup = other32.couponGroup;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateCouponGroupReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateCouponGroupReq(";
  out << "couponGroup=" << to_string(obj.couponGroup);
  out << ")";
  return out;
}


UpdateCouponGroupRsp::~UpdateCouponGroupRsp() throw() {
}


void UpdateCouponGroupRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UpdateCouponGroupRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void UpdateCouponGroupRsp::__set_couponGroup(const  ::coupon::CouponGroup& val) {
  this->couponGroup = val;
}

const char* UpdateCouponGroupRsp::ascii_fingerprint = "BEA7E60E567DD9DC354A5B3756DBF706";
const uint8_t UpdateCouponGroupRsp::binary_fingerprint[16] = {0xBE,0xA7,0xE6,0x0E,0x56,0x7D,0xD9,0xDC,0x35,0x4A,0x5B,0x37,0x56,0xDB,0xF7,0x06};

uint32_t UpdateCouponGroupRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->error = ( ::coupon::Error::type)ecast33;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->couponGroup.read(iprot);
          this->__isset.couponGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateCouponGroupRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateCouponGroupRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("couponGroup", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->couponGroup.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateCouponGroupRsp &a, UpdateCouponGroupRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.couponGroup, b.couponGroup);
  swap(a.__isset, b.__isset);
}

UpdateCouponGroupRsp::UpdateCouponGroupRsp(const UpdateCouponGroupRsp& other34) {
  error = other34.error;
  errmsg = other34.errmsg;
  couponGroup = other34.couponGroup;
  __isset = other34.__isset;
}
UpdateCouponGroupRsp& UpdateCouponGroupRsp::operator=(const UpdateCouponGroupRsp& other35) {
  error = other35.error;
  errmsg = other35.errmsg;
  couponGroup = other35.couponGroup;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateCouponGroupRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateCouponGroupRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "couponGroup=" << to_string(obj.couponGroup);
  out << ")";
  return out;
}


CreateCouponTableReq::~CreateCouponTableReq() throw() {
}


void CreateCouponTableReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

const char* CreateCouponTableReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t CreateCouponTableReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t CreateCouponTableReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateCouponTableReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateCouponTableReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateCouponTableReq &a, CreateCouponTableReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
}

CreateCouponTableReq::CreateCouponTableReq(const CreateCouponTableReq& other36) {
  coupon_group_id = other36.coupon_group_id;
}
CreateCouponTableReq& CreateCouponTableReq::operator=(const CreateCouponTableReq& other37) {
  coupon_group_id = other37.coupon_group_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateCouponTableReq& obj) {
  using apache::thrift::to_string;
  out << "CreateCouponTableReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ")";
  return out;
}


CreateCouponTableRsp::~CreateCouponTableRsp() throw() {
}


void CreateCouponTableRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CreateCouponTableRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CreateCouponTableRsp::__set_tableName(const std::string& val) {
  this->tableName = val;
}

const char* CreateCouponTableRsp::ascii_fingerprint = "38C252E94E93B69D04EB3A6EE2F9EDFB";
const uint8_t CreateCouponTableRsp::binary_fingerprint[16] = {0x38,0xC2,0x52,0xE9,0x4E,0x93,0xB6,0x9D,0x04,0xEB,0x3A,0x6E,0xE2,0xF9,0xED,0xFB};

uint32_t CreateCouponTableRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->error = ( ::coupon::Error::type)ecast38;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateCouponTableRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateCouponTableRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateCouponTableRsp &a, CreateCouponTableRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.tableName, b.tableName);
  swap(a.__isset, b.__isset);
}

CreateCouponTableRsp::CreateCouponTableRsp(const CreateCouponTableRsp& other39) {
  error = other39.error;
  errmsg = other39.errmsg;
  tableName = other39.tableName;
  __isset = other39.__isset;
}
CreateCouponTableRsp& CreateCouponTableRsp::operator=(const CreateCouponTableRsp& other40) {
  error = other40.error;
  errmsg = other40.errmsg;
  tableName = other40.tableName;
  __isset = other40.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateCouponTableRsp& obj) {
  using apache::thrift::to_string;
  out << "CreateCouponTableRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "tableName=" << to_string(obj.tableName);
  out << ")";
  return out;
}


CouponCountReq::~CouponCountReq() throw() {
}


void CouponCountReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void CouponCountReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* CouponCountReq::ascii_fingerprint = "2F6F451F103E9E5B7691D031B115A9E4";
const uint8_t CouponCountReq::binary_fingerprint[16] = {0x2F,0x6F,0x45,0x1F,0x10,0x3E,0x9E,0x5B,0x76,0x91,0xD0,0x31,0xB1,0x15,0xA9,0xE4};

uint32_t CouponCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CouponCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponCountReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponCountReq &a, CouponCountReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

CouponCountReq::CouponCountReq(const CouponCountReq& other41) {
  coupon_group_id = other41.coupon_group_id;
  cond = other41.cond;
  __isset = other41.__isset;
}
CouponCountReq& CouponCountReq::operator=(const CouponCountReq& other42) {
  coupon_group_id = other42.coupon_group_id;
  cond = other42.cond;
  __isset = other42.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponCountReq& obj) {
  using apache::thrift::to_string;
  out << "CouponCountReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


CouponCountRsp::~CouponCountRsp() throw() {
}


void CouponCountRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CouponCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CouponCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* CouponCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t CouponCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t CouponCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast43;
          xfer += iprot->readI32(ecast43);
          this->error = ( ::coupon::Error::type)ecast43;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CouponCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponCountRsp &a, CouponCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

CouponCountRsp::CouponCountRsp(const CouponCountRsp& other44) {
  error = other44.error;
  errmsg = other44.errmsg;
  count = other44.count;
  __isset = other44.__isset;
}
CouponCountRsp& CouponCountRsp::operator=(const CouponCountRsp& other45) {
  error = other45.error;
  errmsg = other45.errmsg;
  count = other45.count;
  __isset = other45.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponCountRsp& obj) {
  using apache::thrift::to_string;
  out << "CouponCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


CouponListReq::~CouponListReq() throw() {
}


void CouponListReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void CouponListReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

void CouponListReq::__set_offset(const int32_t val) {
  this->offset = val;
}

void CouponListReq::__set_rows(const int32_t val) {
  this->rows = val;
}

const char* CouponListReq::ascii_fingerprint = "5BE3C6332EA6690008B5213E3EE1A610";
const uint8_t CouponListReq::binary_fingerprint[16] = {0x5B,0xE3,0xC6,0x33,0x2E,0xA6,0x69,0x00,0x08,0xB5,0x21,0x3E,0x3E,0xE1,0xA6,0x10};

uint32_t CouponListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_offset = false;
  bool isset_rows = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rows);
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CouponListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponListReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->rows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponListReq &a, CouponListReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.cond, b.cond);
  swap(a.offset, b.offset);
  swap(a.rows, b.rows);
  swap(a.__isset, b.__isset);
}

CouponListReq::CouponListReq(const CouponListReq& other46) {
  coupon_group_id = other46.coupon_group_id;
  cond = other46.cond;
  offset = other46.offset;
  rows = other46.rows;
  __isset = other46.__isset;
}
CouponListReq& CouponListReq::operator=(const CouponListReq& other47) {
  coupon_group_id = other47.coupon_group_id;
  cond = other47.cond;
  offset = other47.offset;
  rows = other47.rows;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponListReq& obj) {
  using apache::thrift::to_string;
  out << "CouponListReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ", " << "offset=" << to_string(obj.offset);
  out << ", " << "rows=" << to_string(obj.rows);
  out << ")";
  return out;
}


CouponListRsp::~CouponListRsp() throw() {
}


void CouponListRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CouponListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CouponListRsp::__set_couponList(const std::vector< ::coupon::Coupon> & val) {
  this->couponList = val;
}

const char* CouponListRsp::ascii_fingerprint = "F53DF7676F79FDAB5DDC945BBB60EBFF";
const uint8_t CouponListRsp::binary_fingerprint[16] = {0xF5,0x3D,0xF7,0x67,0x6F,0x79,0xFD,0xAB,0x5D,0xDC,0x94,0x5B,0xBB,0x60,0xEB,0xFF};

uint32_t CouponListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast48;
          xfer += iprot->readI32(ecast48);
          this->error = ( ::coupon::Error::type)ecast48;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->couponList.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->couponList.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->couponList[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.couponList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CouponListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("couponList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->couponList.size()));
    std::vector< ::coupon::Coupon> ::const_iterator _iter54;
    for (_iter54 = this->couponList.begin(); _iter54 != this->couponList.end(); ++_iter54)
    {
      xfer += (*_iter54).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponListRsp &a, CouponListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.couponList, b.couponList);
  swap(a.__isset, b.__isset);
}

CouponListRsp::CouponListRsp(const CouponListRsp& other55) {
  error = other55.error;
  errmsg = other55.errmsg;
  couponList = other55.couponList;
  __isset = other55.__isset;
}
CouponListRsp& CouponListRsp::operator=(const CouponListRsp& other56) {
  error = other56.error;
  errmsg = other56.errmsg;
  couponList = other56.couponList;
  __isset = other56.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponListRsp& obj) {
  using apache::thrift::to_string;
  out << "CouponListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "couponList=" << to_string(obj.couponList);
  out << ")";
  return out;
}


CouponGroupCountReq::~CouponGroupCountReq() throw() {
}


void CouponGroupCountReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* CouponGroupCountReq::ascii_fingerprint = "8053C70253C5A9069FE9081AC657A7D5";
const uint8_t CouponGroupCountReq::binary_fingerprint[16] = {0x80,0x53,0xC7,0x02,0x53,0xC5,0xA9,0x06,0x9F,0xE9,0x08,0x1A,0xC6,0x57,0xA7,0xD5};

uint32_t CouponGroupCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CouponGroupCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponGroupCountReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponGroupCountReq &a, CouponGroupCountReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

CouponGroupCountReq::CouponGroupCountReq(const CouponGroupCountReq& other57) {
  cond = other57.cond;
  __isset = other57.__isset;
}
CouponGroupCountReq& CouponGroupCountReq::operator=(const CouponGroupCountReq& other58) {
  cond = other58.cond;
  __isset = other58.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponGroupCountReq& obj) {
  using apache::thrift::to_string;
  out << "CouponGroupCountReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


CouponGroupCountRsp::~CouponGroupCountRsp() throw() {
}


void CouponGroupCountRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CouponGroupCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CouponGroupCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* CouponGroupCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t CouponGroupCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t CouponGroupCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast59;
          xfer += iprot->readI32(ecast59);
          this->error = ( ::coupon::Error::type)ecast59;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CouponGroupCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponGroupCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponGroupCountRsp &a, CouponGroupCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

CouponGroupCountRsp::CouponGroupCountRsp(const CouponGroupCountRsp& other60) {
  error = other60.error;
  errmsg = other60.errmsg;
  count = other60.count;
  __isset = other60.__isset;
}
CouponGroupCountRsp& CouponGroupCountRsp::operator=(const CouponGroupCountRsp& other61) {
  error = other61.error;
  errmsg = other61.errmsg;
  count = other61.count;
  __isset = other61.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponGroupCountRsp& obj) {
  using apache::thrift::to_string;
  out << "CouponGroupCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


CouponGroupListReq::~CouponGroupListReq() throw() {
}


void CouponGroupListReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

void CouponGroupListReq::__set_offset(const int32_t val) {
  this->offset = val;
}

void CouponGroupListReq::__set_rows(const int32_t val) {
  this->rows = val;
}

const char* CouponGroupListReq::ascii_fingerprint = "BD076B53465FFAADF958E4A7D7BE3635";
const uint8_t CouponGroupListReq::binary_fingerprint[16] = {0xBD,0x07,0x6B,0x53,0x46,0x5F,0xFA,0xAD,0xF9,0x58,0xE4,0xA7,0xD7,0xBE,0x36,0x35};

uint32_t CouponGroupListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_offset = false;
  bool isset_rows = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rows);
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CouponGroupListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponGroupListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->rows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponGroupListReq &a, CouponGroupListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.offset, b.offset);
  swap(a.rows, b.rows);
  swap(a.__isset, b.__isset);
}

CouponGroupListReq::CouponGroupListReq(const CouponGroupListReq& other62) {
  cond = other62.cond;
  offset = other62.offset;
  rows = other62.rows;
  __isset = other62.__isset;
}
CouponGroupListReq& CouponGroupListReq::operator=(const CouponGroupListReq& other63) {
  cond = other63.cond;
  offset = other63.offset;
  rows = other63.rows;
  __isset = other63.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponGroupListReq& obj) {
  using apache::thrift::to_string;
  out << "CouponGroupListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ", " << "offset=" << to_string(obj.offset);
  out << ", " << "rows=" << to_string(obj.rows);
  out << ")";
  return out;
}


CouponGroupListRsp::~CouponGroupListRsp() throw() {
}


void CouponGroupListRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CouponGroupListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CouponGroupListRsp::__set_couponGroupList(const std::vector< ::coupon::CouponGroup> & val) {
  this->couponGroupList = val;
}

const char* CouponGroupListRsp::ascii_fingerprint = "6C75BDA8167BE8F5F9B6BE7F0CE142BF";
const uint8_t CouponGroupListRsp::binary_fingerprint[16] = {0x6C,0x75,0xBD,0xA8,0x16,0x7B,0xE8,0xF5,0xF9,0xB6,0xBE,0x7F,0x0C,0xE1,0x42,0xBF};

uint32_t CouponGroupListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast64;
          xfer += iprot->readI32(ecast64);
          this->error = ( ::coupon::Error::type)ecast64;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->couponGroupList.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->couponGroupList.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += this->couponGroupList[_i69].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.couponGroupList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CouponGroupListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CouponGroupListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("couponGroupList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->couponGroupList.size()));
    std::vector< ::coupon::CouponGroup> ::const_iterator _iter70;
    for (_iter70 = this->couponGroupList.begin(); _iter70 != this->couponGroupList.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CouponGroupListRsp &a, CouponGroupListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.couponGroupList, b.couponGroupList);
  swap(a.__isset, b.__isset);
}

CouponGroupListRsp::CouponGroupListRsp(const CouponGroupListRsp& other71) {
  error = other71.error;
  errmsg = other71.errmsg;
  couponGroupList = other71.couponGroupList;
  __isset = other71.__isset;
}
CouponGroupListRsp& CouponGroupListRsp::operator=(const CouponGroupListRsp& other72) {
  error = other72.error;
  errmsg = other72.errmsg;
  couponGroupList = other72.couponGroupList;
  __isset = other72.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CouponGroupListRsp& obj) {
  using apache::thrift::to_string;
  out << "CouponGroupListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "couponGroupList=" << to_string(obj.couponGroupList);
  out << ")";
  return out;
}


WareLabelCountReq::~WareLabelCountReq() throw() {
}


void WareLabelCountReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* WareLabelCountReq::ascii_fingerprint = "8053C70253C5A9069FE9081AC657A7D5";
const uint8_t WareLabelCountReq::binary_fingerprint[16] = {0x80,0x53,0xC7,0x02,0x53,0xC5,0xA9,0x06,0x9F,0xE9,0x08,0x1A,0xC6,0x57,0xA7,0xD5};

uint32_t WareLabelCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelCountReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelCountReq &a, WareLabelCountReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

WareLabelCountReq::WareLabelCountReq(const WareLabelCountReq& other73) {
  cond = other73.cond;
  __isset = other73.__isset;
}
WareLabelCountReq& WareLabelCountReq::operator=(const WareLabelCountReq& other74) {
  cond = other74.cond;
  __isset = other74.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelCountReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelCountReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


WareLabelCountRsp::~WareLabelCountRsp() throw() {
}


void WareLabelCountRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void WareLabelCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* WareLabelCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t WareLabelCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t WareLabelCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast75;
          xfer += iprot->readI32(ecast75);
          this->error = ( ::coupon::Error::type)ecast75;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelCountRsp &a, WareLabelCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

WareLabelCountRsp::WareLabelCountRsp(const WareLabelCountRsp& other76) {
  error = other76.error;
  errmsg = other76.errmsg;
  count = other76.count;
  __isset = other76.__isset;
}
WareLabelCountRsp& WareLabelCountRsp::operator=(const WareLabelCountRsp& other77) {
  error = other77.error;
  errmsg = other77.errmsg;
  count = other77.count;
  __isset = other77.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelCountRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


WareLabelListReq::~WareLabelListReq() throw() {
}


void WareLabelListReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

void WareLabelListReq::__set_offset(const int32_t val) {
  this->offset = val;
}

void WareLabelListReq::__set_rows(const int32_t val) {
  this->rows = val;
}

const char* WareLabelListReq::ascii_fingerprint = "BD076B53465FFAADF958E4A7D7BE3635";
const uint8_t WareLabelListReq::binary_fingerprint[16] = {0xBD,0x07,0x6B,0x53,0x46,0x5F,0xFA,0xAD,0xF9,0x58,0xE4,0xA7,0xD7,0xBE,0x36,0x35};

uint32_t WareLabelListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_offset = false;
  bool isset_rows = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rows);
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WareLabelListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->rows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelListReq &a, WareLabelListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.offset, b.offset);
  swap(a.rows, b.rows);
  swap(a.__isset, b.__isset);
}

WareLabelListReq::WareLabelListReq(const WareLabelListReq& other78) {
  cond = other78.cond;
  offset = other78.offset;
  rows = other78.rows;
  __isset = other78.__isset;
}
WareLabelListReq& WareLabelListReq::operator=(const WareLabelListReq& other79) {
  cond = other79.cond;
  offset = other79.offset;
  rows = other79.rows;
  __isset = other79.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelListReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ", " << "offset=" << to_string(obj.offset);
  out << ", " << "rows=" << to_string(obj.rows);
  out << ")";
  return out;
}


WareLabelListRsp::~WareLabelListRsp() throw() {
}


void WareLabelListRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void WareLabelListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelListRsp::__set_wareLabelList(const std::vector< ::coupon::WareLabel> & val) {
  this->wareLabelList = val;
}

const char* WareLabelListRsp::ascii_fingerprint = "EEC11B9EA9B8AF43D678B6B21B895416";
const uint8_t WareLabelListRsp::binary_fingerprint[16] = {0xEE,0xC1,0x1B,0x9E,0xA9,0xB8,0xAF,0x43,0xD6,0x78,0xB6,0xB2,0x1B,0x89,0x54,0x16};

uint32_t WareLabelListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast80;
          xfer += iprot->readI32(ecast80);
          this->error = ( ::coupon::Error::type)ecast80;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wareLabelList.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _etype84;
            xfer += iprot->readListBegin(_etype84, _size81);
            this->wareLabelList.resize(_size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              xfer += this->wareLabelList[_i85].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.wareLabelList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabelList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->wareLabelList.size()));
    std::vector< ::coupon::WareLabel> ::const_iterator _iter86;
    for (_iter86 = this->wareLabelList.begin(); _iter86 != this->wareLabelList.end(); ++_iter86)
    {
      xfer += (*_iter86).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelListRsp &a, WareLabelListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareLabelList, b.wareLabelList);
  swap(a.__isset, b.__isset);
}

WareLabelListRsp::WareLabelListRsp(const WareLabelListRsp& other87) {
  error = other87.error;
  errmsg = other87.errmsg;
  wareLabelList = other87.wareLabelList;
  __isset = other87.__isset;
}
WareLabelListRsp& WareLabelListRsp::operator=(const WareLabelListRsp& other88) {
  error = other88.error;
  errmsg = other88.errmsg;
  wareLabelList = other88.wareLabelList;
  __isset = other88.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelListRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareLabelList=" << to_string(obj.wareLabelList);
  out << ")";
  return out;
}


WareLabelWaresCountReq::~WareLabelWaresCountReq() throw() {
}


void WareLabelWaresCountReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

const char* WareLabelWaresCountReq::ascii_fingerprint = "8053C70253C5A9069FE9081AC657A7D5";
const uint8_t WareLabelWaresCountReq::binary_fingerprint[16] = {0x80,0x53,0xC7,0x02,0x53,0xC5,0xA9,0x06,0x9F,0xE9,0x08,0x1A,0xC6,0x57,0xA7,0xD5};

uint32_t WareLabelWaresCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresCountReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresCountReq &a, WareLabelWaresCountReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

WareLabelWaresCountReq::WareLabelWaresCountReq(const WareLabelWaresCountReq& other89) {
  cond = other89.cond;
  __isset = other89.__isset;
}
WareLabelWaresCountReq& WareLabelWaresCountReq::operator=(const WareLabelWaresCountReq& other90) {
  cond = other90.cond;
  __isset = other90.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresCountReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ")";
  return out;
}


WareLabelWaresCountRsp::~WareLabelWaresCountRsp() throw() {
}


void WareLabelWaresCountRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void WareLabelWaresCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelWaresCountRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* WareLabelWaresCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t WareLabelWaresCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t WareLabelWaresCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast91;
          xfer += iprot->readI32(ecast91);
          this->error = ( ::coupon::Error::type)ecast91;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresCountRsp &a, WareLabelWaresCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

WareLabelWaresCountRsp::WareLabelWaresCountRsp(const WareLabelWaresCountRsp& other92) {
  error = other92.error;
  errmsg = other92.errmsg;
  count = other92.count;
  __isset = other92.__isset;
}
WareLabelWaresCountRsp& WareLabelWaresCountRsp::operator=(const WareLabelWaresCountRsp& other93) {
  error = other93.error;
  errmsg = other93.errmsg;
  count = other93.count;
  __isset = other93.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresCountRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


WareLabelWaresListReq::~WareLabelWaresListReq() throw() {
}


void WareLabelWaresListReq::__set_cond(const  ::coupon::MultipleCondition& val) {
  this->cond = val;
__isset.cond = true;
}

void WareLabelWaresListReq::__set_offset(const int32_t val) {
  this->offset = val;
}

void WareLabelWaresListReq::__set_rows(const int32_t val) {
  this->rows = val;
}

const char* WareLabelWaresListReq::ascii_fingerprint = "BD076B53465FFAADF958E4A7D7BE3635";
const uint8_t WareLabelWaresListReq::binary_fingerprint[16] = {0xBD,0x07,0x6B,0x53,0x46,0x5F,0xFA,0xAD,0xF9,0x58,0xE4,0xA7,0xD7,0xBE,0x36,0x35};

uint32_t WareLabelWaresListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_offset = false;
  bool isset_rows = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond.read(iprot);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rows);
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WareLabelWaresListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresListReq");

  if (this->__isset.cond) {
    xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cond.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->rows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresListReq &a, WareLabelWaresListReq &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.offset, b.offset);
  swap(a.rows, b.rows);
  swap(a.__isset, b.__isset);
}

WareLabelWaresListReq::WareLabelWaresListReq(const WareLabelWaresListReq& other94) {
  cond = other94.cond;
  offset = other94.offset;
  rows = other94.rows;
  __isset = other94.__isset;
}
WareLabelWaresListReq& WareLabelWaresListReq::operator=(const WareLabelWaresListReq& other95) {
  cond = other95.cond;
  offset = other95.offset;
  rows = other95.rows;
  __isset = other95.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresListReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresListReq(";
  out << "cond="; (obj.__isset.cond ? (out << to_string(obj.cond)) : (out << "<null>"));
  out << ", " << "offset=" << to_string(obj.offset);
  out << ", " << "rows=" << to_string(obj.rows);
  out << ")";
  return out;
}


WareLabelWaresListRsp::~WareLabelWaresListRsp() throw() {
}


void WareLabelWaresListRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void WareLabelWaresListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelWaresListRsp::__set_wareLabelWaresList(const std::vector< ::coupon::WareLabelWares> & val) {
  this->wareLabelWaresList = val;
}

const char* WareLabelWaresListRsp::ascii_fingerprint = "C180EC29FACE44EAC94EE66E76269F7B";
const uint8_t WareLabelWaresListRsp::binary_fingerprint[16] = {0xC1,0x80,0xEC,0x29,0xFA,0xCE,0x44,0xEA,0xC9,0x4E,0xE6,0x6E,0x76,0x26,0x9F,0x7B};

uint32_t WareLabelWaresListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast96;
          xfer += iprot->readI32(ecast96);
          this->error = ( ::coupon::Error::type)ecast96;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wareLabelWaresList.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->wareLabelWaresList.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += this->wareLabelWaresList[_i101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.wareLabelWaresList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelWaresListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelWaresListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabelWaresList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->wareLabelWaresList.size()));
    std::vector< ::coupon::WareLabelWares> ::const_iterator _iter102;
    for (_iter102 = this->wareLabelWaresList.begin(); _iter102 != this->wareLabelWaresList.end(); ++_iter102)
    {
      xfer += (*_iter102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelWaresListRsp &a, WareLabelWaresListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareLabelWaresList, b.wareLabelWaresList);
  swap(a.__isset, b.__isset);
}

WareLabelWaresListRsp::WareLabelWaresListRsp(const WareLabelWaresListRsp& other103) {
  error = other103.error;
  errmsg = other103.errmsg;
  wareLabelWaresList = other103.wareLabelWaresList;
  __isset = other103.__isset;
}
WareLabelWaresListRsp& WareLabelWaresListRsp::operator=(const WareLabelWaresListRsp& other104) {
  error = other104.error;
  errmsg = other104.errmsg;
  wareLabelWaresList = other104.wareLabelWaresList;
  __isset = other104.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelWaresListRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelWaresListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareLabelWaresList=" << to_string(obj.wareLabelWaresList);
  out << ")";
  return out;
}


BatchUserCouponReq::~BatchUserCouponReq() throw() {
}


void BatchUserCouponReq::__set_codeList(const std::vector<std::string> & val) {
  this->codeList = val;
}

const char* BatchUserCouponReq::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t BatchUserCouponReq::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t BatchUserCouponReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_codeList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->codeList.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->codeList.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += iprot->readString(this->codeList[_i109]);
            }
            xfer += iprot->readListEnd();
          }
          isset_codeList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_codeList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BatchUserCouponReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchUserCouponReq");

  xfer += oprot->writeFieldBegin("codeList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->codeList.size()));
    std::vector<std::string> ::const_iterator _iter110;
    for (_iter110 = this->codeList.begin(); _iter110 != this->codeList.end(); ++_iter110)
    {
      xfer += oprot->writeString((*_iter110));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchUserCouponReq &a, BatchUserCouponReq &b) {
  using ::std::swap;
  swap(a.codeList, b.codeList);
}

BatchUserCouponReq::BatchUserCouponReq(const BatchUserCouponReq& other111) {
  codeList = other111.codeList;
}
BatchUserCouponReq& BatchUserCouponReq::operator=(const BatchUserCouponReq& other112) {
  codeList = other112.codeList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchUserCouponReq& obj) {
  using apache::thrift::to_string;
  out << "BatchUserCouponReq(";
  out << "codeList=" << to_string(obj.codeList);
  out << ")";
  return out;
}


BatchUserCouponRsp::~BatchUserCouponRsp() throw() {
}


void BatchUserCouponRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void BatchUserCouponRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void BatchUserCouponRsp::__set_userCouponMap(const std::map<std::string,  ::coupon::UserCoupon> & val) {
  this->userCouponMap = val;
}

const char* BatchUserCouponRsp::ascii_fingerprint = "A8568A98DF673E728B066807ED986FF7";
const uint8_t BatchUserCouponRsp::binary_fingerprint[16] = {0xA8,0x56,0x8A,0x98,0xDF,0x67,0x3E,0x72,0x8B,0x06,0x68,0x07,0xED,0x98,0x6F,0xF7};

uint32_t BatchUserCouponRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast113;
          xfer += iprot->readI32(ecast113);
          this->error = ( ::coupon::Error::type)ecast113;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userCouponMap.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _ktype115;
            ::apache::thrift::protocol::TType _vtype116;
            xfer += iprot->readMapBegin(_ktype115, _vtype116, _size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              std::string _key119;
              xfer += iprot->readString(_key119);
               ::coupon::UserCoupon& _val120 = this->userCouponMap[_key119];
              xfer += _val120.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userCouponMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchUserCouponRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchUserCouponRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userCouponMap", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userCouponMap.size()));
    std::map<std::string,  ::coupon::UserCoupon> ::const_iterator _iter121;
    for (_iter121 = this->userCouponMap.begin(); _iter121 != this->userCouponMap.end(); ++_iter121)
    {
      xfer += oprot->writeString(_iter121->first);
      xfer += _iter121->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchUserCouponRsp &a, BatchUserCouponRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.userCouponMap, b.userCouponMap);
  swap(a.__isset, b.__isset);
}

BatchUserCouponRsp::BatchUserCouponRsp(const BatchUserCouponRsp& other122) {
  error = other122.error;
  errmsg = other122.errmsg;
  userCouponMap = other122.userCouponMap;
  __isset = other122.__isset;
}
BatchUserCouponRsp& BatchUserCouponRsp::operator=(const BatchUserCouponRsp& other123) {
  error = other123.error;
  errmsg = other123.errmsg;
  userCouponMap = other123.userCouponMap;
  __isset = other123.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchUserCouponRsp& obj) {
  using apache::thrift::to_string;
  out << "BatchUserCouponRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "userCouponMap=" << to_string(obj.userCouponMap);
  out << ")";
  return out;
}


VerifyArgotReq::~VerifyArgotReq() throw() {
}


void VerifyArgotReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void VerifyArgotReq::__set_start_draw_time(const int32_t val) {
  this->start_draw_time = val;
}

void VerifyArgotReq::__set_argot(const std::string& val) {
  this->argot = val;
}

const char* VerifyArgotReq::ascii_fingerprint = "4086F12A5C2D615560236565C542F3C3";
const uint8_t VerifyArgotReq::binary_fingerprint[16] = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

uint32_t VerifyArgotReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_argot = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_draw_time);
          this->__isset.start_draw_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          isset_argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_argot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t VerifyArgotReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VerifyArgotReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_draw_time", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->start_draw_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VerifyArgotReq &a, VerifyArgotReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.start_draw_time, b.start_draw_time);
  swap(a.argot, b.argot);
  swap(a.__isset, b.__isset);
}

VerifyArgotReq::VerifyArgotReq(const VerifyArgotReq& other124) {
  coupon_group_id = other124.coupon_group_id;
  start_draw_time = other124.start_draw_time;
  argot = other124.argot;
  __isset = other124.__isset;
}
VerifyArgotReq& VerifyArgotReq::operator=(const VerifyArgotReq& other125) {
  coupon_group_id = other125.coupon_group_id;
  start_draw_time = other125.start_draw_time;
  argot = other125.argot;
  __isset = other125.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VerifyArgotReq& obj) {
  using apache::thrift::to_string;
  out << "VerifyArgotReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "start_draw_time=" << to_string(obj.start_draw_time);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ")";
  return out;
}


VerifyArgotRsp::~VerifyArgotRsp() throw() {
}


void VerifyArgotRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void VerifyArgotRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void VerifyArgotRsp::__set_argot(const std::string& val) {
  this->argot = val;
}

const char* VerifyArgotRsp::ascii_fingerprint = "38C252E94E93B69D04EB3A6EE2F9EDFB";
const uint8_t VerifyArgotRsp::binary_fingerprint[16] = {0x38,0xC2,0x52,0xE9,0x4E,0x93,0xB6,0x9D,0x04,0xEB,0x3A,0x6E,0xE2,0xF9,0xED,0xFB};

uint32_t VerifyArgotRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast126;
          xfer += iprot->readI32(ecast126);
          this->error = ( ::coupon::Error::type)ecast126;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          this->__isset.argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyArgotRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VerifyArgotRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VerifyArgotRsp &a, VerifyArgotRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.argot, b.argot);
  swap(a.__isset, b.__isset);
}

VerifyArgotRsp::VerifyArgotRsp(const VerifyArgotRsp& other127) {
  error = other127.error;
  errmsg = other127.errmsg;
  argot = other127.argot;
  __isset = other127.__isset;
}
VerifyArgotRsp& VerifyArgotRsp::operator=(const VerifyArgotRsp& other128) {
  error = other128.error;
  errmsg = other128.errmsg;
  argot = other128.argot;
  __isset = other128.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VerifyArgotRsp& obj) {
  using apache::thrift::to_string;
  out << "VerifyArgotRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ")";
  return out;
}


BatchDispatchReq::~BatchDispatchReq() throw() {
}


void BatchDispatchReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void BatchDispatchReq::__set_user_id_list(const std::vector<int64_t> & val) {
  this->user_id_list = val;
}

const char* BatchDispatchReq::ascii_fingerprint = "10B0DAF3A336BE67A0D106228B97776E";
const uint8_t BatchDispatchReq::binary_fingerprint[16] = {0x10,0xB0,0xDA,0xF3,0xA3,0x36,0xBE,0x67,0xA0,0xD1,0x06,0x22,0x8B,0x97,0x77,0x6E};

uint32_t BatchDispatchReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_user_id_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->user_id_list.clear();
            uint32_t _size129;
            ::apache::thrift::protocol::TType _etype132;
            xfer += iprot->readListBegin(_etype132, _size129);
            this->user_id_list.resize(_size129);
            uint32_t _i133;
            for (_i133 = 0; _i133 < _size129; ++_i133)
            {
              xfer += iprot->readI64(this->user_id_list[_i133]);
            }
            xfer += iprot->readListEnd();
          }
          isset_user_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BatchDispatchReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchDispatchReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->user_id_list.size()));
    std::vector<int64_t> ::const_iterator _iter134;
    for (_iter134 = this->user_id_list.begin(); _iter134 != this->user_id_list.end(); ++_iter134)
    {
      xfer += oprot->writeI64((*_iter134));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchDispatchReq &a, BatchDispatchReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.user_id_list, b.user_id_list);
}

BatchDispatchReq::BatchDispatchReq(const BatchDispatchReq& other135) {
  coupon_group_id = other135.coupon_group_id;
  user_id_list = other135.user_id_list;
}
BatchDispatchReq& BatchDispatchReq::operator=(const BatchDispatchReq& other136) {
  coupon_group_id = other136.coupon_group_id;
  user_id_list = other136.user_id_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchDispatchReq& obj) {
  using apache::thrift::to_string;
  out << "BatchDispatchReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "user_id_list=" << to_string(obj.user_id_list);
  out << ")";
  return out;
}


BatchDispatchRsp::~BatchDispatchRsp() throw() {
}


void BatchDispatchRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void BatchDispatchRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void BatchDispatchRsp::__set_count(const int32_t val) {
  this->count = val;
}

void BatchDispatchRsp::__set_success_count(const int32_t val) {
  this->success_count = val;
}

void BatchDispatchRsp::__set_time_cost(const int32_t val) {
  this->time_cost = val;
}

const char* BatchDispatchRsp::ascii_fingerprint = "D1D2E3F9C70C318B91FA3656EAB4E80C";
const uint8_t BatchDispatchRsp::binary_fingerprint[16] = {0xD1,0xD2,0xE3,0xF9,0xC7,0x0C,0x31,0x8B,0x91,0xFA,0x36,0x56,0xEA,0xB4,0xE8,0x0C};

uint32_t BatchDispatchRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast137;
          xfer += iprot->readI32(ecast137);
          this->error = ( ::coupon::Error::type)ecast137;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success_count);
          this->__isset.success_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_cost);
          this->__isset.time_cost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchDispatchRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchDispatchRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("success_count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->success_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_cost", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->time_cost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchDispatchRsp &a, BatchDispatchRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.success_count, b.success_count);
  swap(a.time_cost, b.time_cost);
  swap(a.__isset, b.__isset);
}

BatchDispatchRsp::BatchDispatchRsp(const BatchDispatchRsp& other138) {
  error = other138.error;
  errmsg = other138.errmsg;
  count = other138.count;
  success_count = other138.success_count;
  time_cost = other138.time_cost;
  __isset = other138.__isset;
}
BatchDispatchRsp& BatchDispatchRsp::operator=(const BatchDispatchRsp& other139) {
  error = other139.error;
  errmsg = other139.errmsg;
  count = other139.count;
  success_count = other139.success_count;
  time_cost = other139.time_cost;
  __isset = other139.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchDispatchRsp& obj) {
  using apache::thrift::to_string;
  out << "BatchDispatchRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "success_count=" << to_string(obj.success_count);
  out << ", " << "time_cost=" << to_string(obj.time_cost);
  out << ")";
  return out;
}


BatchExportReq::~BatchExportReq() throw() {
}


void BatchExportReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void BatchExportReq::__set_count(const int32_t val) {
  this->count = val;
}

const char* BatchExportReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t BatchExportReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t BatchExportReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BatchExportReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchExportReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchExportReq &a, BatchExportReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.count, b.count);
}

BatchExportReq::BatchExportReq(const BatchExportReq& other140) {
  coupon_group_id = other140.coupon_group_id;
  count = other140.count;
}
BatchExportReq& BatchExportReq::operator=(const BatchExportReq& other141) {
  coupon_group_id = other141.coupon_group_id;
  count = other141.count;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchExportReq& obj) {
  using apache::thrift::to_string;
  out << "BatchExportReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


BatchExportRsp::~BatchExportRsp() throw() {
}


void BatchExportRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void BatchExportRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void BatchExportRsp::__set_count(const int32_t val) {
  this->count = val;
}

void BatchExportRsp::__set_time_cost(const int32_t val) {
  this->time_cost = val;
}

const char* BatchExportRsp::ascii_fingerprint = "31BFBC55E24CCAB83D9E1E9DED82F2A1";
const uint8_t BatchExportRsp::binary_fingerprint[16] = {0x31,0xBF,0xBC,0x55,0xE2,0x4C,0xCA,0xB8,0x3D,0x9E,0x1E,0x9D,0xED,0x82,0xF2,0xA1};

uint32_t BatchExportRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast142;
          xfer += iprot->readI32(ecast142);
          this->error = ( ::coupon::Error::type)ecast142;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_cost);
          this->__isset.time_cost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchExportRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchExportRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_cost", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->time_cost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchExportRsp &a, BatchExportRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.time_cost, b.time_cost);
  swap(a.__isset, b.__isset);
}

BatchExportRsp::BatchExportRsp(const BatchExportRsp& other143) {
  error = other143.error;
  errmsg = other143.errmsg;
  count = other143.count;
  time_cost = other143.time_cost;
  __isset = other143.__isset;
}
BatchExportRsp& BatchExportRsp::operator=(const BatchExportRsp& other144) {
  error = other144.error;
  errmsg = other144.errmsg;
  count = other144.count;
  time_cost = other144.time_cost;
  __isset = other144.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchExportRsp& obj) {
  using apache::thrift::to_string;
  out << "BatchExportRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "time_cost=" << to_string(obj.time_cost);
  out << ")";
  return out;
}


BatchExportCodeReq::~BatchExportCodeReq() throw() {
}


void BatchExportCodeReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void BatchExportCodeReq::__set_page(const int32_t val) {
  this->page = val;
}

void BatchExportCodeReq::__set_count(const int32_t val) {
  this->count = val;
}

const char* BatchExportCodeReq::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t BatchExportCodeReq::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t BatchExportCodeReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_page = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          isset_page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_page)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BatchExportCodeReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchExportCodeReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchExportCodeReq &a, BatchExportCodeReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.page, b.page);
  swap(a.count, b.count);
}

BatchExportCodeReq::BatchExportCodeReq(const BatchExportCodeReq& other145) {
  coupon_group_id = other145.coupon_group_id;
  page = other145.page;
  count = other145.count;
}
BatchExportCodeReq& BatchExportCodeReq::operator=(const BatchExportCodeReq& other146) {
  coupon_group_id = other146.coupon_group_id;
  page = other146.page;
  count = other146.count;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchExportCodeReq& obj) {
  using apache::thrift::to_string;
  out << "BatchExportCodeReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


BatchExportCodeRsp::~BatchExportCodeRsp() throw() {
}


void BatchExportCodeRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void BatchExportCodeRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void BatchExportCodeRsp::__set_page(const int32_t val) {
  this->page = val;
}

void BatchExportCodeRsp::__set_count(const int32_t val) {
  this->count = val;
}

void BatchExportCodeRsp::__set_total(const int32_t val) {
  this->total = val;
}

void BatchExportCodeRsp::__set_codes(const std::vector<std::string> & val) {
  this->codes = val;
}

const char* BatchExportCodeRsp::ascii_fingerprint = "90B5CF11EC9D167122D77415BD5582A1";
const uint8_t BatchExportCodeRsp::binary_fingerprint[16] = {0x90,0xB5,0xCF,0x11,0xEC,0x9D,0x16,0x71,0x22,0xD7,0x74,0x15,0xBD,0x55,0x82,0xA1};

uint32_t BatchExportCodeRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast147;
          xfer += iprot->readI32(ecast147);
          this->error = ( ::coupon::Error::type)ecast147;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->codes.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _etype151;
            xfer += iprot->readListBegin(_etype151, _size148);
            this->codes.resize(_size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              xfer += iprot->readString(this->codes[_i152]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.codes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchExportCodeRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchExportCodeRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("codes", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->codes.size()));
    std::vector<std::string> ::const_iterator _iter153;
    for (_iter153 = this->codes.begin(); _iter153 != this->codes.end(); ++_iter153)
    {
      xfer += oprot->writeString((*_iter153));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchExportCodeRsp &a, BatchExportCodeRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.page, b.page);
  swap(a.count, b.count);
  swap(a.total, b.total);
  swap(a.codes, b.codes);
  swap(a.__isset, b.__isset);
}

BatchExportCodeRsp::BatchExportCodeRsp(const BatchExportCodeRsp& other154) {
  error = other154.error;
  errmsg = other154.errmsg;
  page = other154.page;
  count = other154.count;
  total = other154.total;
  codes = other154.codes;
  __isset = other154.__isset;
}
BatchExportCodeRsp& BatchExportCodeRsp::operator=(const BatchExportCodeRsp& other155) {
  error = other155.error;
  errmsg = other155.errmsg;
  page = other155.page;
  count = other155.count;
  total = other155.total;
  codes = other155.codes;
  __isset = other155.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchExportCodeRsp& obj) {
  using apache::thrift::to_string;
  out << "BatchExportCodeRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "total=" << to_string(obj.total);
  out << ", " << "codes=" << to_string(obj.codes);
  out << ")";
  return out;
}


UpdateJumpReq::~UpdateJumpReq() throw() {
}


void UpdateJumpReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void UpdateJumpReq::__set_name(const std::string& val) {
  this->name = val;
}

void UpdateJumpReq::__set_jump_label(const std::string& val) {
  this->jump_label = val;
}

void UpdateJumpReq::__set_jump_data(const std::string& val) {
  this->jump_data = val;
}

const char* UpdateJumpReq::ascii_fingerprint = "C4A8A7FE71C2DB9CB73D92862AA4C591";
const uint8_t UpdateJumpReq::binary_fingerprint[16] = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

uint32_t UpdateJumpReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_name = false;
  bool isset_jump_label = false;
  bool isset_jump_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_label);
          isset_jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jump_data);
          isset_jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_jump_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_jump_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateJumpReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateJumpReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_label", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateJumpReq &a, UpdateJumpReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.name, b.name);
  swap(a.jump_label, b.jump_label);
  swap(a.jump_data, b.jump_data);
}

UpdateJumpReq::UpdateJumpReq(const UpdateJumpReq& other156) {
  coupon_group_id = other156.coupon_group_id;
  name = other156.name;
  jump_label = other156.jump_label;
  jump_data = other156.jump_data;
}
UpdateJumpReq& UpdateJumpReq::operator=(const UpdateJumpReq& other157) {
  coupon_group_id = other157.coupon_group_id;
  name = other157.name;
  jump_label = other157.jump_label;
  jump_data = other157.jump_data;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateJumpReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateJumpReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "jump_label=" << to_string(obj.jump_label);
  out << ", " << "jump_data=" << to_string(obj.jump_data);
  out << ")";
  return out;
}


UpdateJumpRsp::~UpdateJumpRsp() throw() {
}


void UpdateJumpRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UpdateJumpRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateJumpRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateJumpRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateJumpRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast158;
          xfer += iprot->readI32(ecast158);
          this->error = ( ::coupon::Error::type)ecast158;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateJumpRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateJumpRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateJumpRsp &a, UpdateJumpRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateJumpRsp::UpdateJumpRsp(const UpdateJumpRsp& other159) {
  error = other159.error;
  errmsg = other159.errmsg;
  __isset = other159.__isset;
}
UpdateJumpRsp& UpdateJumpRsp::operator=(const UpdateJumpRsp& other160) {
  error = other160.error;
  errmsg = other160.errmsg;
  __isset = other160.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateJumpRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateJumpRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


UpdateArgotJumpReq::~UpdateArgotJumpReq() throw() {
}


void UpdateArgotJumpReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void UpdateArgotJumpReq::__set_name(const std::string& val) {
  this->name = val;
}

void UpdateArgotJumpReq::__set_img(const std::string& val) {
  this->img = val;
}

void UpdateArgotJumpReq::__set_img_width(const int32_t val) {
  this->img_width = val;
}

void UpdateArgotJumpReq::__set_img_height(const int32_t val) {
  this->img_height = val;
}

void UpdateArgotJumpReq::__set_button_text(const std::string& val) {
  this->button_text = val;
}

void UpdateArgotJumpReq::__set_argot_jump_label(const std::string& val) {
  this->argot_jump_label = val;
}

void UpdateArgotJumpReq::__set_argot_jump_data(const std::string& val) {
  this->argot_jump_data = val;
}

const char* UpdateArgotJumpReq::ascii_fingerprint = "22764D372E130AE20829A22C3068E8CE";
const uint8_t UpdateArgotJumpReq::binary_fingerprint[16] = {0x22,0x76,0x4D,0x37,0x2E,0x13,0x0A,0xE2,0x08,0x29,0xA2,0x2C,0x30,0x68,0xE8,0xCE};

uint32_t UpdateArgotJumpReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_name = false;
  bool isset_img = false;
  bool isset_img_width = false;
  bool isset_img_height = false;
  bool isset_button_text = false;
  bool isset_argot_jump_label = false;
  bool isset_argot_jump_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->img);
          isset_img = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_width);
          isset_img_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->img_height);
          isset_img_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->button_text);
          isset_button_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_label);
          isset_argot_jump_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot_jump_data);
          isset_argot_jump_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_img)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_img_width)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_img_height)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_button_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_argot_jump_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_argot_jump_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateArgotJumpReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateArgotJumpReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->img);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_width", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->img_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_height", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->img_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("button_text", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->button_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_label", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->argot_jump_label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot_jump_data", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->argot_jump_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateArgotJumpReq &a, UpdateArgotJumpReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.name, b.name);
  swap(a.img, b.img);
  swap(a.img_width, b.img_width);
  swap(a.img_height, b.img_height);
  swap(a.button_text, b.button_text);
  swap(a.argot_jump_label, b.argot_jump_label);
  swap(a.argot_jump_data, b.argot_jump_data);
}

UpdateArgotJumpReq::UpdateArgotJumpReq(const UpdateArgotJumpReq& other161) {
  coupon_group_id = other161.coupon_group_id;
  name = other161.name;
  img = other161.img;
  img_width = other161.img_width;
  img_height = other161.img_height;
  button_text = other161.button_text;
  argot_jump_label = other161.argot_jump_label;
  argot_jump_data = other161.argot_jump_data;
}
UpdateArgotJumpReq& UpdateArgotJumpReq::operator=(const UpdateArgotJumpReq& other162) {
  coupon_group_id = other162.coupon_group_id;
  name = other162.name;
  img = other162.img;
  img_width = other162.img_width;
  img_height = other162.img_height;
  button_text = other162.button_text;
  argot_jump_label = other162.argot_jump_label;
  argot_jump_data = other162.argot_jump_data;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateArgotJumpReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateArgotJumpReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "img=" << to_string(obj.img);
  out << ", " << "img_width=" << to_string(obj.img_width);
  out << ", " << "img_height=" << to_string(obj.img_height);
  out << ", " << "button_text=" << to_string(obj.button_text);
  out << ", " << "argot_jump_label=" << to_string(obj.argot_jump_label);
  out << ", " << "argot_jump_data=" << to_string(obj.argot_jump_data);
  out << ")";
  return out;
}


UpdateArgotJumpRsp::~UpdateArgotJumpRsp() throw() {
}


void UpdateArgotJumpRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UpdateArgotJumpRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateArgotJumpRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateArgotJumpRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateArgotJumpRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast163;
          xfer += iprot->readI32(ecast163);
          this->error = ( ::coupon::Error::type)ecast163;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateArgotJumpRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateArgotJumpRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateArgotJumpRsp &a, UpdateArgotJumpRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateArgotJumpRsp::UpdateArgotJumpRsp(const UpdateArgotJumpRsp& other164) {
  error = other164.error;
  errmsg = other164.errmsg;
  __isset = other164.__isset;
}
UpdateArgotJumpRsp& UpdateArgotJumpRsp::operator=(const UpdateArgotJumpRsp& other165) {
  error = other165.error;
  errmsg = other165.errmsg;
  __isset = other165.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateArgotJumpRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateArgotJumpRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


UpdateOnlineReq::~UpdateOnlineReq() throw() {
}


void UpdateOnlineReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void UpdateOnlineReq::__set_name(const std::string& val) {
  this->name = val;
}

void UpdateOnlineReq::__set_title(const std::string& val) {
  this->title = val;
}

void UpdateOnlineReq::__set_can_draw_count(const int32_t val) {
  this->can_draw_count = val;
}

void UpdateOnlineReq::__set_argot(const std::string& val) {
  this->argot = val;
}

void UpdateOnlineReq::__set_end_draw_time(const int32_t val) {
  this->end_draw_time = val;
}

void UpdateOnlineReq::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

const char* UpdateOnlineReq::ascii_fingerprint = "81472DE77797F63C4C26A5C6EC76BB23";
const uint8_t UpdateOnlineReq::binary_fingerprint[16] = {0x81,0x47,0x2D,0xE7,0x77,0x97,0xF6,0x3C,0x4C,0x26,0xA5,0xC6,0xEC,0x76,0xBB,0x23};

uint32_t UpdateOnlineReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_name = false;
  bool isset_title = false;
  bool isset_can_draw_count = false;
  bool isset_argot = false;
  bool isset_end_draw_time = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->can_draw_count);
          isset_can_draw_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          isset_argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_draw_time);
          isset_end_draw_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_can_draw_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_argot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_end_draw_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateOnlineReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateOnlineReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("can_draw_count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->can_draw_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_draw_time", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->end_draw_time);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateOnlineReq &a, UpdateOnlineReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.name, b.name);
  swap(a.title, b.title);
  swap(a.can_draw_count, b.can_draw_count);
  swap(a.argot, b.argot);
  swap(a.end_draw_time, b.end_draw_time);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

UpdateOnlineReq::UpdateOnlineReq(const UpdateOnlineReq& other166) {
  coupon_group_id = other166.coupon_group_id;
  name = other166.name;
  title = other166.title;
  can_draw_count = other166.can_draw_count;
  argot = other166.argot;
  end_draw_time = other166.end_draw_time;
  description = other166.description;
  __isset = other166.__isset;
}
UpdateOnlineReq& UpdateOnlineReq::operator=(const UpdateOnlineReq& other167) {
  coupon_group_id = other167.coupon_group_id;
  name = other167.name;
  title = other167.title;
  can_draw_count = other167.can_draw_count;
  argot = other167.argot;
  end_draw_time = other167.end_draw_time;
  description = other167.description;
  __isset = other167.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateOnlineReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateOnlineReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "can_draw_count=" << to_string(obj.can_draw_count);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ", " << "end_draw_time=" << to_string(obj.end_draw_time);
  out << ", " << "description="; (obj.__isset.description ? (out << to_string(obj.description)) : (out << "<null>"));
  out << ")";
  return out;
}


UpdateOnlineRsp::~UpdateOnlineRsp() throw() {
}


void UpdateOnlineRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UpdateOnlineRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateOnlineRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateOnlineRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateOnlineRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast168;
          xfer += iprot->readI32(ecast168);
          this->error = ( ::coupon::Error::type)ecast168;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateOnlineRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateOnlineRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateOnlineRsp &a, UpdateOnlineRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateOnlineRsp::UpdateOnlineRsp(const UpdateOnlineRsp& other169) {
  error = other169.error;
  errmsg = other169.errmsg;
  __isset = other169.__isset;
}
UpdateOnlineRsp& UpdateOnlineRsp::operator=(const UpdateOnlineRsp& other170) {
  error = other170.error;
  errmsg = other170.errmsg;
  __isset = other170.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateOnlineRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateOnlineRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


OfflineReq::~OfflineReq() throw() {
}


void OfflineReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

const char* OfflineReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t OfflineReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t OfflineReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OfflineReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OfflineReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OfflineReq &a, OfflineReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
}

OfflineReq::OfflineReq(const OfflineReq& other171) {
  coupon_group_id = other171.coupon_group_id;
}
OfflineReq& OfflineReq::operator=(const OfflineReq& other172) {
  coupon_group_id = other172.coupon_group_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OfflineReq& obj) {
  using apache::thrift::to_string;
  out << "OfflineReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ")";
  return out;
}


OfflineRsp::~OfflineRsp() throw() {
}


void OfflineRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void OfflineRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* OfflineRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t OfflineRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t OfflineRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast173;
          xfer += iprot->readI32(ecast173);
          this->error = ( ::coupon::Error::type)ecast173;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OfflineRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("OfflineRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(OfflineRsp &a, OfflineRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

OfflineRsp::OfflineRsp(const OfflineRsp& other174) {
  error = other174.error;
  errmsg = other174.errmsg;
  __isset = other174.__isset;
}
OfflineRsp& OfflineRsp::operator=(const OfflineRsp& other175) {
  error = other175.error;
  errmsg = other175.errmsg;
  __isset = other175.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OfflineRsp& obj) {
  using apache::thrift::to_string;
  out << "OfflineRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


UpdateDefaultConfigReq::~UpdateDefaultConfigReq() throw() {
}


void UpdateDefaultConfigReq::__set_config(const  ::coupon::DefaultConfig& val) {
  this->config = val;
}

const char* UpdateDefaultConfigReq::ascii_fingerprint = "C02F58208057D24E2722D5F7A0ADBC6D";
const uint8_t UpdateDefaultConfigReq::binary_fingerprint[16] = {0xC0,0x2F,0x58,0x20,0x80,0x57,0xD2,0x4E,0x27,0x22,0xD5,0xF7,0xA0,0xAD,0xBC,0x6D};

uint32_t UpdateDefaultConfigReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_config = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          isset_config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_config)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpdateDefaultConfigReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateDefaultConfigReq");

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateDefaultConfigReq &a, UpdateDefaultConfigReq &b) {
  using ::std::swap;
  swap(a.config, b.config);
}

UpdateDefaultConfigReq::UpdateDefaultConfigReq(const UpdateDefaultConfigReq& other176) {
  config = other176.config;
}
UpdateDefaultConfigReq& UpdateDefaultConfigReq::operator=(const UpdateDefaultConfigReq& other177) {
  config = other177.config;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateDefaultConfigReq& obj) {
  using apache::thrift::to_string;
  out << "UpdateDefaultConfigReq(";
  out << "config=" << to_string(obj.config);
  out << ")";
  return out;
}


UpdateDefaultConfigRsp::~UpdateDefaultConfigRsp() throw() {
}


void UpdateDefaultConfigRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UpdateDefaultConfigRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* UpdateDefaultConfigRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UpdateDefaultConfigRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UpdateDefaultConfigRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast178;
          xfer += iprot->readI32(ecast178);
          this->error = ( ::coupon::Error::type)ecast178;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateDefaultConfigRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UpdateDefaultConfigRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UpdateDefaultConfigRsp &a, UpdateDefaultConfigRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

UpdateDefaultConfigRsp::UpdateDefaultConfigRsp(const UpdateDefaultConfigRsp& other179) {
  error = other179.error;
  errmsg = other179.errmsg;
  __isset = other179.__isset;
}
UpdateDefaultConfigRsp& UpdateDefaultConfigRsp::operator=(const UpdateDefaultConfigRsp& other180) {
  error = other180.error;
  errmsg = other180.errmsg;
  __isset = other180.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UpdateDefaultConfigRsp& obj) {
  using apache::thrift::to_string;
  out << "UpdateDefaultConfigRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


ViewDefaultConfigReq::~ViewDefaultConfigReq() throw() {
}


void ViewDefaultConfigReq::__set_dummy(const bool val) {
  this->dummy = val;
}

const char* ViewDefaultConfigReq::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t ViewDefaultConfigReq::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t ViewDefaultConfigReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dummy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dummy);
          isset_dummy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dummy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ViewDefaultConfigReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ViewDefaultConfigReq");

  xfer += oprot->writeFieldBegin("dummy", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->dummy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ViewDefaultConfigReq &a, ViewDefaultConfigReq &b) {
  using ::std::swap;
  swap(a.dummy, b.dummy);
}

ViewDefaultConfigReq::ViewDefaultConfigReq(const ViewDefaultConfigReq& other181) {
  dummy = other181.dummy;
}
ViewDefaultConfigReq& ViewDefaultConfigReq::operator=(const ViewDefaultConfigReq& other182) {
  dummy = other182.dummy;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ViewDefaultConfigReq& obj) {
  using apache::thrift::to_string;
  out << "ViewDefaultConfigReq(";
  out << "dummy=" << to_string(obj.dummy);
  out << ")";
  return out;
}


ViewDefaultConfigRsp::~ViewDefaultConfigRsp() throw() {
}


void ViewDefaultConfigRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void ViewDefaultConfigRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void ViewDefaultConfigRsp::__set_config(const  ::coupon::DefaultConfig& val) {
  this->config = val;
}

const char* ViewDefaultConfigRsp::ascii_fingerprint = "DBEDF127FADA999D729B3DA57DB8B462";
const uint8_t ViewDefaultConfigRsp::binary_fingerprint[16] = {0xDB,0xED,0xF1,0x27,0xFA,0xDA,0x99,0x9D,0x72,0x9B,0x3D,0xA5,0x7D,0xB8,0xB4,0x62};

uint32_t ViewDefaultConfigRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast183;
          xfer += iprot->readI32(ecast183);
          this->error = ( ::coupon::Error::type)ecast183;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ViewDefaultConfigRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ViewDefaultConfigRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ViewDefaultConfigRsp &a, ViewDefaultConfigRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.config, b.config);
  swap(a.__isset, b.__isset);
}

ViewDefaultConfigRsp::ViewDefaultConfigRsp(const ViewDefaultConfigRsp& other184) {
  error = other184.error;
  errmsg = other184.errmsg;
  config = other184.config;
  __isset = other184.__isset;
}
ViewDefaultConfigRsp& ViewDefaultConfigRsp::operator=(const ViewDefaultConfigRsp& other185) {
  error = other185.error;
  errmsg = other185.errmsg;
  config = other185.config;
  __isset = other185.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ViewDefaultConfigRsp& obj) {
  using apache::thrift::to_string;
  out << "ViewDefaultConfigRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "config=" << to_string(obj.config);
  out << ")";
  return out;
}

} // namespace
