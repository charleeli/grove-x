/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef couponPush_TYPES_H
#define couponPush_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "coupon_types.h"


namespace couponPush {

class PushInfo;

class NameListReq;

class NameListRsp;

class PushInfoReq;

class PushInfoRsp;

typedef struct _PushInfo__isset {
  _PushInfo__isset() : user_id(false), amount(false) {}
  bool user_id :1;
  bool amount :1;
} _PushInfo__isset;

class PushInfo {
 public:

  static const char* ascii_fingerprint; // = "056BD45B5249CAA453D3C7B115F349DB";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x6B,0xD4,0x5B,0x52,0x49,0xCA,0xA4,0x53,0xD3,0xC7,0xB1,0x15,0xF3,0x49,0xDB};

  PushInfo(const PushInfo&);
  PushInfo& operator=(const PushInfo&);
  PushInfo() : user_id(0), amount(0) {
  }

  virtual ~PushInfo() throw();
  int64_t user_id;
  double amount;

  _PushInfo__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_amount(const double val);

  bool operator == (const PushInfo & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const PushInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushInfo& obj);
};

void swap(PushInfo &a, PushInfo &b);


class NameListReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  NameListReq(const NameListReq&);
  NameListReq& operator=(const NameListReq&);
  NameListReq() : page(0), count(0) {
  }

  virtual ~NameListReq() throw();
  int32_t page;
  int32_t count;

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const NameListReq & rhs) const
  {
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const NameListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NameListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NameListReq& obj);
};

void swap(NameListReq &a, NameListReq &b);

typedef struct _NameListRsp__isset {
  _NameListRsp__isset() : error(false), errmsg(false), page(false), count(false), total(false), pushInfoList(false) {}
  bool error :1;
  bool errmsg :1;
  bool page :1;
  bool count :1;
  bool total :1;
  bool pushInfoList :1;
} _NameListRsp__isset;

class NameListRsp {
 public:

  static const char* ascii_fingerprint; // = "BEFB20C9B480A4E29AD54674E10BDF36";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xFB,0x20,0xC9,0xB4,0x80,0xA4,0xE2,0x9A,0xD5,0x46,0x74,0xE1,0x0B,0xDF,0x36};

  NameListRsp(const NameListRsp&);
  NameListRsp& operator=(const NameListRsp&);
  NameListRsp() : error(( ::coupon::Error::type)0), errmsg(), page(0), count(0), total(0) {
  }

  virtual ~NameListRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t page;
  int32_t count;
  int32_t total;
  std::vector<PushInfo>  pushInfoList;

  _NameListRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  void __set_total(const int32_t val);

  void __set_pushInfoList(const std::vector<PushInfo> & val);

  bool operator == (const NameListRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(total == rhs.total))
      return false;
    if (!(pushInfoList == rhs.pushInfoList))
      return false;
    return true;
  }
  bool operator != (const NameListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NameListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NameListRsp& obj);
};

void swap(NameListRsp &a, NameListRsp &b);


class PushInfoReq {
 public:

  static const char* ascii_fingerprint; // = "22BB20BCAA6BDE84822CC8FA96113C29";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xBB,0x20,0xBC,0xAA,0x6B,0xDE,0x84,0x82,0x2C,0xC8,0xFA,0x96,0x11,0x3C,0x29};

  PushInfoReq(const PushInfoReq&);
  PushInfoReq& operator=(const PushInfoReq&);
  PushInfoReq() {
  }

  virtual ~PushInfoReq() throw();
  std::set<int64_t>  user_id_set;

  void __set_user_id_set(const std::set<int64_t> & val);

  bool operator == (const PushInfoReq & rhs) const
  {
    if (!(user_id_set == rhs.user_id_set))
      return false;
    return true;
  }
  bool operator != (const PushInfoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushInfoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushInfoReq& obj);
};

void swap(PushInfoReq &a, PushInfoReq &b);

typedef struct _PushInfoRsp__isset {
  _PushInfoRsp__isset() : error(false), errmsg(false), pushInfoList(false) {}
  bool error :1;
  bool errmsg :1;
  bool pushInfoList :1;
} _PushInfoRsp__isset;

class PushInfoRsp {
 public:

  static const char* ascii_fingerprint; // = "567F9A7EACD3A7E8B9FB62071904CBBC";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x7F,0x9A,0x7E,0xAC,0xD3,0xA7,0xE8,0xB9,0xFB,0x62,0x07,0x19,0x04,0xCB,0xBC};

  PushInfoRsp(const PushInfoRsp&);
  PushInfoRsp& operator=(const PushInfoRsp&);
  PushInfoRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~PushInfoRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector<PushInfo>  pushInfoList;

  _PushInfoRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_pushInfoList(const std::vector<PushInfo> & val);

  bool operator == (const PushInfoRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(pushInfoList == rhs.pushInfoList))
      return false;
    return true;
  }
  bool operator != (const PushInfoRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushInfoRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushInfoRsp& obj);
};

void swap(PushInfoRsp &a, PushInfoRsp &b);

} // namespace

#endif
