/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "couponPush_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace couponPush {


PushInfo::~PushInfo() throw() {
}


void PushInfo::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void PushInfo::__set_amount(const double val) {
  this->amount = val;
}

const char* PushInfo::ascii_fingerprint = "056BD45B5249CAA453D3C7B115F349DB";
const uint8_t PushInfo::binary_fingerprint[16] = {0x05,0x6B,0xD4,0x5B,0x52,0x49,0xCA,0xA4,0x53,0xD3,0xC7,0xB1,0x15,0xF3,0x49,0xDB};

uint32_t PushInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->amount);
          this->__isset.amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PushInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PushInfo");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PushInfo &a, PushInfo &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.amount, b.amount);
  swap(a.__isset, b.__isset);
}

PushInfo::PushInfo(const PushInfo& other0) {
  user_id = other0.user_id;
  amount = other0.amount;
  __isset = other0.__isset;
}
PushInfo& PushInfo::operator=(const PushInfo& other1) {
  user_id = other1.user_id;
  amount = other1.amount;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PushInfo& obj) {
  using apache::thrift::to_string;
  out << "PushInfo(";
  out << "user_id=" << to_string(obj.user_id);
  out << ", " << "amount=" << to_string(obj.amount);
  out << ")";
  return out;
}


NameListReq::~NameListReq() throw() {
}


void NameListReq::__set_page(const int32_t val) {
  this->page = val;
}

void NameListReq::__set_count(const int32_t val) {
  this->count = val;
}

const char* NameListReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t NameListReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t NameListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_page = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          isset_page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_page)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NameListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NameListReq");

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NameListReq &a, NameListReq &b) {
  using ::std::swap;
  swap(a.page, b.page);
  swap(a.count, b.count);
}

NameListReq::NameListReq(const NameListReq& other2) {
  page = other2.page;
  count = other2.count;
}
NameListReq& NameListReq::operator=(const NameListReq& other3) {
  page = other3.page;
  count = other3.count;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NameListReq& obj) {
  using apache::thrift::to_string;
  out << "NameListReq(";
  out << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


NameListRsp::~NameListRsp() throw() {
}


void NameListRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void NameListRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void NameListRsp::__set_page(const int32_t val) {
  this->page = val;
}

void NameListRsp::__set_count(const int32_t val) {
  this->count = val;
}

void NameListRsp::__set_total(const int32_t val) {
  this->total = val;
}

void NameListRsp::__set_pushInfoList(const std::vector<PushInfo> & val) {
  this->pushInfoList = val;
}

const char* NameListRsp::ascii_fingerprint = "BEFB20C9B480A4E29AD54674E10BDF36";
const uint8_t NameListRsp::binary_fingerprint[16] = {0xBE,0xFB,0x20,0xC9,0xB4,0x80,0xA4,0xE2,0x9A,0xD5,0x46,0x74,0xE1,0x0B,0xDF,0x36};

uint32_t NameListRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->error = ( ::coupon::Error::type)ecast4;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pushInfoList.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->pushInfoList.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->pushInfoList[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pushInfoList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NameListRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NameListRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pushInfoList", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pushInfoList.size()));
    std::vector<PushInfo> ::const_iterator _iter10;
    for (_iter10 = this->pushInfoList.begin(); _iter10 != this->pushInfoList.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NameListRsp &a, NameListRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.page, b.page);
  swap(a.count, b.count);
  swap(a.total, b.total);
  swap(a.pushInfoList, b.pushInfoList);
  swap(a.__isset, b.__isset);
}

NameListRsp::NameListRsp(const NameListRsp& other11) {
  error = other11.error;
  errmsg = other11.errmsg;
  page = other11.page;
  count = other11.count;
  total = other11.total;
  pushInfoList = other11.pushInfoList;
  __isset = other11.__isset;
}
NameListRsp& NameListRsp::operator=(const NameListRsp& other12) {
  error = other12.error;
  errmsg = other12.errmsg;
  page = other12.page;
  count = other12.count;
  total = other12.total;
  pushInfoList = other12.pushInfoList;
  __isset = other12.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NameListRsp& obj) {
  using apache::thrift::to_string;
  out << "NameListRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "total=" << to_string(obj.total);
  out << ", " << "pushInfoList=" << to_string(obj.pushInfoList);
  out << ")";
  return out;
}


PushInfoReq::~PushInfoReq() throw() {
}


void PushInfoReq::__set_user_id_set(const std::set<int64_t> & val) {
  this->user_id_set = val;
}

const char* PushInfoReq::ascii_fingerprint = "22BB20BCAA6BDE84822CC8FA96113C29";
const uint8_t PushInfoReq::binary_fingerprint[16] = {0x22,0xBB,0x20,0xBC,0xAA,0x6B,0xDE,0x84,0x82,0x2C,0xC8,0xFA,0x96,0x11,0x3C,0x29};

uint32_t PushInfoReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user_id_set = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->user_id_set.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readSetBegin(_etype16, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              int64_t _elem18;
              xfer += iprot->readI64(_elem18);
              this->user_id_set.insert(_elem18);
            }
            xfer += iprot->readSetEnd();
          }
          isset_user_id_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user_id_set)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PushInfoReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PushInfoReq");

  xfer += oprot->writeFieldBegin("user_id_set", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->user_id_set.size()));
    std::set<int64_t> ::const_iterator _iter19;
    for (_iter19 = this->user_id_set.begin(); _iter19 != this->user_id_set.end(); ++_iter19)
    {
      xfer += oprot->writeI64((*_iter19));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PushInfoReq &a, PushInfoReq &b) {
  using ::std::swap;
  swap(a.user_id_set, b.user_id_set);
}

PushInfoReq::PushInfoReq(const PushInfoReq& other20) {
  user_id_set = other20.user_id_set;
}
PushInfoReq& PushInfoReq::operator=(const PushInfoReq& other21) {
  user_id_set = other21.user_id_set;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PushInfoReq& obj) {
  using apache::thrift::to_string;
  out << "PushInfoReq(";
  out << "user_id_set=" << to_string(obj.user_id_set);
  out << ")";
  return out;
}


PushInfoRsp::~PushInfoRsp() throw() {
}


void PushInfoRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void PushInfoRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void PushInfoRsp::__set_pushInfoList(const std::vector<PushInfo> & val) {
  this->pushInfoList = val;
}

const char* PushInfoRsp::ascii_fingerprint = "567F9A7EACD3A7E8B9FB62071904CBBC";
const uint8_t PushInfoRsp::binary_fingerprint[16] = {0x56,0x7F,0x9A,0x7E,0xAC,0xD3,0xA7,0xE8,0xB9,0xFB,0x62,0x07,0x19,0x04,0xCB,0xBC};

uint32_t PushInfoRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->error = ( ::coupon::Error::type)ecast22;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pushInfoList.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->pushInfoList.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->pushInfoList[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pushInfoList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PushInfoRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PushInfoRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pushInfoList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pushInfoList.size()));
    std::vector<PushInfo> ::const_iterator _iter28;
    for (_iter28 = this->pushInfoList.begin(); _iter28 != this->pushInfoList.end(); ++_iter28)
    {
      xfer += (*_iter28).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PushInfoRsp &a, PushInfoRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.pushInfoList, b.pushInfoList);
  swap(a.__isset, b.__isset);
}

PushInfoRsp::PushInfoRsp(const PushInfoRsp& other29) {
  error = other29.error;
  errmsg = other29.errmsg;
  pushInfoList = other29.pushInfoList;
  __isset = other29.__isset;
}
PushInfoRsp& PushInfoRsp::operator=(const PushInfoRsp& other30) {
  error = other30.error;
  errmsg = other30.errmsg;
  pushInfoList = other30.pushInfoList;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PushInfoRsp& obj) {
  using apache::thrift::to_string;
  out << "PushInfoRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "pushInfoList=" << to_string(obj.pushInfoList);
  out << ")";
  return out;
}

} // namespace
