/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef coupon_TYPES_H
#define coupon_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace coupon {

struct Error {
  enum type {
    OK = 0,
    FAILED = -10001,
    NO_DATA_YOU_EXPECTED = -10002,
    MYSQL_DISCONNECTED = -10003,
    MYSQL_EXECUTE_ERROR = -10004,
    REDIS_DISCONNECTED = -10005,
    REDIS_EXECUTE_ERROR = -10006,
    COUPON_GROUP_NOT_EXISTS = -10007,
    USER_NOT_EXISTS = -10008,
    SCENE_TYPE_NOT_EXISTS = -10009,
    NO_COUPON_LEFT = -10010,
    NOT_IN_DRAW_TIME = -10011,
    DRAWN_ALL_YOU_CAN = -10012,
    CODE_ENCODE_ERROR = -10013,
    CODE_DECODE_ERROR = -10014,
    INVALID_PARAMS = -10015,
    USER_HAVENOT_THE_CODE = -10016,
    NOT_BEEN_FROZEN = -10017,
    COUPON_ID_NOT_EXISTS = -10018,
    ORDER_ID_NOT_MATCH = -10019,
    COUPON_IN_USE = -10020,
    COUPON_EXPIRED = -10021,
    COUPON_NOT_USABLE = -10022,
    COUPON_NOT_PLATFORM = -10023,
    COUPON_NOT_SHOPTYPE = -10024,
    COUPON_NOT_OF_THIS_SHOP = -10025,
    CAN_NOT_GET_THE_LOCK = -10026,
    INVALID_ARGOT = -10027,
    OUTLOAD_COUNT = -10028,
    ILLEGAL_SCENE_TYPE = -10029,
    COUPON_NOT_EXISTS = -10030,
    INVALID_CODE = -10031,
    COUPON_HAS_BEEN_DRAWN = -10032,
    COUPON_HAS_BEEN_ROBBED = -10033,
    ARGOT_IN_180_DAYS = -10034,
    DRAW_TIME_NOT_REACH = -10035,
    DRAW_TIME_EXPIRED = -10036,
    NO_USABLE_COUPON = -10037
  };
};

extern const std::map<int, const char*> _Error_VALUES_TO_NAMES;

class DefaultConfig;

class WareLabel;

class WareLabelWares;

class WareLabelWaresCache;

class CouponGroup;

class Coupon;

class UserCoupon;

class CacheCoupon;

class CacheCouponGroup;

class CacheCodes;

class InvalidOperation;

class MultipleCondition;

typedef struct _DefaultConfig__isset {
  _DefaultConfig__isset() : default_jump_label(false), default_jump_data(false), default_url(false), default_switch(false), default_text(false) {}
  bool default_jump_label :1;
  bool default_jump_data :1;
  bool default_url :1;
  bool default_switch :1;
  bool default_text :1;
} _DefaultConfig__isset;

class DefaultConfig {
 public:

  static const char* ascii_fingerprint; // = "D15635F063E02B657E6FB6315CC06E70";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0x56,0x35,0xF0,0x63,0xE0,0x2B,0x65,0x7E,0x6F,0xB6,0x31,0x5C,0xC0,0x6E,0x70};

  DefaultConfig(const DefaultConfig&);
  DefaultConfig& operator=(const DefaultConfig&);
  DefaultConfig() : default_jump_label(), default_jump_data(), default_url(), default_switch(0), default_text() {
  }

  virtual ~DefaultConfig() throw();
  std::string default_jump_label;
  std::string default_jump_data;
  std::string default_url;
  bool default_switch;
  std::string default_text;

  _DefaultConfig__isset __isset;

  void __set_default_jump_label(const std::string& val);

  void __set_default_jump_data(const std::string& val);

  void __set_default_url(const std::string& val);

  void __set_default_switch(const bool val);

  void __set_default_text(const std::string& val);

  bool operator == (const DefaultConfig & rhs) const
  {
    if (!(default_jump_label == rhs.default_jump_label))
      return false;
    if (!(default_jump_data == rhs.default_jump_data))
      return false;
    if (!(default_url == rhs.default_url))
      return false;
    if (!(default_switch == rhs.default_switch))
      return false;
    if (!(default_text == rhs.default_text))
      return false;
    return true;
  }
  bool operator != (const DefaultConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DefaultConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DefaultConfig& obj);
};

void swap(DefaultConfig &a, DefaultConfig &b);

typedef struct _WareLabel__isset {
  _WareLabel__isset() : name(false), scope_type(false), sub_type(false), create_time(false), update_time(false), ware_label_id(false), create_man(false) {}
  bool name :1;
  bool scope_type :1;
  bool sub_type :1;
  bool create_time :1;
  bool update_time :1;
  bool ware_label_id :1;
  bool create_man :1;
} _WareLabel__isset;

class WareLabel {
 public:

  static const char* ascii_fingerprint; // = "7AC6F6A26D79CCDFC42B800865AE39ED";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0xC6,0xF6,0xA2,0x6D,0x79,0xCC,0xDF,0xC4,0x2B,0x80,0x08,0x65,0xAE,0x39,0xED};

  WareLabel(const WareLabel&);
  WareLabel& operator=(const WareLabel&);
  WareLabel() : name(), scope_type(0), sub_type(0), create_time(0), update_time(0), ware_label_id(0), create_man() {
  }

  virtual ~WareLabel() throw();
  std::string name;
  int32_t scope_type;
  int32_t sub_type;
  int32_t create_time;
  int32_t update_time;
  int32_t ware_label_id;
  std::string create_man;

  _WareLabel__isset __isset;

  void __set_name(const std::string& val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_create_time(const int32_t val);

  void __set_update_time(const int32_t val);

  void __set_ware_label_id(const int32_t val);

  void __set_create_man(const std::string& val);

  bool operator == (const WareLabel & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(create_man == rhs.create_man))
      return false;
    return true;
  }
  bool operator != (const WareLabel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabel& obj);
};

void swap(WareLabel &a, WareLabel &b);

typedef struct _WareLabelWares__isset {
  _WareLabelWares__isset() : ware_label_id(false), ware_id(false), ware_slug(false) {}
  bool ware_label_id :1;
  bool ware_id :1;
  bool ware_slug :1;
} _WareLabelWares__isset;

class WareLabelWares {
 public:

  static const char* ascii_fingerprint; // = "A260D3573D95B3BD751F6453CCF5CDF7";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x60,0xD3,0x57,0x3D,0x95,0xB3,0xBD,0x75,0x1F,0x64,0x53,0xCC,0xF5,0xCD,0xF7};

  WareLabelWares(const WareLabelWares&);
  WareLabelWares& operator=(const WareLabelWares&);
  WareLabelWares() : ware_label_id(0), ware_id(0), ware_slug() {
  }

  virtual ~WareLabelWares() throw();
  int32_t ware_label_id;
  int64_t ware_id;
  std::string ware_slug;

  _WareLabelWares__isset __isset;

  void __set_ware_label_id(const int32_t val);

  void __set_ware_id(const int64_t val);

  void __set_ware_slug(const std::string& val);

  bool operator == (const WareLabelWares & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(ware_id == rhs.ware_id))
      return false;
    if (!(ware_slug == rhs.ware_slug))
      return false;
    return true;
  }
  bool operator != (const WareLabelWares &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWares & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWares& obj);
};

void swap(WareLabelWares &a, WareLabelWares &b);

typedef struct _WareLabelWaresCache__isset {
  _WareLabelWaresCache__isset() : cache(false) {}
  bool cache :1;
} _WareLabelWaresCache__isset;

class WareLabelWaresCache {
 public:

  static const char* ascii_fingerprint; // = "D47ED972F5454274FCA5B3867B623D21";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x7E,0xD9,0x72,0xF5,0x45,0x42,0x74,0xFC,0xA5,0xB3,0x86,0x7B,0x62,0x3D,0x21};

  WareLabelWaresCache(const WareLabelWaresCache&);
  WareLabelWaresCache& operator=(const WareLabelWaresCache&);
  WareLabelWaresCache() {
  }

  virtual ~WareLabelWaresCache() throw();
  std::vector<WareLabelWares>  cache;

  _WareLabelWaresCache__isset __isset;

  void __set_cache(const std::vector<WareLabelWares> & val);

  bool operator == (const WareLabelWaresCache & rhs) const
  {
    if (!(cache == rhs.cache))
      return false;
    return true;
  }
  bool operator != (const WareLabelWaresCache &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelWaresCache & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelWaresCache& obj);
};

void swap(WareLabelWaresCache &a, WareLabelWaresCache &b);

typedef struct _CouponGroup__isset {
  _CouponGroup__isset() : name(false), title(false), comment(false), ware_label_id(false), favor_type(false), scope_type(false), sub_type(false), scene_type(false), full(false), favor(false), rate(false), argot(false), max_count(false), delta(false), drawn_count(false), payed_count(false), create_time(false), can_draw_count(false), start_draw_time(false), end_draw_time(false), is_duration_type(false), duration_value(false), start_use_time(false), end_use_time(false), verify_status(false), applicant(false), approver(false), modifier(false), seller_id(false), url(false), id(false), img(false), slug(false), delta_verify_status(false), img_width(false), img_height(false), button_text(false), button_jump(false), jump_label(false), jump_data(false), argot_jump_label(false), argot_jump_data(false), update_time(false), version(false), description(false) {}
  bool name :1;
  bool title :1;
  bool comment :1;
  bool ware_label_id :1;
  bool favor_type :1;
  bool scope_type :1;
  bool sub_type :1;
  bool scene_type :1;
  bool full :1;
  bool favor :1;
  bool rate :1;
  bool argot :1;
  bool max_count :1;
  bool delta :1;
  bool drawn_count :1;
  bool payed_count :1;
  bool create_time :1;
  bool can_draw_count :1;
  bool start_draw_time :1;
  bool end_draw_time :1;
  bool is_duration_type :1;
  bool duration_value :1;
  bool start_use_time :1;
  bool end_use_time :1;
  bool verify_status :1;
  bool applicant :1;
  bool approver :1;
  bool modifier :1;
  bool seller_id :1;
  bool url :1;
  bool id :1;
  bool img :1;
  bool slug :1;
  bool delta_verify_status :1;
  bool img_width :1;
  bool img_height :1;
  bool button_text :1;
  bool button_jump :1;
  bool jump_label :1;
  bool jump_data :1;
  bool argot_jump_label :1;
  bool argot_jump_data :1;
  bool update_time :1;
  bool version :1;
  bool description :1;
} _CouponGroup__isset;

class CouponGroup {
 public:

  static const char* ascii_fingerprint; // = "545D2403809CEC1F51272275E448138B";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x5D,0x24,0x03,0x80,0x9C,0xEC,0x1F,0x51,0x27,0x22,0x75,0xE4,0x48,0x13,0x8B};

  CouponGroup(const CouponGroup&);
  CouponGroup& operator=(const CouponGroup&);
  CouponGroup() : name(), title(), comment(), ware_label_id(0), favor_type(0), scope_type(0), sub_type(0), scene_type(0), full(0), favor(0), rate(0), argot(), max_count(0), delta(0), drawn_count(0), payed_count(0), create_time(0), can_draw_count(0), start_draw_time(0), end_draw_time(0), is_duration_type(0), duration_value(0), start_use_time(0), end_use_time(0), verify_status(0), applicant(), approver(), modifier(), seller_id(0), url(), id(0), img(), slug(), delta_verify_status(0), img_width(0), img_height(0), button_text(), button_jump(), jump_label(), jump_data(), argot_jump_label(), argot_jump_data(), update_time(0), version(0), description() {
  }

  virtual ~CouponGroup() throw();
  std::string name;
  std::string title;
  std::string comment;
  int32_t ware_label_id;
  int32_t favor_type;
  int32_t scope_type;
  int32_t sub_type;
  int32_t scene_type;
  double full;
  double favor;
  double rate;
  std::string argot;
  int32_t max_count;
  int32_t delta;
  int32_t drawn_count;
  int32_t payed_count;
  int32_t create_time;
  int32_t can_draw_count;
  int32_t start_draw_time;
  int32_t end_draw_time;
  bool is_duration_type;
  int32_t duration_value;
  int32_t start_use_time;
  int32_t end_use_time;
  int32_t verify_status;
  std::string applicant;
  std::string approver;
  std::string modifier;
  int64_t seller_id;
  std::string url;
  int32_t id;
  std::string img;
  std::string slug;
  int32_t delta_verify_status;
  int32_t img_width;
  int32_t img_height;
  std::string button_text;
  std::string button_jump;
  std::string jump_label;
  std::string jump_data;
  std::string argot_jump_label;
  std::string argot_jump_data;
  int32_t update_time;
  int32_t version;
  std::string description;

  _CouponGroup__isset __isset;

  void __set_name(const std::string& val);

  void __set_title(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_ware_label_id(const int32_t val);

  void __set_favor_type(const int32_t val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_scene_type(const int32_t val);

  void __set_full(const double val);

  void __set_favor(const double val);

  void __set_rate(const double val);

  void __set_argot(const std::string& val);

  void __set_max_count(const int32_t val);

  void __set_delta(const int32_t val);

  void __set_drawn_count(const int32_t val);

  void __set_payed_count(const int32_t val);

  void __set_create_time(const int32_t val);

  void __set_can_draw_count(const int32_t val);

  void __set_start_draw_time(const int32_t val);

  void __set_end_draw_time(const int32_t val);

  void __set_is_duration_type(const bool val);

  void __set_duration_value(const int32_t val);

  void __set_start_use_time(const int32_t val);

  void __set_end_use_time(const int32_t val);

  void __set_verify_status(const int32_t val);

  void __set_applicant(const std::string& val);

  void __set_approver(const std::string& val);

  void __set_modifier(const std::string& val);

  void __set_seller_id(const int64_t val);

  void __set_url(const std::string& val);

  void __set_id(const int32_t val);

  void __set_img(const std::string& val);

  void __set_slug(const std::string& val);

  void __set_delta_verify_status(const int32_t val);

  void __set_img_width(const int32_t val);

  void __set_img_height(const int32_t val);

  void __set_button_text(const std::string& val);

  void __set_button_jump(const std::string& val);

  void __set_jump_label(const std::string& val);

  void __set_jump_data(const std::string& val);

  void __set_argot_jump_label(const std::string& val);

  void __set_argot_jump_data(const std::string& val);

  void __set_update_time(const int32_t val);

  void __set_version(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const CouponGroup & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(favor_type == rhs.favor_type))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(scene_type == rhs.scene_type))
      return false;
    if (!(full == rhs.full))
      return false;
    if (!(favor == rhs.favor))
      return false;
    if (!(rate == rhs.rate))
      return false;
    if (!(argot == rhs.argot))
      return false;
    if (!(max_count == rhs.max_count))
      return false;
    if (!(delta == rhs.delta))
      return false;
    if (!(drawn_count == rhs.drawn_count))
      return false;
    if (!(payed_count == rhs.payed_count))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(can_draw_count == rhs.can_draw_count))
      return false;
    if (!(start_draw_time == rhs.start_draw_time))
      return false;
    if (!(end_draw_time == rhs.end_draw_time))
      return false;
    if (!(is_duration_type == rhs.is_duration_type))
      return false;
    if (!(duration_value == rhs.duration_value))
      return false;
    if (!(start_use_time == rhs.start_use_time))
      return false;
    if (!(end_use_time == rhs.end_use_time))
      return false;
    if (!(verify_status == rhs.verify_status))
      return false;
    if (!(applicant == rhs.applicant))
      return false;
    if (!(approver == rhs.approver))
      return false;
    if (!(modifier == rhs.modifier))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(img == rhs.img))
      return false;
    if (!(slug == rhs.slug))
      return false;
    if (!(delta_verify_status == rhs.delta_verify_status))
      return false;
    if (!(img_width == rhs.img_width))
      return false;
    if (!(img_height == rhs.img_height))
      return false;
    if (!(button_text == rhs.button_text))
      return false;
    if (!(button_jump == rhs.button_jump))
      return false;
    if (!(jump_label == rhs.jump_label))
      return false;
    if (!(jump_data == rhs.jump_data))
      return false;
    if (!(argot_jump_label == rhs.argot_jump_label))
      return false;
    if (!(argot_jump_data == rhs.argot_jump_data))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const CouponGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CouponGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CouponGroup& obj);
};

void swap(CouponGroup &a, CouponGroup &b);

typedef struct _Coupon__isset {
  _Coupon__isset() : coupon_group_id(false), code(false), user_id(false), order_id(false), create_time(false), order_create_time(false), drawn_time(false), frozen_time(false), payed_time(false), coupon_id(false) {}
  bool coupon_group_id :1;
  bool code :1;
  bool user_id :1;
  bool order_id :1;
  bool create_time :1;
  bool order_create_time :1;
  bool drawn_time :1;
  bool frozen_time :1;
  bool payed_time :1;
  bool coupon_id :1;
} _Coupon__isset;

class Coupon {
 public:

  static const char* ascii_fingerprint; // = "6600053C119214796A5AEF6A85A2DD68";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0x00,0x05,0x3C,0x11,0x92,0x14,0x79,0x6A,0x5A,0xEF,0x6A,0x85,0xA2,0xDD,0x68};

  Coupon(const Coupon&);
  Coupon& operator=(const Coupon&);
  Coupon() : coupon_group_id(0), code(), user_id(0), order_id(), create_time(0), order_create_time(0), drawn_time(0), frozen_time(0), payed_time(0), coupon_id(0) {
  }

  virtual ~Coupon() throw();
  int32_t coupon_group_id;
  std::string code;
  int64_t user_id;
  std::string order_id;
  int32_t create_time;
  int32_t order_create_time;
  int32_t drawn_time;
  int32_t frozen_time;
  int32_t payed_time;
  int32_t coupon_id;

  _Coupon__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_code(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_order_id(const std::string& val);

  void __set_create_time(const int32_t val);

  void __set_order_create_time(const int32_t val);

  void __set_drawn_time(const int32_t val);

  void __set_frozen_time(const int32_t val);

  void __set_payed_time(const int32_t val);

  void __set_coupon_id(const int32_t val);

  bool operator == (const Coupon & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(order_id == rhs.order_id))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(order_create_time == rhs.order_create_time))
      return false;
    if (!(drawn_time == rhs.drawn_time))
      return false;
    if (!(frozen_time == rhs.frozen_time))
      return false;
    if (!(payed_time == rhs.payed_time))
      return false;
    if (!(coupon_id == rhs.coupon_id))
      return false;
    return true;
  }
  bool operator != (const Coupon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coupon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Coupon& obj);
};

void swap(Coupon &a, Coupon &b);

typedef struct _UserCoupon__isset {
  _UserCoupon__isset() : user_id(false), coupon_group_id(false), coupon_id(false), code(false), create_time(false), update_time(false), use_status(false), client_id(false), seller_id(false), channel_id(false) {}
  bool user_id :1;
  bool coupon_group_id :1;
  bool coupon_id :1;
  bool code :1;
  bool create_time :1;
  bool update_time :1;
  bool use_status :1;
  bool client_id :1;
  bool seller_id :1;
  bool channel_id :1;
} _UserCoupon__isset;

class UserCoupon {
 public:

  static const char* ascii_fingerprint; // = "74418F3E9C6D371D643ACBED53B50708";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x41,0x8F,0x3E,0x9C,0x6D,0x37,0x1D,0x64,0x3A,0xCB,0xED,0x53,0xB5,0x07,0x08};

  UserCoupon(const UserCoupon&);
  UserCoupon& operator=(const UserCoupon&);
  UserCoupon() : user_id(0), coupon_group_id(0), coupon_id(0), code(), create_time(0), update_time(0), use_status(0), client_id(), seller_id(0), channel_id(0) {
  }

  virtual ~UserCoupon() throw();
  int64_t user_id;
  int32_t coupon_group_id;
  int32_t coupon_id;
  std::string code;
  int32_t create_time;
  int32_t update_time;
  int32_t use_status;
  std::string client_id;
  int64_t seller_id;
  int32_t channel_id;

  _UserCoupon__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_coupon_group_id(const int32_t val);

  void __set_coupon_id(const int32_t val);

  void __set_code(const std::string& val);

  void __set_create_time(const int32_t val);

  void __set_update_time(const int32_t val);

  void __set_use_status(const int32_t val);

  void __set_client_id(const std::string& val);

  void __set_seller_id(const int64_t val);

  void __set_channel_id(const int32_t val);

  bool operator == (const UserCoupon & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(coupon_id == rhs.coupon_id))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(use_status == rhs.use_status))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(channel_id == rhs.channel_id))
      return false;
    return true;
  }
  bool operator != (const UserCoupon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCoupon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserCoupon& obj);
};

void swap(UserCoupon &a, UserCoupon &b);

typedef struct _CacheCoupon__isset {
  _CacheCoupon__isset() : coupon_group_id(false), code(false), user_id(false), order_id(false), create_time(false), order_create_time(false), drawn_time(false), frozen_time(false), payed_time(false), update_time(false), use_status(false), start_use_time(false), end_use_time(false), coupon_id(false), name(false), title(false), comment(false), ware_label_id(false), favor_type(false), scope_type(false), sub_type(false), scene_type(false), full(false), favor(false), rate(false), argot(false), seller_id(false), url(false), img(false), client_id(false), slug(false), img_width(false), img_height(false), button_text(false), button_jump(false), jump_label(false), jump_data(false), argot_jump_label(false), argot_jump_data(false), version(false), description(false), type(false), value(false) {}
  bool coupon_group_id :1;
  bool code :1;
  bool user_id :1;
  bool order_id :1;
  bool create_time :1;
  bool order_create_time :1;
  bool drawn_time :1;
  bool frozen_time :1;
  bool payed_time :1;
  bool update_time :1;
  bool use_status :1;
  bool start_use_time :1;
  bool end_use_time :1;
  bool coupon_id :1;
  bool name :1;
  bool title :1;
  bool comment :1;
  bool ware_label_id :1;
  bool favor_type :1;
  bool scope_type :1;
  bool sub_type :1;
  bool scene_type :1;
  bool full :1;
  bool favor :1;
  bool rate :1;
  bool argot :1;
  bool seller_id :1;
  bool url :1;
  bool img :1;
  bool client_id :1;
  bool slug :1;
  bool img_width :1;
  bool img_height :1;
  bool button_text :1;
  bool button_jump :1;
  bool jump_label :1;
  bool jump_data :1;
  bool argot_jump_label :1;
  bool argot_jump_data :1;
  bool version :1;
  bool description :1;
  bool type :1;
  bool value :1;
} _CacheCoupon__isset;

class CacheCoupon {
 public:

  static const char* ascii_fingerprint; // = "4EFC37979FDDC002C5D37493D68177DA";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xFC,0x37,0x97,0x9F,0xDD,0xC0,0x02,0xC5,0xD3,0x74,0x93,0xD6,0x81,0x77,0xDA};

  CacheCoupon(const CacheCoupon&);
  CacheCoupon& operator=(const CacheCoupon&);
  CacheCoupon() : coupon_group_id(0), code(), user_id(0), order_id(), create_time(0), order_create_time(0), drawn_time(0), frozen_time(0), payed_time(0), update_time(0), use_status(0), start_use_time(0), end_use_time(0), coupon_id(0), name(), title(), comment(), ware_label_id(0), favor_type(0), scope_type(0), sub_type(0), scene_type(0), full(0), favor(0), rate(0), argot(), seller_id(0), url(), img(), client_id(), slug(), img_width(0), img_height(0), button_text(), button_jump(), jump_label(), jump_data(), argot_jump_label(), argot_jump_data(), version(0), description(), type(0), value(0) {
  }

  virtual ~CacheCoupon() throw();
  int32_t coupon_group_id;
  std::string code;
  int64_t user_id;
  std::string order_id;
  int32_t create_time;
  int32_t order_create_time;
  int32_t drawn_time;
  int32_t frozen_time;
  int32_t payed_time;
  int32_t update_time;
  int32_t use_status;
  int32_t start_use_time;
  int32_t end_use_time;
  int32_t coupon_id;
  std::string name;
  std::string title;
  std::string comment;
  int32_t ware_label_id;
  int32_t favor_type;
  int32_t scope_type;
  int32_t sub_type;
  int32_t scene_type;
  double full;
  double favor;
  double rate;
  std::string argot;
  int64_t seller_id;
  std::string url;
  std::string img;
  std::string client_id;
  std::string slug;
  int32_t img_width;
  int32_t img_height;
  std::string button_text;
  std::string button_jump;
  std::string jump_label;
  std::string jump_data;
  std::string argot_jump_label;
  std::string argot_jump_data;
  int32_t version;
  std::string description;
  int32_t type;
  double value;

  _CacheCoupon__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_code(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_order_id(const std::string& val);

  void __set_create_time(const int32_t val);

  void __set_order_create_time(const int32_t val);

  void __set_drawn_time(const int32_t val);

  void __set_frozen_time(const int32_t val);

  void __set_payed_time(const int32_t val);

  void __set_update_time(const int32_t val);

  void __set_use_status(const int32_t val);

  void __set_start_use_time(const int32_t val);

  void __set_end_use_time(const int32_t val);

  void __set_coupon_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_title(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_ware_label_id(const int32_t val);

  void __set_favor_type(const int32_t val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_scene_type(const int32_t val);

  void __set_full(const double val);

  void __set_favor(const double val);

  void __set_rate(const double val);

  void __set_argot(const std::string& val);

  void __set_seller_id(const int64_t val);

  void __set_url(const std::string& val);

  void __set_img(const std::string& val);

  void __set_client_id(const std::string& val);

  void __set_slug(const std::string& val);

  void __set_img_width(const int32_t val);

  void __set_img_height(const int32_t val);

  void __set_button_text(const std::string& val);

  void __set_button_jump(const std::string& val);

  void __set_jump_label(const std::string& val);

  void __set_jump_data(const std::string& val);

  void __set_argot_jump_label(const std::string& val);

  void __set_argot_jump_data(const std::string& val);

  void __set_version(const int32_t val);

  void __set_description(const std::string& val);

  void __set_type(const int32_t val);

  void __set_value(const double val);

  bool operator == (const CacheCoupon & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(order_id == rhs.order_id))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(order_create_time == rhs.order_create_time))
      return false;
    if (!(drawn_time == rhs.drawn_time))
      return false;
    if (!(frozen_time == rhs.frozen_time))
      return false;
    if (!(payed_time == rhs.payed_time))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(use_status == rhs.use_status))
      return false;
    if (!(start_use_time == rhs.start_use_time))
      return false;
    if (!(end_use_time == rhs.end_use_time))
      return false;
    if (!(coupon_id == rhs.coupon_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(favor_type == rhs.favor_type))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(scene_type == rhs.scene_type))
      return false;
    if (!(full == rhs.full))
      return false;
    if (!(favor == rhs.favor))
      return false;
    if (!(rate == rhs.rate))
      return false;
    if (!(argot == rhs.argot))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(img == rhs.img))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(slug == rhs.slug))
      return false;
    if (!(img_width == rhs.img_width))
      return false;
    if (!(img_height == rhs.img_height))
      return false;
    if (!(button_text == rhs.button_text))
      return false;
    if (!(button_jump == rhs.button_jump))
      return false;
    if (!(jump_label == rhs.jump_label))
      return false;
    if (!(jump_data == rhs.jump_data))
      return false;
    if (!(argot_jump_label == rhs.argot_jump_label))
      return false;
    if (!(argot_jump_data == rhs.argot_jump_data))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CacheCoupon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheCoupon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CacheCoupon& obj);
};

void swap(CacheCoupon &a, CacheCoupon &b);

typedef struct _CacheCouponGroup__isset {
  _CacheCouponGroup__isset() : name(false), title(false), comment(false), ware_label_id(false), favor_type(false), scope_type(false), sub_type(false), scene_type(false), full(false), favor(false), rate(false), argot(false), max_count(false), drawn_count(false), create_time(false), can_draw_count(false), start_draw_time(false), end_draw_time(false), seller_id(false), url(false), id(false), img(false), slug(false), img_width(false), img_height(false), button_text(false), button_jump(false), jump_label(false), jump_data(false), argot_jump_label(false), argot_jump_data(false), update_time(false), version(false), description(false) {}
  bool name :1;
  bool title :1;
  bool comment :1;
  bool ware_label_id :1;
  bool favor_type :1;
  bool scope_type :1;
  bool sub_type :1;
  bool scene_type :1;
  bool full :1;
  bool favor :1;
  bool rate :1;
  bool argot :1;
  bool max_count :1;
  bool drawn_count :1;
  bool create_time :1;
  bool can_draw_count :1;
  bool start_draw_time :1;
  bool end_draw_time :1;
  bool seller_id :1;
  bool url :1;
  bool id :1;
  bool img :1;
  bool slug :1;
  bool img_width :1;
  bool img_height :1;
  bool button_text :1;
  bool button_jump :1;
  bool jump_label :1;
  bool jump_data :1;
  bool argot_jump_label :1;
  bool argot_jump_data :1;
  bool update_time :1;
  bool version :1;
  bool description :1;
} _CacheCouponGroup__isset;

class CacheCouponGroup {
 public:

  static const char* ascii_fingerprint; // = "27F6C301776C8D94F163053CDBFA76DF";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0xF6,0xC3,0x01,0x77,0x6C,0x8D,0x94,0xF1,0x63,0x05,0x3C,0xDB,0xFA,0x76,0xDF};

  CacheCouponGroup(const CacheCouponGroup&);
  CacheCouponGroup& operator=(const CacheCouponGroup&);
  CacheCouponGroup() : name(), title(), comment(), ware_label_id(0), favor_type(0), scope_type(0), sub_type(0), scene_type(0), full(0), favor(0), rate(0), argot(), max_count(0), drawn_count(0), create_time(0), can_draw_count(0), start_draw_time(0), end_draw_time(0), seller_id(0), url(), id(0), img(), slug(), img_width(0), img_height(0), button_text(), button_jump(), jump_label(), jump_data(), argot_jump_label(), argot_jump_data(), update_time(0), version(0), description() {
  }

  virtual ~CacheCouponGroup() throw();
  std::string name;
  std::string title;
  std::string comment;
  int32_t ware_label_id;
  int32_t favor_type;
  int32_t scope_type;
  int32_t sub_type;
  int32_t scene_type;
  double full;
  double favor;
  double rate;
  std::string argot;
  int32_t max_count;
  int32_t drawn_count;
  int32_t create_time;
  int32_t can_draw_count;
  int32_t start_draw_time;
  int32_t end_draw_time;
  int64_t seller_id;
  std::string url;
  int32_t id;
  std::string img;
  std::string slug;
  int32_t img_width;
  int32_t img_height;
  std::string button_text;
  std::string button_jump;
  std::string jump_label;
  std::string jump_data;
  std::string argot_jump_label;
  std::string argot_jump_data;
  int32_t update_time;
  int32_t version;
  std::string description;

  _CacheCouponGroup__isset __isset;

  void __set_name(const std::string& val);

  void __set_title(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_ware_label_id(const int32_t val);

  void __set_favor_type(const int32_t val);

  void __set_scope_type(const int32_t val);

  void __set_sub_type(const int32_t val);

  void __set_scene_type(const int32_t val);

  void __set_full(const double val);

  void __set_favor(const double val);

  void __set_rate(const double val);

  void __set_argot(const std::string& val);

  void __set_max_count(const int32_t val);

  void __set_drawn_count(const int32_t val);

  void __set_create_time(const int32_t val);

  void __set_can_draw_count(const int32_t val);

  void __set_start_draw_time(const int32_t val);

  void __set_end_draw_time(const int32_t val);

  void __set_seller_id(const int64_t val);

  void __set_url(const std::string& val);

  void __set_id(const int32_t val);

  void __set_img(const std::string& val);

  void __set_slug(const std::string& val);

  void __set_img_width(const int32_t val);

  void __set_img_height(const int32_t val);

  void __set_button_text(const std::string& val);

  void __set_button_jump(const std::string& val);

  void __set_jump_label(const std::string& val);

  void __set_jump_data(const std::string& val);

  void __set_argot_jump_label(const std::string& val);

  void __set_argot_jump_data(const std::string& val);

  void __set_update_time(const int32_t val);

  void __set_version(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const CacheCouponGroup & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    if (!(favor_type == rhs.favor_type))
      return false;
    if (!(scope_type == rhs.scope_type))
      return false;
    if (!(sub_type == rhs.sub_type))
      return false;
    if (!(scene_type == rhs.scene_type))
      return false;
    if (!(full == rhs.full))
      return false;
    if (!(favor == rhs.favor))
      return false;
    if (!(rate == rhs.rate))
      return false;
    if (!(argot == rhs.argot))
      return false;
    if (!(max_count == rhs.max_count))
      return false;
    if (!(drawn_count == rhs.drawn_count))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(can_draw_count == rhs.can_draw_count))
      return false;
    if (!(start_draw_time == rhs.start_draw_time))
      return false;
    if (!(end_draw_time == rhs.end_draw_time))
      return false;
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(img == rhs.img))
      return false;
    if (!(slug == rhs.slug))
      return false;
    if (!(img_width == rhs.img_width))
      return false;
    if (!(img_height == rhs.img_height))
      return false;
    if (!(button_text == rhs.button_text))
      return false;
    if (!(button_jump == rhs.button_jump))
      return false;
    if (!(jump_label == rhs.jump_label))
      return false;
    if (!(jump_data == rhs.jump_data))
      return false;
    if (!(argot_jump_label == rhs.argot_jump_label))
      return false;
    if (!(argot_jump_data == rhs.argot_jump_data))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const CacheCouponGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheCouponGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CacheCouponGroup& obj);
};

void swap(CacheCouponGroup &a, CacheCouponGroup &b);

typedef struct _CacheCodes__isset {
  _CacheCodes__isset() : codes(false) {}
  bool codes :1;
} _CacheCodes__isset;

class CacheCodes {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  CacheCodes(const CacheCodes&);
  CacheCodes& operator=(const CacheCodes&);
  CacheCodes() {
  }

  virtual ~CacheCodes() throw();
  std::vector<std::string>  codes;

  _CacheCodes__isset __isset;

  void __set_codes(const std::vector<std::string> & val);

  bool operator == (const CacheCodes & rhs) const
  {
    if (!(codes == rhs.codes))
      return false;
    return true;
  }
  bool operator != (const CacheCodes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheCodes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CacheCodes& obj);
};

void swap(CacheCodes &a, CacheCodes &b);

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : fault(false), why(false) {}
  bool fault :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : fault((Error::type)0), why() {
  }

  virtual ~InvalidOperation() throw();
  Error::type fault;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_fault(const Error::type val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(fault == rhs.fault))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);
};

void swap(InvalidOperation &a, InvalidOperation &b);

typedef struct _MultipleCondition__isset {
  _MultipleCondition__isset() : andCondList(false), orCondList(false), orderCondList(false) {}
  bool andCondList :1;
  bool orCondList :1;
  bool orderCondList :1;
} _MultipleCondition__isset;

class MultipleCondition {
 public:

  static const char* ascii_fingerprint; // = "F58DCEBA659ABD254B5B8D11A03A57B9";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x8D,0xCE,0xBA,0x65,0x9A,0xBD,0x25,0x4B,0x5B,0x8D,0x11,0xA0,0x3A,0x57,0xB9};

  MultipleCondition(const MultipleCondition&);
  MultipleCondition& operator=(const MultipleCondition&);
  MultipleCondition() {
  }

  virtual ~MultipleCondition() throw();
  std::vector<std::string>  andCondList;
  std::vector<std::string>  orCondList;
  std::vector<std::string>  orderCondList;

  _MultipleCondition__isset __isset;

  void __set_andCondList(const std::vector<std::string> & val);

  void __set_orCondList(const std::vector<std::string> & val);

  void __set_orderCondList(const std::vector<std::string> & val);

  bool operator == (const MultipleCondition & rhs) const
  {
    if (!(andCondList == rhs.andCondList))
      return false;
    if (!(orCondList == rhs.orCondList))
      return false;
    if (!(orderCondList == rhs.orderCondList))
      return false;
    return true;
  }
  bool operator != (const MultipleCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultipleCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MultipleCondition& obj);
};

void swap(MultipleCondition &a, MultipleCondition &b);

} // namespace

#endif
