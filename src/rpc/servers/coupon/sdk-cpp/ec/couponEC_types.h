/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef couponEC_TYPES_H
#define couponEC_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "coupon_types.h"


namespace couponEC {

class GetDefaultConfigReq;

class GetDefaultConfigRsp;

class DecodeCodeReq;

class DecodeCodeRsp;

class CheckArgotReq;

class CheckArgotRsp;

class UserLeftCouponsCountReq;

class UserLeftCouponsCountRsp;

class DrawnCountTodayReq;

class DrawnCountTodayRsp;

class ClientCouponsReq;

class ClientCouponsRsp;

class DrawReq;

class DrawRsp;

class RollbackReq;

class RollbackRsp;

class FreezeReq;

class FreezeRsp;

class PayReq;

class PayRsp;

class UserCouponsReq;

class UserCouponsRsp;

class WareActsReq;

class WareActsRsp;

class PriceInfo;

class SkuInfo;

class SellerInfo;

class UsableCouponsReq;

class UsableCouponsRsp;

class NotUsableCouponsReq;

class NotUsableCouponsRsp;

class ApportionReq;

class ApportionRsp;

class CacheCouponGroupsReq;

class CacheCouponGroupsRsp;

class RelatedCouponGroupsReq;

class RelatedCouponGroupsRsp;

class WareLabelReq;

class WareLabelRsp;

class ServerTimeReq;

class ServerTimeRsp;


class GetDefaultConfigReq {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  GetDefaultConfigReq(const GetDefaultConfigReq&);
  GetDefaultConfigReq& operator=(const GetDefaultConfigReq&);
  GetDefaultConfigReq() : dummy(0) {
  }

  virtual ~GetDefaultConfigReq() throw();
  bool dummy;

  void __set_dummy(const bool val);

  bool operator == (const GetDefaultConfigReq & rhs) const
  {
    if (!(dummy == rhs.dummy))
      return false;
    return true;
  }
  bool operator != (const GetDefaultConfigReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDefaultConfigReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetDefaultConfigReq& obj);
};

void swap(GetDefaultConfigReq &a, GetDefaultConfigReq &b);

typedef struct _GetDefaultConfigRsp__isset {
  _GetDefaultConfigRsp__isset() : error(false), errmsg(false), config(false) {}
  bool error :1;
  bool errmsg :1;
  bool config :1;
} _GetDefaultConfigRsp__isset;

class GetDefaultConfigRsp {
 public:

  static const char* ascii_fingerprint; // = "DBEDF127FADA999D729B3DA57DB8B462";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xED,0xF1,0x27,0xFA,0xDA,0x99,0x9D,0x72,0x9B,0x3D,0xA5,0x7D,0xB8,0xB4,0x62};

  GetDefaultConfigRsp(const GetDefaultConfigRsp&);
  GetDefaultConfigRsp& operator=(const GetDefaultConfigRsp&);
  GetDefaultConfigRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~GetDefaultConfigRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
   ::coupon::DefaultConfig config;

  _GetDefaultConfigRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_config(const  ::coupon::DefaultConfig& val);

  bool operator == (const GetDefaultConfigRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const GetDefaultConfigRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDefaultConfigRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetDefaultConfigRsp& obj);
};

void swap(GetDefaultConfigRsp &a, GetDefaultConfigRsp &b);


class DecodeCodeReq {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DecodeCodeReq(const DecodeCodeReq&);
  DecodeCodeReq& operator=(const DecodeCodeReq&);
  DecodeCodeReq() : code() {
  }

  virtual ~DecodeCodeReq() throw();
  std::string code;

  void __set_code(const std::string& val);

  bool operator == (const DecodeCodeReq & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const DecodeCodeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DecodeCodeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DecodeCodeReq& obj);
};

void swap(DecodeCodeReq &a, DecodeCodeReq &b);

typedef struct _DecodeCodeRsp__isset {
  _DecodeCodeRsp__isset() : error(false), errmsg(false), code(false), coupon_group_id(false), coupon_id(false) {}
  bool error :1;
  bool errmsg :1;
  bool code :1;
  bool coupon_group_id :1;
  bool coupon_id :1;
} _DecodeCodeRsp__isset;

class DecodeCodeRsp {
 public:

  static const char* ascii_fingerprint; // = "3032C63CF32F152EC3B0B914A8E09E84";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x32,0xC6,0x3C,0xF3,0x2F,0x15,0x2E,0xC3,0xB0,0xB9,0x14,0xA8,0xE0,0x9E,0x84};

  DecodeCodeRsp(const DecodeCodeRsp&);
  DecodeCodeRsp& operator=(const DecodeCodeRsp&);
  DecodeCodeRsp() : error(( ::coupon::Error::type)0), errmsg(), code(), coupon_group_id(0), coupon_id(0) {
  }

  virtual ~DecodeCodeRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::string code;
  int32_t coupon_group_id;
  int32_t coupon_id;

  _DecodeCodeRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_code(const std::string& val);

  void __set_coupon_group_id(const int32_t val);

  void __set_coupon_id(const int32_t val);

  bool operator == (const DecodeCodeRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(coupon_id == rhs.coupon_id))
      return false;
    return true;
  }
  bool operator != (const DecodeCodeRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DecodeCodeRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DecodeCodeRsp& obj);
};

void swap(DecodeCodeRsp &a, DecodeCodeRsp &b);


class CheckArgotReq {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  CheckArgotReq(const CheckArgotReq&);
  CheckArgotReq& operator=(const CheckArgotReq&);
  CheckArgotReq() : argot() {
  }

  virtual ~CheckArgotReq() throw();
  std::string argot;

  void __set_argot(const std::string& val);

  bool operator == (const CheckArgotReq & rhs) const
  {
    if (!(argot == rhs.argot))
      return false;
    return true;
  }
  bool operator != (const CheckArgotReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckArgotReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CheckArgotReq& obj);
};

void swap(CheckArgotReq &a, CheckArgotReq &b);

typedef struct _CheckArgotRsp__isset {
  _CheckArgotRsp__isset() : error(false), errmsg(false), argot(false), coupon_group_id(false) {}
  bool error :1;
  bool errmsg :1;
  bool argot :1;
  bool coupon_group_id :1;
} _CheckArgotRsp__isset;

class CheckArgotRsp {
 public:

  static const char* ascii_fingerprint; // = "5E05C96400E57E7C92621ECF61706460";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0x05,0xC9,0x64,0x00,0xE5,0x7E,0x7C,0x92,0x62,0x1E,0xCF,0x61,0x70,0x64,0x60};

  CheckArgotRsp(const CheckArgotRsp&);
  CheckArgotRsp& operator=(const CheckArgotRsp&);
  CheckArgotRsp() : error(( ::coupon::Error::type)0), errmsg(), argot(), coupon_group_id(0) {
  }

  virtual ~CheckArgotRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::string argot;
  int32_t coupon_group_id;

  _CheckArgotRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_argot(const std::string& val);

  void __set_coupon_group_id(const int32_t val);

  bool operator == (const CheckArgotRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(argot == rhs.argot))
      return false;
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    return true;
  }
  bool operator != (const CheckArgotRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckArgotRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CheckArgotRsp& obj);
};

void swap(CheckArgotRsp &a, CheckArgotRsp &b);


class UserLeftCouponsCountReq {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  UserLeftCouponsCountReq(const UserLeftCouponsCountReq&);
  UserLeftCouponsCountReq& operator=(const UserLeftCouponsCountReq&);
  UserLeftCouponsCountReq() : coupon_group_id(0), user_id(0) {
  }

  virtual ~UserLeftCouponsCountReq() throw();
  int32_t coupon_group_id;
  int64_t user_id;

  void __set_coupon_group_id(const int32_t val);

  void __set_user_id(const int64_t val);

  bool operator == (const UserLeftCouponsCountReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const UserLeftCouponsCountReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLeftCouponsCountReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserLeftCouponsCountReq& obj);
};

void swap(UserLeftCouponsCountReq &a, UserLeftCouponsCountReq &b);

typedef struct _UserLeftCouponsCountRsp__isset {
  _UserLeftCouponsCountRsp__isset() : error(false), errmsg(false), left_count(false) {}
  bool error :1;
  bool errmsg :1;
  bool left_count :1;
} _UserLeftCouponsCountRsp__isset;

class UserLeftCouponsCountRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  UserLeftCouponsCountRsp(const UserLeftCouponsCountRsp&);
  UserLeftCouponsCountRsp& operator=(const UserLeftCouponsCountRsp&);
  UserLeftCouponsCountRsp() : error(( ::coupon::Error::type)0), errmsg(), left_count(0) {
  }

  virtual ~UserLeftCouponsCountRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t left_count;

  _UserLeftCouponsCountRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_left_count(const int32_t val);

  bool operator == (const UserLeftCouponsCountRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(left_count == rhs.left_count))
      return false;
    return true;
  }
  bool operator != (const UserLeftCouponsCountRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLeftCouponsCountRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserLeftCouponsCountRsp& obj);
};

void swap(UserLeftCouponsCountRsp &a, UserLeftCouponsCountRsp &b);


class DrawnCountTodayReq {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  DrawnCountTodayReq(const DrawnCountTodayReq&);
  DrawnCountTodayReq& operator=(const DrawnCountTodayReq&);
  DrawnCountTodayReq() : coupon_group_id(0), user_id(0) {
  }

  virtual ~DrawnCountTodayReq() throw();
  int32_t coupon_group_id;
  int64_t user_id;

  void __set_coupon_group_id(const int32_t val);

  void __set_user_id(const int64_t val);

  bool operator == (const DrawnCountTodayReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const DrawnCountTodayReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawnCountTodayReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DrawnCountTodayReq& obj);
};

void swap(DrawnCountTodayReq &a, DrawnCountTodayReq &b);

typedef struct _DrawnCountTodayRsp__isset {
  _DrawnCountTodayRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _DrawnCountTodayRsp__isset;

class DrawnCountTodayRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  DrawnCountTodayRsp(const DrawnCountTodayRsp&);
  DrawnCountTodayRsp& operator=(const DrawnCountTodayRsp&);
  DrawnCountTodayRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0) {
  }

  virtual ~DrawnCountTodayRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;

  _DrawnCountTodayRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const DrawnCountTodayRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const DrawnCountTodayRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawnCountTodayRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DrawnCountTodayRsp& obj);
};

void swap(DrawnCountTodayRsp &a, DrawnCountTodayRsp &b);


class ClientCouponsReq {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  ClientCouponsReq(const ClientCouponsReq&);
  ClientCouponsReq& operator=(const ClientCouponsReq&);
  ClientCouponsReq() : coupon_group_id(0), client_id() {
  }

  virtual ~ClientCouponsReq() throw();
  int32_t coupon_group_id;
  std::string client_id;

  void __set_coupon_group_id(const int32_t val);

  void __set_client_id(const std::string& val);

  bool operator == (const ClientCouponsReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const ClientCouponsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientCouponsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientCouponsReq& obj);
};

void swap(ClientCouponsReq &a, ClientCouponsReq &b);

typedef struct _ClientCouponsRsp__isset {
  _ClientCouponsRsp__isset() : error(false), errmsg(false), count(false) {}
  bool error :1;
  bool errmsg :1;
  bool count :1;
} _ClientCouponsRsp__isset;

class ClientCouponsRsp {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  ClientCouponsRsp(const ClientCouponsRsp&);
  ClientCouponsRsp& operator=(const ClientCouponsRsp&);
  ClientCouponsRsp() : error(( ::coupon::Error::type)0), errmsg(), count(0) {
  }

  virtual ~ClientCouponsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t count;

  _ClientCouponsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const ClientCouponsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const ClientCouponsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientCouponsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientCouponsRsp& obj);
};

void swap(ClientCouponsRsp &a, ClientCouponsRsp &b);

typedef struct _DrawReq__isset {
  _DrawReq__isset() : client_id(false), argot(false), code(false), channel_id(false) {}
  bool client_id :1;
  bool argot :1;
  bool code :1;
  bool channel_id :1;
} _DrawReq__isset;

class DrawReq {
 public:

  static const char* ascii_fingerprint; // = "B5DB26A4ECCCCE9691BBE531018F4925";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xDB,0x26,0xA4,0xEC,0xCC,0xCE,0x96,0x91,0xBB,0xE5,0x31,0x01,0x8F,0x49,0x25};

  DrawReq(const DrawReq&);
  DrawReq& operator=(const DrawReq&);
  DrawReq() : coupon_group_id(0), user_id(0), client_id(), argot(), scene_type(0), code(), channel_id(0) {
  }

  virtual ~DrawReq() throw();
  int32_t coupon_group_id;
  int64_t user_id;
  std::string client_id;
  std::string argot;
  int32_t scene_type;
  std::string code;
  int32_t channel_id;

  _DrawReq__isset __isset;

  void __set_coupon_group_id(const int32_t val);

  void __set_user_id(const int64_t val);

  void __set_client_id(const std::string& val);

  void __set_argot(const std::string& val);

  void __set_scene_type(const int32_t val);

  void __set_code(const std::string& val);

  void __set_channel_id(const int32_t val);

  bool operator == (const DrawReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (__isset.client_id != rhs.__isset.client_id)
      return false;
    else if (__isset.client_id && !(client_id == rhs.client_id))
      return false;
    if (__isset.argot != rhs.__isset.argot)
      return false;
    else if (__isset.argot && !(argot == rhs.argot))
      return false;
    if (!(scene_type == rhs.scene_type))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.channel_id != rhs.__isset.channel_id)
      return false;
    else if (__isset.channel_id && !(channel_id == rhs.channel_id))
      return false;
    return true;
  }
  bool operator != (const DrawReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DrawReq& obj);
};

void swap(DrawReq &a, DrawReq &b);

typedef struct _DrawRsp__isset {
  _DrawRsp__isset() : error(false), errmsg(false), code(false), cacheCoupon(false) {}
  bool error :1;
  bool errmsg :1;
  bool code :1;
  bool cacheCoupon :1;
} _DrawRsp__isset;

class DrawRsp {
 public:

  static const char* ascii_fingerprint; // = "3DBBDBE95FE2F3CC7DFFB2E866EB967E";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0xBB,0xDB,0xE9,0x5F,0xE2,0xF3,0xCC,0x7D,0xFF,0xB2,0xE8,0x66,0xEB,0x96,0x7E};

  DrawRsp(const DrawRsp&);
  DrawRsp& operator=(const DrawRsp&);
  DrawRsp() : error(( ::coupon::Error::type)0), errmsg(), code() {
  }

  virtual ~DrawRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::string code;
   ::coupon::CacheCoupon cacheCoupon;

  _DrawRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_code(const std::string& val);

  void __set_cacheCoupon(const  ::coupon::CacheCoupon& val);

  bool operator == (const DrawRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(cacheCoupon == rhs.cacheCoupon))
      return false;
    return true;
  }
  bool operator != (const DrawRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DrawRsp& obj);
};

void swap(DrawRsp &a, DrawRsp &b);


class RollbackReq {
 public:

  static const char* ascii_fingerprint; // = "FA35BEC6F4D26D79A7E0AD1366489BCC";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

  RollbackReq(const RollbackReq&);
  RollbackReq& operator=(const RollbackReq&);
  RollbackReq() : code(), user_id(0), order_id() {
  }

  virtual ~RollbackReq() throw();
  std::string code;
  int64_t user_id;
  std::string order_id;

  void __set_code(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_order_id(const std::string& val);

  bool operator == (const RollbackReq & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(order_id == rhs.order_id))
      return false;
    return true;
  }
  bool operator != (const RollbackReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RollbackReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RollbackReq& obj);
};

void swap(RollbackReq &a, RollbackReq &b);

typedef struct _RollbackRsp__isset {
  _RollbackRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _RollbackRsp__isset;

class RollbackRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  RollbackRsp(const RollbackRsp&);
  RollbackRsp& operator=(const RollbackRsp&);
  RollbackRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~RollbackRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _RollbackRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const RollbackRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const RollbackRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RollbackRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RollbackRsp& obj);
};

void swap(RollbackRsp &a, RollbackRsp &b);


class FreezeReq {
 public:

  static const char* ascii_fingerprint; // = "FA35BEC6F4D26D79A7E0AD1366489BCC";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

  FreezeReq(const FreezeReq&);
  FreezeReq& operator=(const FreezeReq&);
  FreezeReq() : code(), user_id(0), order_id() {
  }

  virtual ~FreezeReq() throw();
  std::string code;
  int64_t user_id;
  std::string order_id;

  void __set_code(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_order_id(const std::string& val);

  bool operator == (const FreezeReq & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(order_id == rhs.order_id))
      return false;
    return true;
  }
  bool operator != (const FreezeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FreezeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FreezeReq& obj);
};

void swap(FreezeReq &a, FreezeReq &b);

typedef struct _FreezeRsp__isset {
  _FreezeRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _FreezeRsp__isset;

class FreezeRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  FreezeRsp(const FreezeRsp&);
  FreezeRsp& operator=(const FreezeRsp&);
  FreezeRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~FreezeRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _FreezeRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const FreezeRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const FreezeRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FreezeRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FreezeRsp& obj);
};

void swap(FreezeRsp &a, FreezeRsp &b);


class PayReq {
 public:

  static const char* ascii_fingerprint; // = "FA35BEC6F4D26D79A7E0AD1366489BCC";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

  PayReq(const PayReq&);
  PayReq& operator=(const PayReq&);
  PayReq() : code(), user_id(0), order_id() {
  }

  virtual ~PayReq() throw();
  std::string code;
  int64_t user_id;
  std::string order_id;

  void __set_code(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_order_id(const std::string& val);

  bool operator == (const PayReq & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(order_id == rhs.order_id))
      return false;
    return true;
  }
  bool operator != (const PayReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PayReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PayReq& obj);
};

void swap(PayReq &a, PayReq &b);

typedef struct _PayRsp__isset {
  _PayRsp__isset() : error(false), errmsg(false) {}
  bool error :1;
  bool errmsg :1;
} _PayRsp__isset;

class PayRsp {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  PayRsp(const PayRsp&);
  PayRsp& operator=(const PayRsp&);
  PayRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~PayRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;

  _PayRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  bool operator == (const PayRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    return true;
  }
  bool operator != (const PayRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PayRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PayRsp& obj);
};

void swap(PayRsp &a, PayRsp &b);


class UserCouponsReq {
 public:

  static const char* ascii_fingerprint; // = "BE3A22B351B833B7BB1F7D4167460373";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x3A,0x22,0xB3,0x51,0xB8,0x33,0xB7,0xBB,0x1F,0x7D,0x41,0x67,0x46,0x03,0x73};

  UserCouponsReq(const UserCouponsReq&);
  UserCouponsReq& operator=(const UserCouponsReq&);
  UserCouponsReq() : user_id(0), page(0), count(0), use_status(0) {
  }

  virtual ~UserCouponsReq() throw();
  int64_t user_id;
  int32_t page;
  int32_t count;
  int32_t use_status;

  void __set_user_id(const int64_t val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  void __set_use_status(const int32_t val);

  bool operator == (const UserCouponsReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(use_status == rhs.use_status))
      return false;
    return true;
  }
  bool operator != (const UserCouponsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCouponsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserCouponsReq& obj);
};

void swap(UserCouponsReq &a, UserCouponsReq &b);

typedef struct _UserCouponsRsp__isset {
  _UserCouponsRsp__isset() : error(false), errmsg(false), user_id(false), page(false), count(false), use_status(false), total(false), coupons(false) {}
  bool error :1;
  bool errmsg :1;
  bool user_id :1;
  bool page :1;
  bool count :1;
  bool use_status :1;
  bool total :1;
  bool coupons :1;
} _UserCouponsRsp__isset;

class UserCouponsRsp {
 public:

  static const char* ascii_fingerprint; // = "9DB3061D07344E564DDFCAEB3F6C5519";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0xB3,0x06,0x1D,0x07,0x34,0x4E,0x56,0x4D,0xDF,0xCA,0xEB,0x3F,0x6C,0x55,0x19};

  UserCouponsRsp(const UserCouponsRsp&);
  UserCouponsRsp& operator=(const UserCouponsRsp&);
  UserCouponsRsp() : error(( ::coupon::Error::type)0), errmsg(), user_id(0), page(0), count(0), use_status(0), total(0) {
  }

  virtual ~UserCouponsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int64_t user_id;
  int32_t page;
  int32_t count;
  int32_t use_status;
  int32_t total;
  std::vector< ::coupon::CacheCoupon>  coupons;

  _UserCouponsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  void __set_use_status(const int32_t val);

  void __set_total(const int32_t val);

  void __set_coupons(const std::vector< ::coupon::CacheCoupon> & val);

  bool operator == (const UserCouponsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(use_status == rhs.use_status))
      return false;
    if (!(total == rhs.total))
      return false;
    if (!(coupons == rhs.coupons))
      return false;
    return true;
  }
  bool operator != (const UserCouponsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCouponsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserCouponsRsp& obj);
};

void swap(UserCouponsRsp &a, UserCouponsRsp &b);


class WareActsReq {
 public:

  static const char* ascii_fingerprint; // = "22BB20BCAA6BDE84822CC8FA96113C29";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xBB,0x20,0xBC,0xAA,0x6B,0xDE,0x84,0x82,0x2C,0xC8,0xFA,0x96,0x11,0x3C,0x29};

  WareActsReq(const WareActsReq&);
  WareActsReq& operator=(const WareActsReq&);
  WareActsReq() {
  }

  virtual ~WareActsReq() throw();
  std::set<int64_t>  ware_ids;

  void __set_ware_ids(const std::set<int64_t> & val);

  bool operator == (const WareActsReq & rhs) const
  {
    if (!(ware_ids == rhs.ware_ids))
      return false;
    return true;
  }
  bool operator != (const WareActsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareActsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareActsReq& obj);
};

void swap(WareActsReq &a, WareActsReq &b);

typedef struct _WareActsRsp__isset {
  _WareActsRsp__isset() : error(false), errmsg(false), wareActs(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareActs :1;
} _WareActsRsp__isset;

class WareActsRsp {
 public:

  static const char* ascii_fingerprint; // = "DCEE89519ACDB279F88C98641322A2FC";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0xEE,0x89,0x51,0x9A,0xCD,0xB2,0x79,0xF8,0x8C,0x98,0x64,0x13,0x22,0xA2,0xFC};

  WareActsRsp(const WareActsRsp&);
  WareActsRsp& operator=(const WareActsRsp&);
  WareActsRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~WareActsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::map<int64_t, std::vector< ::coupon::CouponGroup> >  wareActs;

  _WareActsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareActs(const std::map<int64_t, std::vector< ::coupon::CouponGroup> > & val);

  bool operator == (const WareActsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareActs == rhs.wareActs))
      return false;
    return true;
  }
  bool operator != (const WareActsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareActsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareActsRsp& obj);
};

void swap(WareActsRsp &a, WareActsRsp &b);

typedef struct _PriceInfo__isset {
  _PriceInfo__isset() : market_price(false), sale_price(false), pay_price(false), favor_price(false) {}
  bool market_price :1;
  bool sale_price :1;
  bool pay_price :1;
  bool favor_price :1;
} _PriceInfo__isset;

class PriceInfo {
 public:

  static const char* ascii_fingerprint; // = "D40B774F31F5CC6330E604960421B6CB";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x0B,0x77,0x4F,0x31,0xF5,0xCC,0x63,0x30,0xE6,0x04,0x96,0x04,0x21,0xB6,0xCB};

  PriceInfo(const PriceInfo&);
  PriceInfo& operator=(const PriceInfo&);
  PriceInfo() : market_price(0), sale_price(0), pay_price(0), favor_price(0) {
  }

  virtual ~PriceInfo() throw();
  double market_price;
  double sale_price;
  double pay_price;
  double favor_price;

  _PriceInfo__isset __isset;

  void __set_market_price(const double val);

  void __set_sale_price(const double val);

  void __set_pay_price(const double val);

  void __set_favor_price(const double val);

  bool operator == (const PriceInfo & rhs) const
  {
    if (!(market_price == rhs.market_price))
      return false;
    if (!(sale_price == rhs.sale_price))
      return false;
    if (!(pay_price == rhs.pay_price))
      return false;
    if (!(favor_price == rhs.favor_price))
      return false;
    return true;
  }
  bool operator != (const PriceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PriceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PriceInfo& obj);
};

void swap(PriceInfo &a, PriceInfo &b);

typedef struct _SkuInfo__isset {
  _SkuInfo__isset() : sku_id(false), sku_count(false), sale_price(false), market_price(false), ware_id(false) {}
  bool sku_id :1;
  bool sku_count :1;
  bool sale_price :1;
  bool market_price :1;
  bool ware_id :1;
} _SkuInfo__isset;

class SkuInfo {
 public:

  static const char* ascii_fingerprint; // = "EF090800999F7A099EF36D3B00699394";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x09,0x08,0x00,0x99,0x9F,0x7A,0x09,0x9E,0xF3,0x6D,0x3B,0x00,0x69,0x93,0x94};

  SkuInfo(const SkuInfo&);
  SkuInfo& operator=(const SkuInfo&);
  SkuInfo() : sku_id(0), sku_count(0), sale_price(0), market_price(0), ware_id(0) {
  }

  virtual ~SkuInfo() throw();
  int64_t sku_id;
  int32_t sku_count;
  double sale_price;
  double market_price;
  int64_t ware_id;

  _SkuInfo__isset __isset;

  void __set_sku_id(const int64_t val);

  void __set_sku_count(const int32_t val);

  void __set_sale_price(const double val);

  void __set_market_price(const double val);

  void __set_ware_id(const int64_t val);

  bool operator == (const SkuInfo & rhs) const
  {
    if (!(sku_id == rhs.sku_id))
      return false;
    if (!(sku_count == rhs.sku_count))
      return false;
    if (!(sale_price == rhs.sale_price))
      return false;
    if (!(market_price == rhs.market_price))
      return false;
    if (!(ware_id == rhs.ware_id))
      return false;
    return true;
  }
  bool operator != (const SkuInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkuInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SkuInfo& obj);
};

void swap(SkuInfo &a, SkuInfo &b);

typedef struct _SellerInfo__isset {
  _SellerInfo__isset() : seller_id(false), skus(false) {}
  bool seller_id :1;
  bool skus :1;
} _SellerInfo__isset;

class SellerInfo {
 public:

  static const char* ascii_fingerprint; // = "5B880AF6F0B4A5A647848B922344014F";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x88,0x0A,0xF6,0xF0,0xB4,0xA5,0xA6,0x47,0x84,0x8B,0x92,0x23,0x44,0x01,0x4F};

  SellerInfo(const SellerInfo&);
  SellerInfo& operator=(const SellerInfo&);
  SellerInfo() : seller_id(0) {
  }

  virtual ~SellerInfo() throw();
  int64_t seller_id;
  std::map<int64_t, SkuInfo>  skus;

  _SellerInfo__isset __isset;

  void __set_seller_id(const int64_t val);

  void __set_skus(const std::map<int64_t, SkuInfo> & val);

  bool operator == (const SellerInfo & rhs) const
  {
    if (!(seller_id == rhs.seller_id))
      return false;
    if (!(skus == rhs.skus))
      return false;
    return true;
  }
  bool operator != (const SellerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SellerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SellerInfo& obj);
};

void swap(SellerInfo &a, SellerInfo &b);


class UsableCouponsReq {
 public:

  static const char* ascii_fingerprint; // = "A8D75C94947C1488AF2C900910B436D7";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0xD7,0x5C,0x94,0x94,0x7C,0x14,0x88,0xAF,0x2C,0x90,0x09,0x10,0xB4,0x36,0xD7};

  UsableCouponsReq(const UsableCouponsReq&);
  UsableCouponsReq& operator=(const UsableCouponsReq&);
  UsableCouponsReq() : user_id(0) {
  }

  virtual ~UsableCouponsReq() throw();
  int64_t user_id;
  std::map<int64_t, SellerInfo>  sellers;

  void __set_user_id(const int64_t val);

  void __set_sellers(const std::map<int64_t, SellerInfo> & val);

  bool operator == (const UsableCouponsReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(sellers == rhs.sellers))
      return false;
    return true;
  }
  bool operator != (const UsableCouponsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsableCouponsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UsableCouponsReq& obj);
};

void swap(UsableCouponsReq &a, UsableCouponsReq &b);

typedef struct _UsableCouponsRsp__isset {
  _UsableCouponsRsp__isset() : error(false), errmsg(false), user_id(false), sellers(false), platUsableCoupons(false), sellerUsableCoupons(false), code_cacheCoupon_map(false), orderPrice(false), sellerId_priceInfo_map(false), sellerId_skuId_priceInfo_map(false), platCode_totalSalePrice_map(false), sellerId_code_totalSalePrice_map(false), sellerId_skuId_code_totalSalePrice_map(false), platCode_wareSet_map(false), sellerId_code_wareSet_map(false), sellerId_wareId_code_map(false), skuID_wareID_map(false), usableCodes(false) {}
  bool error :1;
  bool errmsg :1;
  bool user_id :1;
  bool sellers :1;
  bool platUsableCoupons :1;
  bool sellerUsableCoupons :1;
  bool code_cacheCoupon_map :1;
  bool orderPrice :1;
  bool sellerId_priceInfo_map :1;
  bool sellerId_skuId_priceInfo_map :1;
  bool platCode_totalSalePrice_map :1;
  bool sellerId_code_totalSalePrice_map :1;
  bool sellerId_skuId_code_totalSalePrice_map :1;
  bool platCode_wareSet_map :1;
  bool sellerId_code_wareSet_map :1;
  bool sellerId_wareId_code_map :1;
  bool skuID_wareID_map :1;
  bool usableCodes :1;
} _UsableCouponsRsp__isset;

class UsableCouponsRsp {
 public:

  static const char* ascii_fingerprint; // = "97FA4DB7A8AB5CF282B52ACB2E707772";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xFA,0x4D,0xB7,0xA8,0xAB,0x5C,0xF2,0x82,0xB5,0x2A,0xCB,0x2E,0x70,0x77,0x72};

  UsableCouponsRsp(const UsableCouponsRsp&);
  UsableCouponsRsp& operator=(const UsableCouponsRsp&);
  UsableCouponsRsp() : error(( ::coupon::Error::type)0), errmsg(), user_id(0) {
  }

  virtual ~UsableCouponsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int64_t user_id;
  std::map<int64_t, SellerInfo>  sellers;
  std::vector< ::coupon::CacheCoupon>  platUsableCoupons;
  std::map<int64_t, std::vector< ::coupon::CacheCoupon> >  sellerUsableCoupons;
  std::map<std::string,  ::coupon::CacheCoupon>  code_cacheCoupon_map;
  PriceInfo orderPrice;
  std::map<int64_t, PriceInfo>  sellerId_priceInfo_map;
  std::map<int64_t, std::map<int64_t, PriceInfo> >  sellerId_skuId_priceInfo_map;
  std::map<std::string, double>  platCode_totalSalePrice_map;
  std::map<int64_t, std::map<std::string, double> >  sellerId_code_totalSalePrice_map;
  std::map<int64_t, std::map<int64_t, std::map<std::string, double> > >  sellerId_skuId_code_totalSalePrice_map;
  std::map<std::string, std::set<int64_t> >  platCode_wareSet_map;
  std::map<int64_t, std::map<std::string, std::set<int64_t> > >  sellerId_code_wareSet_map;
  std::map<int64_t, std::map<int64_t, std::map<std::string, bool> > >  sellerId_wareId_code_map;
  std::map<int64_t, int64_t>  skuID_wareID_map;
  std::vector<std::string>  usableCodes;

  _UsableCouponsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_sellers(const std::map<int64_t, SellerInfo> & val);

  void __set_platUsableCoupons(const std::vector< ::coupon::CacheCoupon> & val);

  void __set_sellerUsableCoupons(const std::map<int64_t, std::vector< ::coupon::CacheCoupon> > & val);

  void __set_code_cacheCoupon_map(const std::map<std::string,  ::coupon::CacheCoupon> & val);

  void __set_orderPrice(const PriceInfo& val);

  void __set_sellerId_priceInfo_map(const std::map<int64_t, PriceInfo> & val);

  void __set_sellerId_skuId_priceInfo_map(const std::map<int64_t, std::map<int64_t, PriceInfo> > & val);

  void __set_platCode_totalSalePrice_map(const std::map<std::string, double> & val);

  void __set_sellerId_code_totalSalePrice_map(const std::map<int64_t, std::map<std::string, double> > & val);

  void __set_sellerId_skuId_code_totalSalePrice_map(const std::map<int64_t, std::map<int64_t, std::map<std::string, double> > > & val);

  void __set_platCode_wareSet_map(const std::map<std::string, std::set<int64_t> > & val);

  void __set_sellerId_code_wareSet_map(const std::map<int64_t, std::map<std::string, std::set<int64_t> > > & val);

  void __set_sellerId_wareId_code_map(const std::map<int64_t, std::map<int64_t, std::map<std::string, bool> > > & val);

  void __set_skuID_wareID_map(const std::map<int64_t, int64_t> & val);

  void __set_usableCodes(const std::vector<std::string> & val);

  bool operator == (const UsableCouponsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(sellers == rhs.sellers))
      return false;
    if (!(platUsableCoupons == rhs.platUsableCoupons))
      return false;
    if (!(sellerUsableCoupons == rhs.sellerUsableCoupons))
      return false;
    if (!(code_cacheCoupon_map == rhs.code_cacheCoupon_map))
      return false;
    if (!(orderPrice == rhs.orderPrice))
      return false;
    if (!(sellerId_priceInfo_map == rhs.sellerId_priceInfo_map))
      return false;
    if (!(sellerId_skuId_priceInfo_map == rhs.sellerId_skuId_priceInfo_map))
      return false;
    if (!(platCode_totalSalePrice_map == rhs.platCode_totalSalePrice_map))
      return false;
    if (!(sellerId_code_totalSalePrice_map == rhs.sellerId_code_totalSalePrice_map))
      return false;
    if (!(sellerId_skuId_code_totalSalePrice_map == rhs.sellerId_skuId_code_totalSalePrice_map))
      return false;
    if (!(platCode_wareSet_map == rhs.platCode_wareSet_map))
      return false;
    if (!(sellerId_code_wareSet_map == rhs.sellerId_code_wareSet_map))
      return false;
    if (!(sellerId_wareId_code_map == rhs.sellerId_wareId_code_map))
      return false;
    if (!(skuID_wareID_map == rhs.skuID_wareID_map))
      return false;
    if (!(usableCodes == rhs.usableCodes))
      return false;
    return true;
  }
  bool operator != (const UsableCouponsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsableCouponsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UsableCouponsRsp& obj);
};

void swap(UsableCouponsRsp &a, UsableCouponsRsp &b);


class NotUsableCouponsReq {
 public:

  static const char* ascii_fingerprint; // = "7F533DDAA9BAE55D19471EB830FD27BC";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x53,0x3D,0xDA,0xA9,0xBA,0xE5,0x5D,0x19,0x47,0x1E,0xB8,0x30,0xFD,0x27,0xBC};

  NotUsableCouponsReq(const NotUsableCouponsReq&);
  NotUsableCouponsReq& operator=(const NotUsableCouponsReq&);
  NotUsableCouponsReq() : user_id(0), page(0), count(0) {
  }

  virtual ~NotUsableCouponsReq() throw();
  int64_t user_id;
  std::map<int64_t, SellerInfo>  sellers;
  std::vector<std::string>  usableCodes;
  int32_t page;
  int32_t count;

  void __set_user_id(const int64_t val);

  void __set_sellers(const std::map<int64_t, SellerInfo> & val);

  void __set_usableCodes(const std::vector<std::string> & val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const NotUsableCouponsReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(sellers == rhs.sellers))
      return false;
    if (!(usableCodes == rhs.usableCodes))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const NotUsableCouponsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotUsableCouponsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NotUsableCouponsReq& obj);
};

void swap(NotUsableCouponsReq &a, NotUsableCouponsReq &b);

typedef struct _NotUsableCouponsRsp__isset {
  _NotUsableCouponsRsp__isset() : error(false), errmsg(false), user_id(false), sellers(false), usableCodes(false), notUsableCoupons(false), page(false), count(false), total(false) {}
  bool error :1;
  bool errmsg :1;
  bool user_id :1;
  bool sellers :1;
  bool usableCodes :1;
  bool notUsableCoupons :1;
  bool page :1;
  bool count :1;
  bool total :1;
} _NotUsableCouponsRsp__isset;

class NotUsableCouponsRsp {
 public:

  static const char* ascii_fingerprint; // = "110C49CEC4788C20864DFBD4E58392AB";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x0C,0x49,0xCE,0xC4,0x78,0x8C,0x20,0x86,0x4D,0xFB,0xD4,0xE5,0x83,0x92,0xAB};

  NotUsableCouponsRsp(const NotUsableCouponsRsp&);
  NotUsableCouponsRsp& operator=(const NotUsableCouponsRsp&);
  NotUsableCouponsRsp() : error(( ::coupon::Error::type)0), errmsg(), user_id(0), page(0), count(0), total(0) {
  }

  virtual ~NotUsableCouponsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int64_t user_id;
  std::map<int64_t, SellerInfo>  sellers;
  std::vector<std::string>  usableCodes;
  std::vector< ::coupon::CacheCoupon>  notUsableCoupons;
  int32_t page;
  int32_t count;
  int32_t total;

  _NotUsableCouponsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_sellers(const std::map<int64_t, SellerInfo> & val);

  void __set_usableCodes(const std::vector<std::string> & val);

  void __set_notUsableCoupons(const std::vector< ::coupon::CacheCoupon> & val);

  void __set_page(const int32_t val);

  void __set_count(const int32_t val);

  void __set_total(const int32_t val);

  bool operator == (const NotUsableCouponsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(sellers == rhs.sellers))
      return false;
    if (!(usableCodes == rhs.usableCodes))
      return false;
    if (!(notUsableCoupons == rhs.notUsableCoupons))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const NotUsableCouponsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotUsableCouponsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NotUsableCouponsRsp& obj);
};

void swap(NotUsableCouponsRsp &a, NotUsableCouponsRsp &b);

typedef struct _ApportionReq__isset {
  _ApportionReq__isset() : plat_code(false), sellerId_code_map(false) {}
  bool plat_code :1;
  bool sellerId_code_map :1;
} _ApportionReq__isset;

class ApportionReq {
 public:

  static const char* ascii_fingerprint; // = "80EF5E503BFEC9565BB00BF03B7F2578";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0xEF,0x5E,0x50,0x3B,0xFE,0xC9,0x56,0x5B,0xB0,0x0B,0xF0,0x3B,0x7F,0x25,0x78};

  ApportionReq(const ApportionReq&);
  ApportionReq& operator=(const ApportionReq&);
  ApportionReq() : user_id(0), plat_code() {
  }

  virtual ~ApportionReq() throw();
  int64_t user_id;
  std::map<int64_t, SellerInfo>  sellers;
  std::string plat_code;
  std::map<int64_t, std::string>  sellerId_code_map;

  _ApportionReq__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_sellers(const std::map<int64_t, SellerInfo> & val);

  void __set_plat_code(const std::string& val);

  void __set_sellerId_code_map(const std::map<int64_t, std::string> & val);

  bool operator == (const ApportionReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(sellers == rhs.sellers))
      return false;
    if (__isset.plat_code != rhs.__isset.plat_code)
      return false;
    else if (__isset.plat_code && !(plat_code == rhs.plat_code))
      return false;
    if (__isset.sellerId_code_map != rhs.__isset.sellerId_code_map)
      return false;
    else if (__isset.sellerId_code_map && !(sellerId_code_map == rhs.sellerId_code_map))
      return false;
    return true;
  }
  bool operator != (const ApportionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApportionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ApportionReq& obj);
};

void swap(ApportionReq &a, ApportionReq &b);

typedef struct _ApportionRsp__isset {
  _ApportionRsp__isset() : error(false), errmsg(false), usableCouponsRsp(false), toggle_cacheCoupon_map(false), sellerId_cacheCoupon_map(false) {}
  bool error :1;
  bool errmsg :1;
  bool usableCouponsRsp :1;
  bool toggle_cacheCoupon_map :1;
  bool sellerId_cacheCoupon_map :1;
} _ApportionRsp__isset;

class ApportionRsp {
 public:

  static const char* ascii_fingerprint; // = "5134086380D5E3915AD276681FA8D6D5";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0x34,0x08,0x63,0x80,0xD5,0xE3,0x91,0x5A,0xD2,0x76,0x68,0x1F,0xA8,0xD6,0xD5};

  ApportionRsp(const ApportionRsp&);
  ApportionRsp& operator=(const ApportionRsp&);
  ApportionRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~ApportionRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  UsableCouponsRsp usableCouponsRsp;
  std::map<std::string,  ::coupon::CacheCoupon>  toggle_cacheCoupon_map;
  std::map<int64_t, std::vector< ::coupon::CacheCoupon> >  sellerId_cacheCoupon_map;

  _ApportionRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_usableCouponsRsp(const UsableCouponsRsp& val);

  void __set_toggle_cacheCoupon_map(const std::map<std::string,  ::coupon::CacheCoupon> & val);

  void __set_sellerId_cacheCoupon_map(const std::map<int64_t, std::vector< ::coupon::CacheCoupon> > & val);

  bool operator == (const ApportionRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(usableCouponsRsp == rhs.usableCouponsRsp))
      return false;
    if (!(toggle_cacheCoupon_map == rhs.toggle_cacheCoupon_map))
      return false;
    if (!(sellerId_cacheCoupon_map == rhs.sellerId_cacheCoupon_map))
      return false;
    return true;
  }
  bool operator != (const ApportionRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApportionRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ApportionRsp& obj);
};

void swap(ApportionRsp &a, ApportionRsp &b);


class CacheCouponGroupsReq {
 public:

  static const char* ascii_fingerprint; // = "FF7335CAA8E1AFD6418DDE8FC093C053";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x73,0x35,0xCA,0xA8,0xE1,0xAF,0xD6,0x41,0x8D,0xDE,0x8F,0xC0,0x93,0xC0,0x53};

  CacheCouponGroupsReq(const CacheCouponGroupsReq&);
  CacheCouponGroupsReq& operator=(const CacheCouponGroupsReq&);
  CacheCouponGroupsReq() {
  }

  virtual ~CacheCouponGroupsReq() throw();
  std::set<int32_t>  coupon_group_id_set;

  void __set_coupon_group_id_set(const std::set<int32_t> & val);

  bool operator == (const CacheCouponGroupsReq & rhs) const
  {
    if (!(coupon_group_id_set == rhs.coupon_group_id_set))
      return false;
    return true;
  }
  bool operator != (const CacheCouponGroupsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheCouponGroupsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CacheCouponGroupsReq& obj);
};

void swap(CacheCouponGroupsReq &a, CacheCouponGroupsReq &b);

typedef struct _CacheCouponGroupsRsp__isset {
  _CacheCouponGroupsRsp__isset() : error(false), errmsg(false), cacheCouponGroupList(false) {}
  bool error :1;
  bool errmsg :1;
  bool cacheCouponGroupList :1;
} _CacheCouponGroupsRsp__isset;

class CacheCouponGroupsRsp {
 public:

  static const char* ascii_fingerprint; // = "FD84B558F4978C30045A2AE3235C001F";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x84,0xB5,0x58,0xF4,0x97,0x8C,0x30,0x04,0x5A,0x2A,0xE3,0x23,0x5C,0x00,0x1F};

  CacheCouponGroupsRsp(const CacheCouponGroupsRsp&);
  CacheCouponGroupsRsp& operator=(const CacheCouponGroupsRsp&);
  CacheCouponGroupsRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~CacheCouponGroupsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector< ::coupon::CacheCouponGroup>  cacheCouponGroupList;

  _CacheCouponGroupsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_cacheCouponGroupList(const std::vector< ::coupon::CacheCouponGroup> & val);

  bool operator == (const CacheCouponGroupsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(cacheCouponGroupList == rhs.cacheCouponGroupList))
      return false;
    return true;
  }
  bool operator != (const CacheCouponGroupsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheCouponGroupsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CacheCouponGroupsRsp& obj);
};

void swap(CacheCouponGroupsRsp &a, CacheCouponGroupsRsp &b);


class RelatedCouponGroupsReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  RelatedCouponGroupsReq(const RelatedCouponGroupsReq&);
  RelatedCouponGroupsReq& operator=(const RelatedCouponGroupsReq&);
  RelatedCouponGroupsReq() : coupon_group_id(0) {
  }

  virtual ~RelatedCouponGroupsReq() throw();
  int32_t coupon_group_id;

  void __set_coupon_group_id(const int32_t val);

  bool operator == (const RelatedCouponGroupsReq & rhs) const
  {
    if (!(coupon_group_id == rhs.coupon_group_id))
      return false;
    return true;
  }
  bool operator != (const RelatedCouponGroupsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RelatedCouponGroupsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RelatedCouponGroupsReq& obj);
};

void swap(RelatedCouponGroupsReq &a, RelatedCouponGroupsReq &b);

typedef struct _RelatedCouponGroupsRsp__isset {
  _RelatedCouponGroupsRsp__isset() : error(false), errmsg(false), couponGroupList(false) {}
  bool error :1;
  bool errmsg :1;
  bool couponGroupList :1;
} _RelatedCouponGroupsRsp__isset;

class RelatedCouponGroupsRsp {
 public:

  static const char* ascii_fingerprint; // = "6C75BDA8167BE8F5F9B6BE7F0CE142BF";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x75,0xBD,0xA8,0x16,0x7B,0xE8,0xF5,0xF9,0xB6,0xBE,0x7F,0x0C,0xE1,0x42,0xBF};

  RelatedCouponGroupsRsp(const RelatedCouponGroupsRsp&);
  RelatedCouponGroupsRsp& operator=(const RelatedCouponGroupsRsp&);
  RelatedCouponGroupsRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~RelatedCouponGroupsRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  std::vector< ::coupon::CouponGroup>  couponGroupList;

  _RelatedCouponGroupsRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_couponGroupList(const std::vector< ::coupon::CouponGroup> & val);

  bool operator == (const RelatedCouponGroupsRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(couponGroupList == rhs.couponGroupList))
      return false;
    return true;
  }
  bool operator != (const RelatedCouponGroupsRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RelatedCouponGroupsRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RelatedCouponGroupsRsp& obj);
};

void swap(RelatedCouponGroupsRsp &a, RelatedCouponGroupsRsp &b);


class WareLabelReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  WareLabelReq(const WareLabelReq&);
  WareLabelReq& operator=(const WareLabelReq&);
  WareLabelReq() : ware_label_id(0) {
  }

  virtual ~WareLabelReq() throw();
  int32_t ware_label_id;

  void __set_ware_label_id(const int32_t val);

  bool operator == (const WareLabelReq & rhs) const
  {
    if (!(ware_label_id == rhs.ware_label_id))
      return false;
    return true;
  }
  bool operator != (const WareLabelReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelReq& obj);
};

void swap(WareLabelReq &a, WareLabelReq &b);

typedef struct _WareLabelRsp__isset {
  _WareLabelRsp__isset() : error(false), errmsg(false), wareLabel(false), waresList(false) {}
  bool error :1;
  bool errmsg :1;
  bool wareLabel :1;
  bool waresList :1;
} _WareLabelRsp__isset;

class WareLabelRsp {
 public:

  static const char* ascii_fingerprint; // = "ACA8411401D53BBB0DA6DF559A8DAEEB";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xA8,0x41,0x14,0x01,0xD5,0x3B,0xBB,0x0D,0xA6,0xDF,0x55,0x9A,0x8D,0xAE,0xEB};

  WareLabelRsp(const WareLabelRsp&);
  WareLabelRsp& operator=(const WareLabelRsp&);
  WareLabelRsp() : error(( ::coupon::Error::type)0), errmsg() {
  }

  virtual ~WareLabelRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
   ::coupon::WareLabel wareLabel;
  std::vector< ::coupon::WareLabelWares>  waresList;

  _WareLabelRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_wareLabel(const  ::coupon::WareLabel& val);

  void __set_waresList(const std::vector< ::coupon::WareLabelWares> & val);

  bool operator == (const WareLabelRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(wareLabel == rhs.wareLabel))
      return false;
    if (!(waresList == rhs.waresList))
      return false;
    return true;
  }
  bool operator != (const WareLabelRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WareLabelRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WareLabelRsp& obj);
};

void swap(WareLabelRsp &a, WareLabelRsp &b);

typedef struct _ServerTimeReq__isset {
  _ServerTimeReq__isset() : local_time(false) {}
  bool local_time :1;
} _ServerTimeReq__isset;

class ServerTimeReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ServerTimeReq(const ServerTimeReq&);
  ServerTimeReq& operator=(const ServerTimeReq&);
  ServerTimeReq() : local_time(0) {
  }

  virtual ~ServerTimeReq() throw();
  int32_t local_time;

  _ServerTimeReq__isset __isset;

  void __set_local_time(const int32_t val);

  bool operator == (const ServerTimeReq & rhs) const
  {
    if (!(local_time == rhs.local_time))
      return false;
    return true;
  }
  bool operator != (const ServerTimeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerTimeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerTimeReq& obj);
};

void swap(ServerTimeReq &a, ServerTimeReq &b);

typedef struct _ServerTimeRsp__isset {
  _ServerTimeRsp__isset() : error(false), errmsg(false), local_time(false), server_time(false) {}
  bool error :1;
  bool errmsg :1;
  bool local_time :1;
  bool server_time :1;
} _ServerTimeRsp__isset;

class ServerTimeRsp {
 public:

  static const char* ascii_fingerprint; // = "31BFBC55E24CCAB83D9E1E9DED82F2A1";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xBF,0xBC,0x55,0xE2,0x4C,0xCA,0xB8,0x3D,0x9E,0x1E,0x9D,0xED,0x82,0xF2,0xA1};

  ServerTimeRsp(const ServerTimeRsp&);
  ServerTimeRsp& operator=(const ServerTimeRsp&);
  ServerTimeRsp() : error(( ::coupon::Error::type)0), errmsg(), local_time(0), server_time(0) {
  }

  virtual ~ServerTimeRsp() throw();
   ::coupon::Error::type error;
  std::string errmsg;
  int32_t local_time;
  int32_t server_time;

  _ServerTimeRsp__isset __isset;

  void __set_error(const  ::coupon::Error::type val);

  void __set_errmsg(const std::string& val);

  void __set_local_time(const int32_t val);

  void __set_server_time(const int32_t val);

  bool operator == (const ServerTimeRsp & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(local_time == rhs.local_time))
      return false;
    if (!(server_time == rhs.server_time))
      return false;
    return true;
  }
  bool operator != (const ServerTimeRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerTimeRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerTimeRsp& obj);
};

void swap(ServerTimeRsp &a, ServerTimeRsp &b);

} // namespace

#endif
