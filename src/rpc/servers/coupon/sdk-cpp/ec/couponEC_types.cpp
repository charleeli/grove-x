/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "couponEC_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace couponEC {


GetDefaultConfigReq::~GetDefaultConfigReq() throw() {
}


void GetDefaultConfigReq::__set_dummy(const bool val) {
  this->dummy = val;
}

const char* GetDefaultConfigReq::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t GetDefaultConfigReq::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t GetDefaultConfigReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dummy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dummy);
          isset_dummy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dummy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetDefaultConfigReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetDefaultConfigReq");

  xfer += oprot->writeFieldBegin("dummy", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->dummy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetDefaultConfigReq &a, GetDefaultConfigReq &b) {
  using ::std::swap;
  swap(a.dummy, b.dummy);
}

GetDefaultConfigReq::GetDefaultConfigReq(const GetDefaultConfigReq& other0) {
  dummy = other0.dummy;
}
GetDefaultConfigReq& GetDefaultConfigReq::operator=(const GetDefaultConfigReq& other1) {
  dummy = other1.dummy;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetDefaultConfigReq& obj) {
  using apache::thrift::to_string;
  out << "GetDefaultConfigReq(";
  out << "dummy=" << to_string(obj.dummy);
  out << ")";
  return out;
}


GetDefaultConfigRsp::~GetDefaultConfigRsp() throw() {
}


void GetDefaultConfigRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void GetDefaultConfigRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void GetDefaultConfigRsp::__set_config(const  ::coupon::DefaultConfig& val) {
  this->config = val;
}

const char* GetDefaultConfigRsp::ascii_fingerprint = "DBEDF127FADA999D729B3DA57DB8B462";
const uint8_t GetDefaultConfigRsp::binary_fingerprint[16] = {0xDB,0xED,0xF1,0x27,0xFA,0xDA,0x99,0x9D,0x72,0x9B,0x3D,0xA5,0x7D,0xB8,0xB4,0x62};

uint32_t GetDefaultConfigRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->error = ( ::coupon::Error::type)ecast2;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDefaultConfigRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetDefaultConfigRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetDefaultConfigRsp &a, GetDefaultConfigRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.config, b.config);
  swap(a.__isset, b.__isset);
}

GetDefaultConfigRsp::GetDefaultConfigRsp(const GetDefaultConfigRsp& other3) {
  error = other3.error;
  errmsg = other3.errmsg;
  config = other3.config;
  __isset = other3.__isset;
}
GetDefaultConfigRsp& GetDefaultConfigRsp::operator=(const GetDefaultConfigRsp& other4) {
  error = other4.error;
  errmsg = other4.errmsg;
  config = other4.config;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetDefaultConfigRsp& obj) {
  using apache::thrift::to_string;
  out << "GetDefaultConfigRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "config=" << to_string(obj.config);
  out << ")";
  return out;
}


DecodeCodeReq::~DecodeCodeReq() throw() {
}


void DecodeCodeReq::__set_code(const std::string& val) {
  this->code = val;
}

const char* DecodeCodeReq::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DecodeCodeReq::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DecodeCodeReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DecodeCodeReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DecodeCodeReq");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DecodeCodeReq &a, DecodeCodeReq &b) {
  using ::std::swap;
  swap(a.code, b.code);
}

DecodeCodeReq::DecodeCodeReq(const DecodeCodeReq& other5) {
  code = other5.code;
}
DecodeCodeReq& DecodeCodeReq::operator=(const DecodeCodeReq& other6) {
  code = other6.code;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DecodeCodeReq& obj) {
  using apache::thrift::to_string;
  out << "DecodeCodeReq(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


DecodeCodeRsp::~DecodeCodeRsp() throw() {
}


void DecodeCodeRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void DecodeCodeRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void DecodeCodeRsp::__set_code(const std::string& val) {
  this->code = val;
}

void DecodeCodeRsp::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void DecodeCodeRsp::__set_coupon_id(const int32_t val) {
  this->coupon_id = val;
}

const char* DecodeCodeRsp::ascii_fingerprint = "3032C63CF32F152EC3B0B914A8E09E84";
const uint8_t DecodeCodeRsp::binary_fingerprint[16] = {0x30,0x32,0xC6,0x3C,0xF3,0x2F,0x15,0x2E,0xC3,0xB0,0xB9,0x14,0xA8,0xE0,0x9E,0x84};

uint32_t DecodeCodeRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->error = ( ::coupon::Error::type)ecast7;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          this->__isset.coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_id);
          this->__isset.coupon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DecodeCodeRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DecodeCodeRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->coupon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DecodeCodeRsp &a, DecodeCodeRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.code, b.code);
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.coupon_id, b.coupon_id);
  swap(a.__isset, b.__isset);
}

DecodeCodeRsp::DecodeCodeRsp(const DecodeCodeRsp& other8) {
  error = other8.error;
  errmsg = other8.errmsg;
  code = other8.code;
  coupon_group_id = other8.coupon_group_id;
  coupon_id = other8.coupon_id;
  __isset = other8.__isset;
}
DecodeCodeRsp& DecodeCodeRsp::operator=(const DecodeCodeRsp& other9) {
  error = other9.error;
  errmsg = other9.errmsg;
  code = other9.code;
  coupon_group_id = other9.coupon_group_id;
  coupon_id = other9.coupon_id;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DecodeCodeRsp& obj) {
  using apache::thrift::to_string;
  out << "DecodeCodeRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "code=" << to_string(obj.code);
  out << ", " << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "coupon_id=" << to_string(obj.coupon_id);
  out << ")";
  return out;
}


CheckArgotReq::~CheckArgotReq() throw() {
}


void CheckArgotReq::__set_argot(const std::string& val) {
  this->argot = val;
}

const char* CheckArgotReq::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t CheckArgotReq::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t CheckArgotReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_argot = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          isset_argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_argot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CheckArgotReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CheckArgotReq");

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CheckArgotReq &a, CheckArgotReq &b) {
  using ::std::swap;
  swap(a.argot, b.argot);
}

CheckArgotReq::CheckArgotReq(const CheckArgotReq& other10) {
  argot = other10.argot;
}
CheckArgotReq& CheckArgotReq::operator=(const CheckArgotReq& other11) {
  argot = other11.argot;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CheckArgotReq& obj) {
  using apache::thrift::to_string;
  out << "CheckArgotReq(";
  out << "argot=" << to_string(obj.argot);
  out << ")";
  return out;
}


CheckArgotRsp::~CheckArgotRsp() throw() {
}


void CheckArgotRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CheckArgotRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CheckArgotRsp::__set_argot(const std::string& val) {
  this->argot = val;
}

void CheckArgotRsp::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

const char* CheckArgotRsp::ascii_fingerprint = "5E05C96400E57E7C92621ECF61706460";
const uint8_t CheckArgotRsp::binary_fingerprint[16] = {0x5E,0x05,0xC9,0x64,0x00,0xE5,0x7E,0x7C,0x92,0x62,0x1E,0xCF,0x61,0x70,0x64,0x60};

uint32_t CheckArgotRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->error = ( ::coupon::Error::type)ecast12;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          this->__isset.argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          this->__isset.coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckArgotRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CheckArgotRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->argot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CheckArgotRsp &a, CheckArgotRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.argot, b.argot);
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.__isset, b.__isset);
}

CheckArgotRsp::CheckArgotRsp(const CheckArgotRsp& other13) {
  error = other13.error;
  errmsg = other13.errmsg;
  argot = other13.argot;
  coupon_group_id = other13.coupon_group_id;
  __isset = other13.__isset;
}
CheckArgotRsp& CheckArgotRsp::operator=(const CheckArgotRsp& other14) {
  error = other14.error;
  errmsg = other14.errmsg;
  argot = other14.argot;
  coupon_group_id = other14.coupon_group_id;
  __isset = other14.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CheckArgotRsp& obj) {
  using apache::thrift::to_string;
  out << "CheckArgotRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "argot=" << to_string(obj.argot);
  out << ", " << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ")";
  return out;
}


UserLeftCouponsCountReq::~UserLeftCouponsCountReq() throw() {
}


void UserLeftCouponsCountReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void UserLeftCouponsCountReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

const char* UserLeftCouponsCountReq::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t UserLeftCouponsCountReq::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t UserLeftCouponsCountReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_user_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserLeftCouponsCountReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserLeftCouponsCountReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserLeftCouponsCountReq &a, UserLeftCouponsCountReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.user_id, b.user_id);
}

UserLeftCouponsCountReq::UserLeftCouponsCountReq(const UserLeftCouponsCountReq& other15) {
  coupon_group_id = other15.coupon_group_id;
  user_id = other15.user_id;
}
UserLeftCouponsCountReq& UserLeftCouponsCountReq::operator=(const UserLeftCouponsCountReq& other16) {
  coupon_group_id = other16.coupon_group_id;
  user_id = other16.user_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserLeftCouponsCountReq& obj) {
  using apache::thrift::to_string;
  out << "UserLeftCouponsCountReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ")";
  return out;
}


UserLeftCouponsCountRsp::~UserLeftCouponsCountRsp() throw() {
}


void UserLeftCouponsCountRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UserLeftCouponsCountRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void UserLeftCouponsCountRsp::__set_left_count(const int32_t val) {
  this->left_count = val;
}

const char* UserLeftCouponsCountRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t UserLeftCouponsCountRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t UserLeftCouponsCountRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->error = ( ::coupon::Error::type)ecast17;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left_count);
          this->__isset.left_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserLeftCouponsCountRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserLeftCouponsCountRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->left_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserLeftCouponsCountRsp &a, UserLeftCouponsCountRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.left_count, b.left_count);
  swap(a.__isset, b.__isset);
}

UserLeftCouponsCountRsp::UserLeftCouponsCountRsp(const UserLeftCouponsCountRsp& other18) {
  error = other18.error;
  errmsg = other18.errmsg;
  left_count = other18.left_count;
  __isset = other18.__isset;
}
UserLeftCouponsCountRsp& UserLeftCouponsCountRsp::operator=(const UserLeftCouponsCountRsp& other19) {
  error = other19.error;
  errmsg = other19.errmsg;
  left_count = other19.left_count;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserLeftCouponsCountRsp& obj) {
  using apache::thrift::to_string;
  out << "UserLeftCouponsCountRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "left_count=" << to_string(obj.left_count);
  out << ")";
  return out;
}


DrawnCountTodayReq::~DrawnCountTodayReq() throw() {
}


void DrawnCountTodayReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void DrawnCountTodayReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

const char* DrawnCountTodayReq::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t DrawnCountTodayReq::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t DrawnCountTodayReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_user_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DrawnCountTodayReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DrawnCountTodayReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DrawnCountTodayReq &a, DrawnCountTodayReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.user_id, b.user_id);
}

DrawnCountTodayReq::DrawnCountTodayReq(const DrawnCountTodayReq& other20) {
  coupon_group_id = other20.coupon_group_id;
  user_id = other20.user_id;
}
DrawnCountTodayReq& DrawnCountTodayReq::operator=(const DrawnCountTodayReq& other21) {
  coupon_group_id = other21.coupon_group_id;
  user_id = other21.user_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DrawnCountTodayReq& obj) {
  using apache::thrift::to_string;
  out << "DrawnCountTodayReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ")";
  return out;
}


DrawnCountTodayRsp::~DrawnCountTodayRsp() throw() {
}


void DrawnCountTodayRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void DrawnCountTodayRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void DrawnCountTodayRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* DrawnCountTodayRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t DrawnCountTodayRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t DrawnCountTodayRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->error = ( ::coupon::Error::type)ecast22;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DrawnCountTodayRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DrawnCountTodayRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DrawnCountTodayRsp &a, DrawnCountTodayRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

DrawnCountTodayRsp::DrawnCountTodayRsp(const DrawnCountTodayRsp& other23) {
  error = other23.error;
  errmsg = other23.errmsg;
  count = other23.count;
  __isset = other23.__isset;
}
DrawnCountTodayRsp& DrawnCountTodayRsp::operator=(const DrawnCountTodayRsp& other24) {
  error = other24.error;
  errmsg = other24.errmsg;
  count = other24.count;
  __isset = other24.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DrawnCountTodayRsp& obj) {
  using apache::thrift::to_string;
  out << "DrawnCountTodayRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


ClientCouponsReq::~ClientCouponsReq() throw() {
}


void ClientCouponsReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void ClientCouponsReq::__set_client_id(const std::string& val) {
  this->client_id = val;
}

const char* ClientCouponsReq::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t ClientCouponsReq::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t ClientCouponsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_client_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_id);
          isset_client_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_client_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClientCouponsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ClientCouponsReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->client_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ClientCouponsReq &a, ClientCouponsReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.client_id, b.client_id);
}

ClientCouponsReq::ClientCouponsReq(const ClientCouponsReq& other25) {
  coupon_group_id = other25.coupon_group_id;
  client_id = other25.client_id;
}
ClientCouponsReq& ClientCouponsReq::operator=(const ClientCouponsReq& other26) {
  coupon_group_id = other26.coupon_group_id;
  client_id = other26.client_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ClientCouponsReq& obj) {
  using apache::thrift::to_string;
  out << "ClientCouponsReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "client_id=" << to_string(obj.client_id);
  out << ")";
  return out;
}


ClientCouponsRsp::~ClientCouponsRsp() throw() {
}


void ClientCouponsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void ClientCouponsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void ClientCouponsRsp::__set_count(const int32_t val) {
  this->count = val;
}

const char* ClientCouponsRsp::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t ClientCouponsRsp::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t ClientCouponsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->error = ( ::coupon::Error::type)ecast27;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientCouponsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ClientCouponsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ClientCouponsRsp &a, ClientCouponsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

ClientCouponsRsp::ClientCouponsRsp(const ClientCouponsRsp& other28) {
  error = other28.error;
  errmsg = other28.errmsg;
  count = other28.count;
  __isset = other28.__isset;
}
ClientCouponsRsp& ClientCouponsRsp::operator=(const ClientCouponsRsp& other29) {
  error = other29.error;
  errmsg = other29.errmsg;
  count = other29.count;
  __isset = other29.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ClientCouponsRsp& obj) {
  using apache::thrift::to_string;
  out << "ClientCouponsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


DrawReq::~DrawReq() throw() {
}


void DrawReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

void DrawReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void DrawReq::__set_client_id(const std::string& val) {
  this->client_id = val;
__isset.client_id = true;
}

void DrawReq::__set_argot(const std::string& val) {
  this->argot = val;
__isset.argot = true;
}

void DrawReq::__set_scene_type(const int32_t val) {
  this->scene_type = val;
}

void DrawReq::__set_code(const std::string& val) {
  this->code = val;
__isset.code = true;
}

void DrawReq::__set_channel_id(const int32_t val) {
  this->channel_id = val;
__isset.channel_id = true;
}

const char* DrawReq::ascii_fingerprint = "B5DB26A4ECCCCE9691BBE531018F4925";
const uint8_t DrawReq::binary_fingerprint[16] = {0xB5,0xDB,0x26,0xA4,0xEC,0xCC,0xCE,0x96,0x91,0xBB,0xE5,0x31,0x01,0x8F,0x49,0x25};

uint32_t DrawReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;
  bool isset_user_id = false;
  bool isset_scene_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_id);
          this->__isset.client_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argot);
          this->__isset.argot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scene_type);
          isset_scene_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channel_id);
          this->__isset.channel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DrawReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DrawReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.client_id) {
    xfer += oprot->writeFieldBegin("client_id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->client_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.argot) {
    xfer += oprot->writeFieldBegin("argot", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->argot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("scene_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->scene_type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channel_id) {
    xfer += oprot->writeFieldBegin("channel_id", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->channel_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DrawReq &a, DrawReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
  swap(a.user_id, b.user_id);
  swap(a.client_id, b.client_id);
  swap(a.argot, b.argot);
  swap(a.scene_type, b.scene_type);
  swap(a.code, b.code);
  swap(a.channel_id, b.channel_id);
  swap(a.__isset, b.__isset);
}

DrawReq::DrawReq(const DrawReq& other30) {
  coupon_group_id = other30.coupon_group_id;
  user_id = other30.user_id;
  client_id = other30.client_id;
  argot = other30.argot;
  scene_type = other30.scene_type;
  code = other30.code;
  channel_id = other30.channel_id;
  __isset = other30.__isset;
}
DrawReq& DrawReq::operator=(const DrawReq& other31) {
  coupon_group_id = other31.coupon_group_id;
  user_id = other31.user_id;
  client_id = other31.client_id;
  argot = other31.argot;
  scene_type = other31.scene_type;
  code = other31.code;
  channel_id = other31.channel_id;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DrawReq& obj) {
  using apache::thrift::to_string;
  out << "DrawReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "client_id="; (obj.__isset.client_id ? (out << to_string(obj.client_id)) : (out << "<null>"));
  out << ", " << "argot="; (obj.__isset.argot ? (out << to_string(obj.argot)) : (out << "<null>"));
  out << ", " << "scene_type=" << to_string(obj.scene_type);
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "channel_id="; (obj.__isset.channel_id ? (out << to_string(obj.channel_id)) : (out << "<null>"));
  out << ")";
  return out;
}


DrawRsp::~DrawRsp() throw() {
}


void DrawRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void DrawRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void DrawRsp::__set_code(const std::string& val) {
  this->code = val;
}

void DrawRsp::__set_cacheCoupon(const  ::coupon::CacheCoupon& val) {
  this->cacheCoupon = val;
}

const char* DrawRsp::ascii_fingerprint = "3DBBDBE95FE2F3CC7DFFB2E866EB967E";
const uint8_t DrawRsp::binary_fingerprint[16] = {0x3D,0xBB,0xDB,0xE9,0x5F,0xE2,0xF3,0xCC,0x7D,0xFF,0xB2,0xE8,0x66,0xEB,0x96,0x7E};

uint32_t DrawRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast32;
          xfer += iprot->readI32(ecast32);
          this->error = ( ::coupon::Error::type)ecast32;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cacheCoupon.read(iprot);
          this->__isset.cacheCoupon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DrawRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DrawRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cacheCoupon", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->cacheCoupon.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DrawRsp &a, DrawRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.code, b.code);
  swap(a.cacheCoupon, b.cacheCoupon);
  swap(a.__isset, b.__isset);
}

DrawRsp::DrawRsp(const DrawRsp& other33) {
  error = other33.error;
  errmsg = other33.errmsg;
  code = other33.code;
  cacheCoupon = other33.cacheCoupon;
  __isset = other33.__isset;
}
DrawRsp& DrawRsp::operator=(const DrawRsp& other34) {
  error = other34.error;
  errmsg = other34.errmsg;
  code = other34.code;
  cacheCoupon = other34.cacheCoupon;
  __isset = other34.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DrawRsp& obj) {
  using apache::thrift::to_string;
  out << "DrawRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "code=" << to_string(obj.code);
  out << ", " << "cacheCoupon=" << to_string(obj.cacheCoupon);
  out << ")";
  return out;
}


RollbackReq::~RollbackReq() throw() {
}


void RollbackReq::__set_code(const std::string& val) {
  this->code = val;
}

void RollbackReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void RollbackReq::__set_order_id(const std::string& val) {
  this->order_id = val;
}

const char* RollbackReq::ascii_fingerprint = "FA35BEC6F4D26D79A7E0AD1366489BCC";
const uint8_t RollbackReq::binary_fingerprint[16] = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

uint32_t RollbackReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;
  bool isset_user_id = false;
  bool isset_order_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_id);
          isset_order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_order_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RollbackReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RollbackReq");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RollbackReq &a, RollbackReq &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.user_id, b.user_id);
  swap(a.order_id, b.order_id);
}

RollbackReq::RollbackReq(const RollbackReq& other35) {
  code = other35.code;
  user_id = other35.user_id;
  order_id = other35.order_id;
}
RollbackReq& RollbackReq::operator=(const RollbackReq& other36) {
  code = other36.code;
  user_id = other36.user_id;
  order_id = other36.order_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RollbackReq& obj) {
  using apache::thrift::to_string;
  out << "RollbackReq(";
  out << "code=" << to_string(obj.code);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "order_id=" << to_string(obj.order_id);
  out << ")";
  return out;
}


RollbackRsp::~RollbackRsp() throw() {
}


void RollbackRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void RollbackRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* RollbackRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t RollbackRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t RollbackRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast37;
          xfer += iprot->readI32(ecast37);
          this->error = ( ::coupon::Error::type)ecast37;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RollbackRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RollbackRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RollbackRsp &a, RollbackRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

RollbackRsp::RollbackRsp(const RollbackRsp& other38) {
  error = other38.error;
  errmsg = other38.errmsg;
  __isset = other38.__isset;
}
RollbackRsp& RollbackRsp::operator=(const RollbackRsp& other39) {
  error = other39.error;
  errmsg = other39.errmsg;
  __isset = other39.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RollbackRsp& obj) {
  using apache::thrift::to_string;
  out << "RollbackRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


FreezeReq::~FreezeReq() throw() {
}


void FreezeReq::__set_code(const std::string& val) {
  this->code = val;
}

void FreezeReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void FreezeReq::__set_order_id(const std::string& val) {
  this->order_id = val;
}

const char* FreezeReq::ascii_fingerprint = "FA35BEC6F4D26D79A7E0AD1366489BCC";
const uint8_t FreezeReq::binary_fingerprint[16] = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

uint32_t FreezeReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;
  bool isset_user_id = false;
  bool isset_order_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_id);
          isset_order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_order_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FreezeReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FreezeReq");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FreezeReq &a, FreezeReq &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.user_id, b.user_id);
  swap(a.order_id, b.order_id);
}

FreezeReq::FreezeReq(const FreezeReq& other40) {
  code = other40.code;
  user_id = other40.user_id;
  order_id = other40.order_id;
}
FreezeReq& FreezeReq::operator=(const FreezeReq& other41) {
  code = other41.code;
  user_id = other41.user_id;
  order_id = other41.order_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FreezeReq& obj) {
  using apache::thrift::to_string;
  out << "FreezeReq(";
  out << "code=" << to_string(obj.code);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "order_id=" << to_string(obj.order_id);
  out << ")";
  return out;
}


FreezeRsp::~FreezeRsp() throw() {
}


void FreezeRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void FreezeRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* FreezeRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t FreezeRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t FreezeRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast42;
          xfer += iprot->readI32(ecast42);
          this->error = ( ::coupon::Error::type)ecast42;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FreezeRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FreezeRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FreezeRsp &a, FreezeRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

FreezeRsp::FreezeRsp(const FreezeRsp& other43) {
  error = other43.error;
  errmsg = other43.errmsg;
  __isset = other43.__isset;
}
FreezeRsp& FreezeRsp::operator=(const FreezeRsp& other44) {
  error = other44.error;
  errmsg = other44.errmsg;
  __isset = other44.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FreezeRsp& obj) {
  using apache::thrift::to_string;
  out << "FreezeRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


PayReq::~PayReq() throw() {
}


void PayReq::__set_code(const std::string& val) {
  this->code = val;
}

void PayReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void PayReq::__set_order_id(const std::string& val) {
  this->order_id = val;
}

const char* PayReq::ascii_fingerprint = "FA35BEC6F4D26D79A7E0AD1366489BCC";
const uint8_t PayReq::binary_fingerprint[16] = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

uint32_t PayReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;
  bool isset_user_id = false;
  bool isset_order_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_id);
          isset_order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_order_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PayReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PayReq");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PayReq &a, PayReq &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.user_id, b.user_id);
  swap(a.order_id, b.order_id);
}

PayReq::PayReq(const PayReq& other45) {
  code = other45.code;
  user_id = other45.user_id;
  order_id = other45.order_id;
}
PayReq& PayReq::operator=(const PayReq& other46) {
  code = other46.code;
  user_id = other46.user_id;
  order_id = other46.order_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PayReq& obj) {
  using apache::thrift::to_string;
  out << "PayReq(";
  out << "code=" << to_string(obj.code);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "order_id=" << to_string(obj.order_id);
  out << ")";
  return out;
}


PayRsp::~PayRsp() throw() {
}


void PayRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void PayRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

const char* PayRsp::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t PayRsp::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t PayRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast47;
          xfer += iprot->readI32(ecast47);
          this->error = ( ::coupon::Error::type)ecast47;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PayRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PayRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PayRsp &a, PayRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.__isset, b.__isset);
}

PayRsp::PayRsp(const PayRsp& other48) {
  error = other48.error;
  errmsg = other48.errmsg;
  __isset = other48.__isset;
}
PayRsp& PayRsp::operator=(const PayRsp& other49) {
  error = other49.error;
  errmsg = other49.errmsg;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PayRsp& obj) {
  using apache::thrift::to_string;
  out << "PayRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ")";
  return out;
}


UserCouponsReq::~UserCouponsReq() throw() {
}


void UserCouponsReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void UserCouponsReq::__set_page(const int32_t val) {
  this->page = val;
}

void UserCouponsReq::__set_count(const int32_t val) {
  this->count = val;
}

void UserCouponsReq::__set_use_status(const int32_t val) {
  this->use_status = val;
}

const char* UserCouponsReq::ascii_fingerprint = "BE3A22B351B833B7BB1F7D4167460373";
const uint8_t UserCouponsReq::binary_fingerprint[16] = {0xBE,0x3A,0x22,0xB3,0x51,0xB8,0x33,0xB7,0xBB,0x1F,0x7D,0x41,0x67,0x46,0x03,0x73};

uint32_t UserCouponsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user_id = false;
  bool isset_page = false;
  bool isset_count = false;
  bool isset_use_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          isset_page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_status);
          isset_use_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_page)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_use_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserCouponsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserCouponsReq");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->use_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserCouponsReq &a, UserCouponsReq &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.page, b.page);
  swap(a.count, b.count);
  swap(a.use_status, b.use_status);
}

UserCouponsReq::UserCouponsReq(const UserCouponsReq& other50) {
  user_id = other50.user_id;
  page = other50.page;
  count = other50.count;
  use_status = other50.use_status;
}
UserCouponsReq& UserCouponsReq::operator=(const UserCouponsReq& other51) {
  user_id = other51.user_id;
  page = other51.page;
  count = other51.count;
  use_status = other51.use_status;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserCouponsReq& obj) {
  using apache::thrift::to_string;
  out << "UserCouponsReq(";
  out << "user_id=" << to_string(obj.user_id);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "use_status=" << to_string(obj.use_status);
  out << ")";
  return out;
}


UserCouponsRsp::~UserCouponsRsp() throw() {
}


void UserCouponsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UserCouponsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void UserCouponsRsp::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void UserCouponsRsp::__set_page(const int32_t val) {
  this->page = val;
}

void UserCouponsRsp::__set_count(const int32_t val) {
  this->count = val;
}

void UserCouponsRsp::__set_use_status(const int32_t val) {
  this->use_status = val;
}

void UserCouponsRsp::__set_total(const int32_t val) {
  this->total = val;
}

void UserCouponsRsp::__set_coupons(const std::vector< ::coupon::CacheCoupon> & val) {
  this->coupons = val;
}

const char* UserCouponsRsp::ascii_fingerprint = "9DB3061D07344E564DDFCAEB3F6C5519";
const uint8_t UserCouponsRsp::binary_fingerprint[16] = {0x9D,0xB3,0x06,0x1D,0x07,0x34,0x4E,0x56,0x4D,0xDF,0xCA,0xEB,0x3F,0x6C,0x55,0x19};

uint32_t UserCouponsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast52;
          xfer += iprot->readI32(ecast52);
          this->error = ( ::coupon::Error::type)ecast52;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_status);
          this->__isset.use_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->coupons.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->coupons.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += this->coupons[_i57].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.coupons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserCouponsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserCouponsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_status", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->use_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coupons", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->coupons.size()));
    std::vector< ::coupon::CacheCoupon> ::const_iterator _iter58;
    for (_iter58 = this->coupons.begin(); _iter58 != this->coupons.end(); ++_iter58)
    {
      xfer += (*_iter58).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserCouponsRsp &a, UserCouponsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.user_id, b.user_id);
  swap(a.page, b.page);
  swap(a.count, b.count);
  swap(a.use_status, b.use_status);
  swap(a.total, b.total);
  swap(a.coupons, b.coupons);
  swap(a.__isset, b.__isset);
}

UserCouponsRsp::UserCouponsRsp(const UserCouponsRsp& other59) {
  error = other59.error;
  errmsg = other59.errmsg;
  user_id = other59.user_id;
  page = other59.page;
  count = other59.count;
  use_status = other59.use_status;
  total = other59.total;
  coupons = other59.coupons;
  __isset = other59.__isset;
}
UserCouponsRsp& UserCouponsRsp::operator=(const UserCouponsRsp& other60) {
  error = other60.error;
  errmsg = other60.errmsg;
  user_id = other60.user_id;
  page = other60.page;
  count = other60.count;
  use_status = other60.use_status;
  total = other60.total;
  coupons = other60.coupons;
  __isset = other60.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserCouponsRsp& obj) {
  using apache::thrift::to_string;
  out << "UserCouponsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "use_status=" << to_string(obj.use_status);
  out << ", " << "total=" << to_string(obj.total);
  out << ", " << "coupons=" << to_string(obj.coupons);
  out << ")";
  return out;
}


WareActsReq::~WareActsReq() throw() {
}


void WareActsReq::__set_ware_ids(const std::set<int64_t> & val) {
  this->ware_ids = val;
}

const char* WareActsReq::ascii_fingerprint = "22BB20BCAA6BDE84822CC8FA96113C29";
const uint8_t WareActsReq::binary_fingerprint[16] = {0x22,0xBB,0x20,0xBC,0xAA,0x6B,0xDE,0x84,0x82,0x2C,0xC8,0xFA,0x96,0x11,0x3C,0x29};

uint32_t WareActsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->ware_ids.clear();
            uint32_t _size61;
            ::apache::thrift::protocol::TType _etype64;
            xfer += iprot->readSetBegin(_etype64, _size61);
            uint32_t _i65;
            for (_i65 = 0; _i65 < _size61; ++_i65)
            {
              int64_t _elem66;
              xfer += iprot->readI64(_elem66);
              this->ware_ids.insert(_elem66);
            }
            xfer += iprot->readSetEnd();
          }
          isset_ware_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WareActsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareActsReq");

  xfer += oprot->writeFieldBegin("ware_ids", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ware_ids.size()));
    std::set<int64_t> ::const_iterator _iter67;
    for (_iter67 = this->ware_ids.begin(); _iter67 != this->ware_ids.end(); ++_iter67)
    {
      xfer += oprot->writeI64((*_iter67));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareActsReq &a, WareActsReq &b) {
  using ::std::swap;
  swap(a.ware_ids, b.ware_ids);
}

WareActsReq::WareActsReq(const WareActsReq& other68) {
  ware_ids = other68.ware_ids;
}
WareActsReq& WareActsReq::operator=(const WareActsReq& other69) {
  ware_ids = other69.ware_ids;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareActsReq& obj) {
  using apache::thrift::to_string;
  out << "WareActsReq(";
  out << "ware_ids=" << to_string(obj.ware_ids);
  out << ")";
  return out;
}


WareActsRsp::~WareActsRsp() throw() {
}


void WareActsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void WareActsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareActsRsp::__set_wareActs(const std::map<int64_t, std::vector< ::coupon::CouponGroup> > & val) {
  this->wareActs = val;
}

const char* WareActsRsp::ascii_fingerprint = "DCEE89519ACDB279F88C98641322A2FC";
const uint8_t WareActsRsp::binary_fingerprint[16] = {0xDC,0xEE,0x89,0x51,0x9A,0xCD,0xB2,0x79,0xF8,0x8C,0x98,0x64,0x13,0x22,0xA2,0xFC};

uint32_t WareActsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast70;
          xfer += iprot->readI32(ecast70);
          this->error = ( ::coupon::Error::type)ecast70;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->wareActs.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _ktype72;
            ::apache::thrift::protocol::TType _vtype73;
            xfer += iprot->readMapBegin(_ktype72, _vtype73, _size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              int64_t _key76;
              xfer += iprot->readI64(_key76);
              std::vector< ::coupon::CouponGroup> & _val77 = this->wareActs[_key76];
              {
                _val77.clear();
                uint32_t _size78;
                ::apache::thrift::protocol::TType _etype81;
                xfer += iprot->readListBegin(_etype81, _size78);
                _val77.resize(_size78);
                uint32_t _i82;
                for (_i82 = 0; _i82 < _size78; ++_i82)
                {
                  xfer += _val77[_i82].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.wareActs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareActsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareActsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareActs", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->wareActs.size()));
    std::map<int64_t, std::vector< ::coupon::CouponGroup> > ::const_iterator _iter83;
    for (_iter83 = this->wareActs.begin(); _iter83 != this->wareActs.end(); ++_iter83)
    {
      xfer += oprot->writeI64(_iter83->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter83->second.size()));
        std::vector< ::coupon::CouponGroup> ::const_iterator _iter84;
        for (_iter84 = _iter83->second.begin(); _iter84 != _iter83->second.end(); ++_iter84)
        {
          xfer += (*_iter84).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareActsRsp &a, WareActsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareActs, b.wareActs);
  swap(a.__isset, b.__isset);
}

WareActsRsp::WareActsRsp(const WareActsRsp& other85) {
  error = other85.error;
  errmsg = other85.errmsg;
  wareActs = other85.wareActs;
  __isset = other85.__isset;
}
WareActsRsp& WareActsRsp::operator=(const WareActsRsp& other86) {
  error = other86.error;
  errmsg = other86.errmsg;
  wareActs = other86.wareActs;
  __isset = other86.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareActsRsp& obj) {
  using apache::thrift::to_string;
  out << "WareActsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareActs=" << to_string(obj.wareActs);
  out << ")";
  return out;
}


PriceInfo::~PriceInfo() throw() {
}


void PriceInfo::__set_market_price(const double val) {
  this->market_price = val;
}

void PriceInfo::__set_sale_price(const double val) {
  this->sale_price = val;
}

void PriceInfo::__set_pay_price(const double val) {
  this->pay_price = val;
}

void PriceInfo::__set_favor_price(const double val) {
  this->favor_price = val;
}

const char* PriceInfo::ascii_fingerprint = "D40B774F31F5CC6330E604960421B6CB";
const uint8_t PriceInfo::binary_fingerprint[16] = {0xD4,0x0B,0x77,0x4F,0x31,0xF5,0xCC,0x63,0x30,0xE6,0x04,0x96,0x04,0x21,0xB6,0xCB};

uint32_t PriceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->market_price);
          this->__isset.market_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sale_price);
          this->__isset.sale_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pay_price);
          this->__isset.pay_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->favor_price);
          this->__isset.favor_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PriceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PriceInfo");

  xfer += oprot->writeFieldBegin("market_price", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->market_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sale_price", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->sale_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_price", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pay_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favor_price", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->favor_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PriceInfo &a, PriceInfo &b) {
  using ::std::swap;
  swap(a.market_price, b.market_price);
  swap(a.sale_price, b.sale_price);
  swap(a.pay_price, b.pay_price);
  swap(a.favor_price, b.favor_price);
  swap(a.__isset, b.__isset);
}

PriceInfo::PriceInfo(const PriceInfo& other87) {
  market_price = other87.market_price;
  sale_price = other87.sale_price;
  pay_price = other87.pay_price;
  favor_price = other87.favor_price;
  __isset = other87.__isset;
}
PriceInfo& PriceInfo::operator=(const PriceInfo& other88) {
  market_price = other88.market_price;
  sale_price = other88.sale_price;
  pay_price = other88.pay_price;
  favor_price = other88.favor_price;
  __isset = other88.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PriceInfo& obj) {
  using apache::thrift::to_string;
  out << "PriceInfo(";
  out << "market_price=" << to_string(obj.market_price);
  out << ", " << "sale_price=" << to_string(obj.sale_price);
  out << ", " << "pay_price=" << to_string(obj.pay_price);
  out << ", " << "favor_price=" << to_string(obj.favor_price);
  out << ")";
  return out;
}


SkuInfo::~SkuInfo() throw() {
}


void SkuInfo::__set_sku_id(const int64_t val) {
  this->sku_id = val;
}

void SkuInfo::__set_sku_count(const int32_t val) {
  this->sku_count = val;
}

void SkuInfo::__set_sale_price(const double val) {
  this->sale_price = val;
}

void SkuInfo::__set_market_price(const double val) {
  this->market_price = val;
}

void SkuInfo::__set_ware_id(const int64_t val) {
  this->ware_id = val;
}

const char* SkuInfo::ascii_fingerprint = "EF090800999F7A099EF36D3B00699394";
const uint8_t SkuInfo::binary_fingerprint[16] = {0xEF,0x09,0x08,0x00,0x99,0x9F,0x7A,0x09,0x9E,0xF3,0x6D,0x3B,0x00,0x69,0x93,0x94};

uint32_t SkuInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sku_id);
          this->__isset.sku_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sku_count);
          this->__isset.sku_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sale_price);
          this->__isset.sale_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->market_price);
          this->__isset.market_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ware_id);
          this->__isset.ware_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SkuInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SkuInfo");

  xfer += oprot->writeFieldBegin("sku_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sku_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sku_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sku_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sale_price", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->sale_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("market_price", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->market_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ware_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->ware_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SkuInfo &a, SkuInfo &b) {
  using ::std::swap;
  swap(a.sku_id, b.sku_id);
  swap(a.sku_count, b.sku_count);
  swap(a.sale_price, b.sale_price);
  swap(a.market_price, b.market_price);
  swap(a.ware_id, b.ware_id);
  swap(a.__isset, b.__isset);
}

SkuInfo::SkuInfo(const SkuInfo& other89) {
  sku_id = other89.sku_id;
  sku_count = other89.sku_count;
  sale_price = other89.sale_price;
  market_price = other89.market_price;
  ware_id = other89.ware_id;
  __isset = other89.__isset;
}
SkuInfo& SkuInfo::operator=(const SkuInfo& other90) {
  sku_id = other90.sku_id;
  sku_count = other90.sku_count;
  sale_price = other90.sale_price;
  market_price = other90.market_price;
  ware_id = other90.ware_id;
  __isset = other90.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SkuInfo& obj) {
  using apache::thrift::to_string;
  out << "SkuInfo(";
  out << "sku_id=" << to_string(obj.sku_id);
  out << ", " << "sku_count=" << to_string(obj.sku_count);
  out << ", " << "sale_price=" << to_string(obj.sale_price);
  out << ", " << "market_price=" << to_string(obj.market_price);
  out << ", " << "ware_id=" << to_string(obj.ware_id);
  out << ")";
  return out;
}


SellerInfo::~SellerInfo() throw() {
}


void SellerInfo::__set_seller_id(const int64_t val) {
  this->seller_id = val;
}

void SellerInfo::__set_skus(const std::map<int64_t, SkuInfo> & val) {
  this->skus = val;
}

const char* SellerInfo::ascii_fingerprint = "5B880AF6F0B4A5A647848B922344014F";
const uint8_t SellerInfo::binary_fingerprint[16] = {0x5B,0x88,0x0A,0xF6,0xF0,0xB4,0xA5,0xA6,0x47,0x84,0x8B,0x92,0x23,0x44,0x01,0x4F};

uint32_t SellerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seller_id);
          this->__isset.seller_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skus.clear();
            uint32_t _size91;
            ::apache::thrift::protocol::TType _ktype92;
            ::apache::thrift::protocol::TType _vtype93;
            xfer += iprot->readMapBegin(_ktype92, _vtype93, _size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              int64_t _key96;
              xfer += iprot->readI64(_key96);
              SkuInfo& _val97 = this->skus[_key96];
              xfer += _val97.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SellerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SellerInfo");

  xfer += oprot->writeFieldBegin("seller_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seller_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skus", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->skus.size()));
    std::map<int64_t, SkuInfo> ::const_iterator _iter98;
    for (_iter98 = this->skus.begin(); _iter98 != this->skus.end(); ++_iter98)
    {
      xfer += oprot->writeI64(_iter98->first);
      xfer += _iter98->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SellerInfo &a, SellerInfo &b) {
  using ::std::swap;
  swap(a.seller_id, b.seller_id);
  swap(a.skus, b.skus);
  swap(a.__isset, b.__isset);
}

SellerInfo::SellerInfo(const SellerInfo& other99) {
  seller_id = other99.seller_id;
  skus = other99.skus;
  __isset = other99.__isset;
}
SellerInfo& SellerInfo::operator=(const SellerInfo& other100) {
  seller_id = other100.seller_id;
  skus = other100.skus;
  __isset = other100.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SellerInfo& obj) {
  using apache::thrift::to_string;
  out << "SellerInfo(";
  out << "seller_id=" << to_string(obj.seller_id);
  out << ", " << "skus=" << to_string(obj.skus);
  out << ")";
  return out;
}


UsableCouponsReq::~UsableCouponsReq() throw() {
}


void UsableCouponsReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void UsableCouponsReq::__set_sellers(const std::map<int64_t, SellerInfo> & val) {
  this->sellers = val;
}

const char* UsableCouponsReq::ascii_fingerprint = "A8D75C94947C1488AF2C900910B436D7";
const uint8_t UsableCouponsReq::binary_fingerprint[16] = {0xA8,0xD7,0x5C,0x94,0x94,0x7C,0x14,0x88,0xAF,0x2C,0x90,0x09,0x10,0xB4,0x36,0xD7};

uint32_t UsableCouponsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user_id = false;
  bool isset_sellers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellers.clear();
            uint32_t _size101;
            ::apache::thrift::protocol::TType _ktype102;
            ::apache::thrift::protocol::TType _vtype103;
            xfer += iprot->readMapBegin(_ktype102, _vtype103, _size101);
            uint32_t _i105;
            for (_i105 = 0; _i105 < _size101; ++_i105)
            {
              int64_t _key106;
              xfer += iprot->readI64(_key106);
              SellerInfo& _val107 = this->sellers[_key106];
              xfer += _val107.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_sellers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sellers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UsableCouponsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UsableCouponsReq");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellers", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sellers.size()));
    std::map<int64_t, SellerInfo> ::const_iterator _iter108;
    for (_iter108 = this->sellers.begin(); _iter108 != this->sellers.end(); ++_iter108)
    {
      xfer += oprot->writeI64(_iter108->first);
      xfer += _iter108->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UsableCouponsReq &a, UsableCouponsReq &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.sellers, b.sellers);
}

UsableCouponsReq::UsableCouponsReq(const UsableCouponsReq& other109) {
  user_id = other109.user_id;
  sellers = other109.sellers;
}
UsableCouponsReq& UsableCouponsReq::operator=(const UsableCouponsReq& other110) {
  user_id = other110.user_id;
  sellers = other110.sellers;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UsableCouponsReq& obj) {
  using apache::thrift::to_string;
  out << "UsableCouponsReq(";
  out << "user_id=" << to_string(obj.user_id);
  out << ", " << "sellers=" << to_string(obj.sellers);
  out << ")";
  return out;
}


UsableCouponsRsp::~UsableCouponsRsp() throw() {
}


void UsableCouponsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void UsableCouponsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void UsableCouponsRsp::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void UsableCouponsRsp::__set_sellers(const std::map<int64_t, SellerInfo> & val) {
  this->sellers = val;
}

void UsableCouponsRsp::__set_platUsableCoupons(const std::vector< ::coupon::CacheCoupon> & val) {
  this->platUsableCoupons = val;
}

void UsableCouponsRsp::__set_sellerUsableCoupons(const std::map<int64_t, std::vector< ::coupon::CacheCoupon> > & val) {
  this->sellerUsableCoupons = val;
}

void UsableCouponsRsp::__set_code_cacheCoupon_map(const std::map<std::string,  ::coupon::CacheCoupon> & val) {
  this->code_cacheCoupon_map = val;
}

void UsableCouponsRsp::__set_orderPrice(const PriceInfo& val) {
  this->orderPrice = val;
}

void UsableCouponsRsp::__set_sellerId_priceInfo_map(const std::map<int64_t, PriceInfo> & val) {
  this->sellerId_priceInfo_map = val;
}

void UsableCouponsRsp::__set_sellerId_skuId_priceInfo_map(const std::map<int64_t, std::map<int64_t, PriceInfo> > & val) {
  this->sellerId_skuId_priceInfo_map = val;
}

void UsableCouponsRsp::__set_platCode_totalSalePrice_map(const std::map<std::string, double> & val) {
  this->platCode_totalSalePrice_map = val;
}

void UsableCouponsRsp::__set_sellerId_code_totalSalePrice_map(const std::map<int64_t, std::map<std::string, double> > & val) {
  this->sellerId_code_totalSalePrice_map = val;
}

void UsableCouponsRsp::__set_sellerId_skuId_code_totalSalePrice_map(const std::map<int64_t, std::map<int64_t, std::map<std::string, double> > > & val) {
  this->sellerId_skuId_code_totalSalePrice_map = val;
}

void UsableCouponsRsp::__set_platCode_wareSet_map(const std::map<std::string, std::set<int64_t> > & val) {
  this->platCode_wareSet_map = val;
}

void UsableCouponsRsp::__set_sellerId_code_wareSet_map(const std::map<int64_t, std::map<std::string, std::set<int64_t> > > & val) {
  this->sellerId_code_wareSet_map = val;
}

void UsableCouponsRsp::__set_sellerId_wareId_code_map(const std::map<int64_t, std::map<int64_t, std::map<std::string, bool> > > & val) {
  this->sellerId_wareId_code_map = val;
}

void UsableCouponsRsp::__set_skuID_wareID_map(const std::map<int64_t, int64_t> & val) {
  this->skuID_wareID_map = val;
}

void UsableCouponsRsp::__set_usableCodes(const std::vector<std::string> & val) {
  this->usableCodes = val;
}

const char* UsableCouponsRsp::ascii_fingerprint = "97FA4DB7A8AB5CF282B52ACB2E707772";
const uint8_t UsableCouponsRsp::binary_fingerprint[16] = {0x97,0xFA,0x4D,0xB7,0xA8,0xAB,0x5C,0xF2,0x82,0xB5,0x2A,0xCB,0x2E,0x70,0x77,0x72};

uint32_t UsableCouponsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast111;
          xfer += iprot->readI32(ecast111);
          this->error = ( ::coupon::Error::type)ecast111;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellers.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _ktype113;
            ::apache::thrift::protocol::TType _vtype114;
            xfer += iprot->readMapBegin(_ktype113, _vtype114, _size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              int64_t _key117;
              xfer += iprot->readI64(_key117);
              SellerInfo& _val118 = this->sellers[_key117];
              xfer += _val118.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->platUsableCoupons.clear();
            uint32_t _size119;
            ::apache::thrift::protocol::TType _etype122;
            xfer += iprot->readListBegin(_etype122, _size119);
            this->platUsableCoupons.resize(_size119);
            uint32_t _i123;
            for (_i123 = 0; _i123 < _size119; ++_i123)
            {
              xfer += this->platUsableCoupons[_i123].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.platUsableCoupons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerUsableCoupons.clear();
            uint32_t _size124;
            ::apache::thrift::protocol::TType _ktype125;
            ::apache::thrift::protocol::TType _vtype126;
            xfer += iprot->readMapBegin(_ktype125, _vtype126, _size124);
            uint32_t _i128;
            for (_i128 = 0; _i128 < _size124; ++_i128)
            {
              int64_t _key129;
              xfer += iprot->readI64(_key129);
              std::vector< ::coupon::CacheCoupon> & _val130 = this->sellerUsableCoupons[_key129];
              {
                _val130.clear();
                uint32_t _size131;
                ::apache::thrift::protocol::TType _etype134;
                xfer += iprot->readListBegin(_etype134, _size131);
                _val130.resize(_size131);
                uint32_t _i135;
                for (_i135 = 0; _i135 < _size131; ++_i135)
                {
                  xfer += _val130[_i135].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerUsableCoupons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->code_cacheCoupon_map.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _ktype137;
            ::apache::thrift::protocol::TType _vtype138;
            xfer += iprot->readMapBegin(_ktype137, _vtype138, _size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              std::string _key141;
              xfer += iprot->readString(_key141);
               ::coupon::CacheCoupon& _val142 = this->code_cacheCoupon_map[_key141];
              xfer += _val142.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.code_cacheCoupon_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->orderPrice.read(iprot);
          this->__isset.orderPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_priceInfo_map.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _ktype144;
            ::apache::thrift::protocol::TType _vtype145;
            xfer += iprot->readMapBegin(_ktype144, _vtype145, _size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              int64_t _key148;
              xfer += iprot->readI64(_key148);
              PriceInfo& _val149 = this->sellerId_priceInfo_map[_key148];
              xfer += _val149.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_priceInfo_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_skuId_priceInfo_map.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _ktype151;
            ::apache::thrift::protocol::TType _vtype152;
            xfer += iprot->readMapBegin(_ktype151, _vtype152, _size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              int64_t _key155;
              xfer += iprot->readI64(_key155);
              std::map<int64_t, PriceInfo> & _val156 = this->sellerId_skuId_priceInfo_map[_key155];
              {
                _val156.clear();
                uint32_t _size157;
                ::apache::thrift::protocol::TType _ktype158;
                ::apache::thrift::protocol::TType _vtype159;
                xfer += iprot->readMapBegin(_ktype158, _vtype159, _size157);
                uint32_t _i161;
                for (_i161 = 0; _i161 < _size157; ++_i161)
                {
                  int64_t _key162;
                  xfer += iprot->readI64(_key162);
                  PriceInfo& _val163 = _val156[_key162];
                  xfer += _val163.read(iprot);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_skuId_priceInfo_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->platCode_totalSalePrice_map.clear();
            uint32_t _size164;
            ::apache::thrift::protocol::TType _ktype165;
            ::apache::thrift::protocol::TType _vtype166;
            xfer += iprot->readMapBegin(_ktype165, _vtype166, _size164);
            uint32_t _i168;
            for (_i168 = 0; _i168 < _size164; ++_i168)
            {
              std::string _key169;
              xfer += iprot->readString(_key169);
              double& _val170 = this->platCode_totalSalePrice_map[_key169];
              xfer += iprot->readDouble(_val170);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.platCode_totalSalePrice_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_code_totalSalePrice_map.clear();
            uint32_t _size171;
            ::apache::thrift::protocol::TType _ktype172;
            ::apache::thrift::protocol::TType _vtype173;
            xfer += iprot->readMapBegin(_ktype172, _vtype173, _size171);
            uint32_t _i175;
            for (_i175 = 0; _i175 < _size171; ++_i175)
            {
              int64_t _key176;
              xfer += iprot->readI64(_key176);
              std::map<std::string, double> & _val177 = this->sellerId_code_totalSalePrice_map[_key176];
              {
                _val177.clear();
                uint32_t _size178;
                ::apache::thrift::protocol::TType _ktype179;
                ::apache::thrift::protocol::TType _vtype180;
                xfer += iprot->readMapBegin(_ktype179, _vtype180, _size178);
                uint32_t _i182;
                for (_i182 = 0; _i182 < _size178; ++_i182)
                {
                  std::string _key183;
                  xfer += iprot->readString(_key183);
                  double& _val184 = _val177[_key183];
                  xfer += iprot->readDouble(_val184);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_code_totalSalePrice_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_skuId_code_totalSalePrice_map.clear();
            uint32_t _size185;
            ::apache::thrift::protocol::TType _ktype186;
            ::apache::thrift::protocol::TType _vtype187;
            xfer += iprot->readMapBegin(_ktype186, _vtype187, _size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              int64_t _key190;
              xfer += iprot->readI64(_key190);
              std::map<int64_t, std::map<std::string, double> > & _val191 = this->sellerId_skuId_code_totalSalePrice_map[_key190];
              {
                _val191.clear();
                uint32_t _size192;
                ::apache::thrift::protocol::TType _ktype193;
                ::apache::thrift::protocol::TType _vtype194;
                xfer += iprot->readMapBegin(_ktype193, _vtype194, _size192);
                uint32_t _i196;
                for (_i196 = 0; _i196 < _size192; ++_i196)
                {
                  int64_t _key197;
                  xfer += iprot->readI64(_key197);
                  std::map<std::string, double> & _val198 = _val191[_key197];
                  {
                    _val198.clear();
                    uint32_t _size199;
                    ::apache::thrift::protocol::TType _ktype200;
                    ::apache::thrift::protocol::TType _vtype201;
                    xfer += iprot->readMapBegin(_ktype200, _vtype201, _size199);
                    uint32_t _i203;
                    for (_i203 = 0; _i203 < _size199; ++_i203)
                    {
                      std::string _key204;
                      xfer += iprot->readString(_key204);
                      double& _val205 = _val198[_key204];
                      xfer += iprot->readDouble(_val205);
                    }
                    xfer += iprot->readMapEnd();
                  }
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_skuId_code_totalSalePrice_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->platCode_wareSet_map.clear();
            uint32_t _size206;
            ::apache::thrift::protocol::TType _ktype207;
            ::apache::thrift::protocol::TType _vtype208;
            xfer += iprot->readMapBegin(_ktype207, _vtype208, _size206);
            uint32_t _i210;
            for (_i210 = 0; _i210 < _size206; ++_i210)
            {
              std::string _key211;
              xfer += iprot->readString(_key211);
              std::set<int64_t> & _val212 = this->platCode_wareSet_map[_key211];
              {
                _val212.clear();
                uint32_t _size213;
                ::apache::thrift::protocol::TType _etype216;
                xfer += iprot->readSetBegin(_etype216, _size213);
                uint32_t _i217;
                for (_i217 = 0; _i217 < _size213; ++_i217)
                {
                  int64_t _elem218;
                  xfer += iprot->readI64(_elem218);
                  _val212.insert(_elem218);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.platCode_wareSet_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_code_wareSet_map.clear();
            uint32_t _size219;
            ::apache::thrift::protocol::TType _ktype220;
            ::apache::thrift::protocol::TType _vtype221;
            xfer += iprot->readMapBegin(_ktype220, _vtype221, _size219);
            uint32_t _i223;
            for (_i223 = 0; _i223 < _size219; ++_i223)
            {
              int64_t _key224;
              xfer += iprot->readI64(_key224);
              std::map<std::string, std::set<int64_t> > & _val225 = this->sellerId_code_wareSet_map[_key224];
              {
                _val225.clear();
                uint32_t _size226;
                ::apache::thrift::protocol::TType _ktype227;
                ::apache::thrift::protocol::TType _vtype228;
                xfer += iprot->readMapBegin(_ktype227, _vtype228, _size226);
                uint32_t _i230;
                for (_i230 = 0; _i230 < _size226; ++_i230)
                {
                  std::string _key231;
                  xfer += iprot->readString(_key231);
                  std::set<int64_t> & _val232 = _val225[_key231];
                  {
                    _val232.clear();
                    uint32_t _size233;
                    ::apache::thrift::protocol::TType _etype236;
                    xfer += iprot->readSetBegin(_etype236, _size233);
                    uint32_t _i237;
                    for (_i237 = 0; _i237 < _size233; ++_i237)
                    {
                      int64_t _elem238;
                      xfer += iprot->readI64(_elem238);
                      _val232.insert(_elem238);
                    }
                    xfer += iprot->readSetEnd();
                  }
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_code_wareSet_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_wareId_code_map.clear();
            uint32_t _size239;
            ::apache::thrift::protocol::TType _ktype240;
            ::apache::thrift::protocol::TType _vtype241;
            xfer += iprot->readMapBegin(_ktype240, _vtype241, _size239);
            uint32_t _i243;
            for (_i243 = 0; _i243 < _size239; ++_i243)
            {
              int64_t _key244;
              xfer += iprot->readI64(_key244);
              std::map<int64_t, std::map<std::string, bool> > & _val245 = this->sellerId_wareId_code_map[_key244];
              {
                _val245.clear();
                uint32_t _size246;
                ::apache::thrift::protocol::TType _ktype247;
                ::apache::thrift::protocol::TType _vtype248;
                xfer += iprot->readMapBegin(_ktype247, _vtype248, _size246);
                uint32_t _i250;
                for (_i250 = 0; _i250 < _size246; ++_i250)
                {
                  int64_t _key251;
                  xfer += iprot->readI64(_key251);
                  std::map<std::string, bool> & _val252 = _val245[_key251];
                  {
                    _val252.clear();
                    uint32_t _size253;
                    ::apache::thrift::protocol::TType _ktype254;
                    ::apache::thrift::protocol::TType _vtype255;
                    xfer += iprot->readMapBegin(_ktype254, _vtype255, _size253);
                    uint32_t _i257;
                    for (_i257 = 0; _i257 < _size253; ++_i257)
                    {
                      std::string _key258;
                      xfer += iprot->readString(_key258);
                      bool& _val259 = _val252[_key258];
                      xfer += iprot->readBool(_val259);
                    }
                    xfer += iprot->readMapEnd();
                  }
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_wareId_code_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skuID_wareID_map.clear();
            uint32_t _size260;
            ::apache::thrift::protocol::TType _ktype261;
            ::apache::thrift::protocol::TType _vtype262;
            xfer += iprot->readMapBegin(_ktype261, _vtype262, _size260);
            uint32_t _i264;
            for (_i264 = 0; _i264 < _size260; ++_i264)
            {
              int64_t _key265;
              xfer += iprot->readI64(_key265);
              int64_t& _val266 = this->skuID_wareID_map[_key265];
              xfer += iprot->readI64(_val266);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skuID_wareID_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->usableCodes.clear();
            uint32_t _size267;
            ::apache::thrift::protocol::TType _etype270;
            xfer += iprot->readListBegin(_etype270, _size267);
            this->usableCodes.resize(_size267);
            uint32_t _i271;
            for (_i271 = 0; _i271 < _size267; ++_i271)
            {
              xfer += iprot->readString(this->usableCodes[_i271]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.usableCodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsableCouponsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UsableCouponsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellers", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sellers.size()));
    std::map<int64_t, SellerInfo> ::const_iterator _iter272;
    for (_iter272 = this->sellers.begin(); _iter272 != this->sellers.end(); ++_iter272)
    {
      xfer += oprot->writeI64(_iter272->first);
      xfer += _iter272->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platUsableCoupons", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->platUsableCoupons.size()));
    std::vector< ::coupon::CacheCoupon> ::const_iterator _iter273;
    for (_iter273 = this->platUsableCoupons.begin(); _iter273 != this->platUsableCoupons.end(); ++_iter273)
    {
      xfer += (*_iter273).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerUsableCoupons", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->sellerUsableCoupons.size()));
    std::map<int64_t, std::vector< ::coupon::CacheCoupon> > ::const_iterator _iter274;
    for (_iter274 = this->sellerUsableCoupons.begin(); _iter274 != this->sellerUsableCoupons.end(); ++_iter274)
    {
      xfer += oprot->writeI64(_iter274->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter274->second.size()));
        std::vector< ::coupon::CacheCoupon> ::const_iterator _iter275;
        for (_iter275 = _iter274->second.begin(); _iter275 != _iter274->second.end(); ++_iter275)
        {
          xfer += (*_iter275).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code_cacheCoupon_map", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->code_cacheCoupon_map.size()));
    std::map<std::string,  ::coupon::CacheCoupon> ::const_iterator _iter276;
    for (_iter276 = this->code_cacheCoupon_map.begin(); _iter276 != this->code_cacheCoupon_map.end(); ++_iter276)
    {
      xfer += oprot->writeString(_iter276->first);
      xfer += _iter276->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderPrice", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->orderPrice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_priceInfo_map", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sellerId_priceInfo_map.size()));
    std::map<int64_t, PriceInfo> ::const_iterator _iter277;
    for (_iter277 = this->sellerId_priceInfo_map.begin(); _iter277 != this->sellerId_priceInfo_map.end(); ++_iter277)
    {
      xfer += oprot->writeI64(_iter277->first);
      xfer += _iter277->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_skuId_priceInfo_map", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->sellerId_skuId_priceInfo_map.size()));
    std::map<int64_t, std::map<int64_t, PriceInfo> > ::const_iterator _iter278;
    for (_iter278 = this->sellerId_skuId_priceInfo_map.begin(); _iter278 != this->sellerId_skuId_priceInfo_map.end(); ++_iter278)
    {
      xfer += oprot->writeI64(_iter278->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter278->second.size()));
        std::map<int64_t, PriceInfo> ::const_iterator _iter279;
        for (_iter279 = _iter278->second.begin(); _iter279 != _iter278->second.end(); ++_iter279)
        {
          xfer += oprot->writeI64(_iter279->first);
          xfer += _iter279->second.write(oprot);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platCode_totalSalePrice_map", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->platCode_totalSalePrice_map.size()));
    std::map<std::string, double> ::const_iterator _iter280;
    for (_iter280 = this->platCode_totalSalePrice_map.begin(); _iter280 != this->platCode_totalSalePrice_map.end(); ++_iter280)
    {
      xfer += oprot->writeString(_iter280->first);
      xfer += oprot->writeDouble(_iter280->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_code_totalSalePrice_map", ::apache::thrift::protocol::T_MAP, 12);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->sellerId_code_totalSalePrice_map.size()));
    std::map<int64_t, std::map<std::string, double> > ::const_iterator _iter281;
    for (_iter281 = this->sellerId_code_totalSalePrice_map.begin(); _iter281 != this->sellerId_code_totalSalePrice_map.end(); ++_iter281)
    {
      xfer += oprot->writeI64(_iter281->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter281->second.size()));
        std::map<std::string, double> ::const_iterator _iter282;
        for (_iter282 = _iter281->second.begin(); _iter282 != _iter281->second.end(); ++_iter282)
        {
          xfer += oprot->writeString(_iter282->first);
          xfer += oprot->writeDouble(_iter282->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_skuId_code_totalSalePrice_map", ::apache::thrift::protocol::T_MAP, 13);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->sellerId_skuId_code_totalSalePrice_map.size()));
    std::map<int64_t, std::map<int64_t, std::map<std::string, double> > > ::const_iterator _iter283;
    for (_iter283 = this->sellerId_skuId_code_totalSalePrice_map.begin(); _iter283 != this->sellerId_skuId_code_totalSalePrice_map.end(); ++_iter283)
    {
      xfer += oprot->writeI64(_iter283->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(_iter283->second.size()));
        std::map<int64_t, std::map<std::string, double> > ::const_iterator _iter284;
        for (_iter284 = _iter283->second.begin(); _iter284 != _iter283->second.end(); ++_iter284)
        {
          xfer += oprot->writeI64(_iter284->first);
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter284->second.size()));
            std::map<std::string, double> ::const_iterator _iter285;
            for (_iter285 = _iter284->second.begin(); _iter285 != _iter284->second.end(); ++_iter285)
            {
              xfer += oprot->writeString(_iter285->first);
              xfer += oprot->writeDouble(_iter285->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platCode_wareSet_map", ::apache::thrift::protocol::T_MAP, 14);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->platCode_wareSet_map.size()));
    std::map<std::string, std::set<int64_t> > ::const_iterator _iter286;
    for (_iter286 = this->platCode_wareSet_map.begin(); _iter286 != this->platCode_wareSet_map.end(); ++_iter286)
    {
      xfer += oprot->writeString(_iter286->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(_iter286->second.size()));
        std::set<int64_t> ::const_iterator _iter287;
        for (_iter287 = _iter286->second.begin(); _iter287 != _iter286->second.end(); ++_iter287)
        {
          xfer += oprot->writeI64((*_iter287));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_code_wareSet_map", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->sellerId_code_wareSet_map.size()));
    std::map<int64_t, std::map<std::string, std::set<int64_t> > > ::const_iterator _iter288;
    for (_iter288 = this->sellerId_code_wareSet_map.begin(); _iter288 != this->sellerId_code_wareSet_map.end(); ++_iter288)
    {
      xfer += oprot->writeI64(_iter288->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(_iter288->second.size()));
        std::map<std::string, std::set<int64_t> > ::const_iterator _iter289;
        for (_iter289 = _iter288->second.begin(); _iter289 != _iter288->second.end(); ++_iter289)
        {
          xfer += oprot->writeString(_iter289->first);
          {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(_iter289->second.size()));
            std::set<int64_t> ::const_iterator _iter290;
            for (_iter290 = _iter289->second.begin(); _iter290 != _iter289->second.end(); ++_iter290)
            {
              xfer += oprot->writeI64((*_iter290));
            }
            xfer += oprot->writeSetEnd();
          }
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_wareId_code_map", ::apache::thrift::protocol::T_MAP, 16);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->sellerId_wareId_code_map.size()));
    std::map<int64_t, std::map<int64_t, std::map<std::string, bool> > > ::const_iterator _iter291;
    for (_iter291 = this->sellerId_wareId_code_map.begin(); _iter291 != this->sellerId_wareId_code_map.end(); ++_iter291)
    {
      xfer += oprot->writeI64(_iter291->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(_iter291->second.size()));
        std::map<int64_t, std::map<std::string, bool> > ::const_iterator _iter292;
        for (_iter292 = _iter291->second.begin(); _iter292 != _iter291->second.end(); ++_iter292)
        {
          xfer += oprot->writeI64(_iter292->first);
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(_iter292->second.size()));
            std::map<std::string, bool> ::const_iterator _iter293;
            for (_iter293 = _iter292->second.begin(); _iter293 != _iter292->second.end(); ++_iter293)
            {
              xfer += oprot->writeString(_iter293->first);
              xfer += oprot->writeBool(_iter293->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skuID_wareID_map", ::apache::thrift::protocol::T_MAP, 17);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->skuID_wareID_map.size()));
    std::map<int64_t, int64_t> ::const_iterator _iter294;
    for (_iter294 = this->skuID_wareID_map.begin(); _iter294 != this->skuID_wareID_map.end(); ++_iter294)
    {
      xfer += oprot->writeI64(_iter294->first);
      xfer += oprot->writeI64(_iter294->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usableCodes", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->usableCodes.size()));
    std::vector<std::string> ::const_iterator _iter295;
    for (_iter295 = this->usableCodes.begin(); _iter295 != this->usableCodes.end(); ++_iter295)
    {
      xfer += oprot->writeString((*_iter295));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UsableCouponsRsp &a, UsableCouponsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.user_id, b.user_id);
  swap(a.sellers, b.sellers);
  swap(a.platUsableCoupons, b.platUsableCoupons);
  swap(a.sellerUsableCoupons, b.sellerUsableCoupons);
  swap(a.code_cacheCoupon_map, b.code_cacheCoupon_map);
  swap(a.orderPrice, b.orderPrice);
  swap(a.sellerId_priceInfo_map, b.sellerId_priceInfo_map);
  swap(a.sellerId_skuId_priceInfo_map, b.sellerId_skuId_priceInfo_map);
  swap(a.platCode_totalSalePrice_map, b.platCode_totalSalePrice_map);
  swap(a.sellerId_code_totalSalePrice_map, b.sellerId_code_totalSalePrice_map);
  swap(a.sellerId_skuId_code_totalSalePrice_map, b.sellerId_skuId_code_totalSalePrice_map);
  swap(a.platCode_wareSet_map, b.platCode_wareSet_map);
  swap(a.sellerId_code_wareSet_map, b.sellerId_code_wareSet_map);
  swap(a.sellerId_wareId_code_map, b.sellerId_wareId_code_map);
  swap(a.skuID_wareID_map, b.skuID_wareID_map);
  swap(a.usableCodes, b.usableCodes);
  swap(a.__isset, b.__isset);
}

UsableCouponsRsp::UsableCouponsRsp(const UsableCouponsRsp& other296) {
  error = other296.error;
  errmsg = other296.errmsg;
  user_id = other296.user_id;
  sellers = other296.sellers;
  platUsableCoupons = other296.platUsableCoupons;
  sellerUsableCoupons = other296.sellerUsableCoupons;
  code_cacheCoupon_map = other296.code_cacheCoupon_map;
  orderPrice = other296.orderPrice;
  sellerId_priceInfo_map = other296.sellerId_priceInfo_map;
  sellerId_skuId_priceInfo_map = other296.sellerId_skuId_priceInfo_map;
  platCode_totalSalePrice_map = other296.platCode_totalSalePrice_map;
  sellerId_code_totalSalePrice_map = other296.sellerId_code_totalSalePrice_map;
  sellerId_skuId_code_totalSalePrice_map = other296.sellerId_skuId_code_totalSalePrice_map;
  platCode_wareSet_map = other296.platCode_wareSet_map;
  sellerId_code_wareSet_map = other296.sellerId_code_wareSet_map;
  sellerId_wareId_code_map = other296.sellerId_wareId_code_map;
  skuID_wareID_map = other296.skuID_wareID_map;
  usableCodes = other296.usableCodes;
  __isset = other296.__isset;
}
UsableCouponsRsp& UsableCouponsRsp::operator=(const UsableCouponsRsp& other297) {
  error = other297.error;
  errmsg = other297.errmsg;
  user_id = other297.user_id;
  sellers = other297.sellers;
  platUsableCoupons = other297.platUsableCoupons;
  sellerUsableCoupons = other297.sellerUsableCoupons;
  code_cacheCoupon_map = other297.code_cacheCoupon_map;
  orderPrice = other297.orderPrice;
  sellerId_priceInfo_map = other297.sellerId_priceInfo_map;
  sellerId_skuId_priceInfo_map = other297.sellerId_skuId_priceInfo_map;
  platCode_totalSalePrice_map = other297.platCode_totalSalePrice_map;
  sellerId_code_totalSalePrice_map = other297.sellerId_code_totalSalePrice_map;
  sellerId_skuId_code_totalSalePrice_map = other297.sellerId_skuId_code_totalSalePrice_map;
  platCode_wareSet_map = other297.platCode_wareSet_map;
  sellerId_code_wareSet_map = other297.sellerId_code_wareSet_map;
  sellerId_wareId_code_map = other297.sellerId_wareId_code_map;
  skuID_wareID_map = other297.skuID_wareID_map;
  usableCodes = other297.usableCodes;
  __isset = other297.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UsableCouponsRsp& obj) {
  using apache::thrift::to_string;
  out << "UsableCouponsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "sellers=" << to_string(obj.sellers);
  out << ", " << "platUsableCoupons=" << to_string(obj.platUsableCoupons);
  out << ", " << "sellerUsableCoupons=" << to_string(obj.sellerUsableCoupons);
  out << ", " << "code_cacheCoupon_map=" << to_string(obj.code_cacheCoupon_map);
  out << ", " << "orderPrice=" << to_string(obj.orderPrice);
  out << ", " << "sellerId_priceInfo_map=" << to_string(obj.sellerId_priceInfo_map);
  out << ", " << "sellerId_skuId_priceInfo_map=" << to_string(obj.sellerId_skuId_priceInfo_map);
  out << ", " << "platCode_totalSalePrice_map=" << to_string(obj.platCode_totalSalePrice_map);
  out << ", " << "sellerId_code_totalSalePrice_map=" << to_string(obj.sellerId_code_totalSalePrice_map);
  out << ", " << "sellerId_skuId_code_totalSalePrice_map=" << to_string(obj.sellerId_skuId_code_totalSalePrice_map);
  out << ", " << "platCode_wareSet_map=" << to_string(obj.platCode_wareSet_map);
  out << ", " << "sellerId_code_wareSet_map=" << to_string(obj.sellerId_code_wareSet_map);
  out << ", " << "sellerId_wareId_code_map=" << to_string(obj.sellerId_wareId_code_map);
  out << ", " << "skuID_wareID_map=" << to_string(obj.skuID_wareID_map);
  out << ", " << "usableCodes=" << to_string(obj.usableCodes);
  out << ")";
  return out;
}


NotUsableCouponsReq::~NotUsableCouponsReq() throw() {
}


void NotUsableCouponsReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void NotUsableCouponsReq::__set_sellers(const std::map<int64_t, SellerInfo> & val) {
  this->sellers = val;
}

void NotUsableCouponsReq::__set_usableCodes(const std::vector<std::string> & val) {
  this->usableCodes = val;
}

void NotUsableCouponsReq::__set_page(const int32_t val) {
  this->page = val;
}

void NotUsableCouponsReq::__set_count(const int32_t val) {
  this->count = val;
}

const char* NotUsableCouponsReq::ascii_fingerprint = "7F533DDAA9BAE55D19471EB830FD27BC";
const uint8_t NotUsableCouponsReq::binary_fingerprint[16] = {0x7F,0x53,0x3D,0xDA,0xA9,0xBA,0xE5,0x5D,0x19,0x47,0x1E,0xB8,0x30,0xFD,0x27,0xBC};

uint32_t NotUsableCouponsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user_id = false;
  bool isset_sellers = false;
  bool isset_usableCodes = false;
  bool isset_page = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellers.clear();
            uint32_t _size298;
            ::apache::thrift::protocol::TType _ktype299;
            ::apache::thrift::protocol::TType _vtype300;
            xfer += iprot->readMapBegin(_ktype299, _vtype300, _size298);
            uint32_t _i302;
            for (_i302 = 0; _i302 < _size298; ++_i302)
            {
              int64_t _key303;
              xfer += iprot->readI64(_key303);
              SellerInfo& _val304 = this->sellers[_key303];
              xfer += _val304.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_sellers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->usableCodes.clear();
            uint32_t _size305;
            ::apache::thrift::protocol::TType _etype308;
            xfer += iprot->readListBegin(_etype308, _size305);
            this->usableCodes.resize(_size305);
            uint32_t _i309;
            for (_i309 = 0; _i309 < _size305; ++_i309)
            {
              xfer += iprot->readString(this->usableCodes[_i309]);
            }
            xfer += iprot->readListEnd();
          }
          isset_usableCodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          isset_page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sellers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_usableCodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_page)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotUsableCouponsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NotUsableCouponsReq");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellers", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sellers.size()));
    std::map<int64_t, SellerInfo> ::const_iterator _iter310;
    for (_iter310 = this->sellers.begin(); _iter310 != this->sellers.end(); ++_iter310)
    {
      xfer += oprot->writeI64(_iter310->first);
      xfer += _iter310->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usableCodes", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->usableCodes.size()));
    std::vector<std::string> ::const_iterator _iter311;
    for (_iter311 = this->usableCodes.begin(); _iter311 != this->usableCodes.end(); ++_iter311)
    {
      xfer += oprot->writeString((*_iter311));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NotUsableCouponsReq &a, NotUsableCouponsReq &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.sellers, b.sellers);
  swap(a.usableCodes, b.usableCodes);
  swap(a.page, b.page);
  swap(a.count, b.count);
}

NotUsableCouponsReq::NotUsableCouponsReq(const NotUsableCouponsReq& other312) {
  user_id = other312.user_id;
  sellers = other312.sellers;
  usableCodes = other312.usableCodes;
  page = other312.page;
  count = other312.count;
}
NotUsableCouponsReq& NotUsableCouponsReq::operator=(const NotUsableCouponsReq& other313) {
  user_id = other313.user_id;
  sellers = other313.sellers;
  usableCodes = other313.usableCodes;
  page = other313.page;
  count = other313.count;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NotUsableCouponsReq& obj) {
  using apache::thrift::to_string;
  out << "NotUsableCouponsReq(";
  out << "user_id=" << to_string(obj.user_id);
  out << ", " << "sellers=" << to_string(obj.sellers);
  out << ", " << "usableCodes=" << to_string(obj.usableCodes);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


NotUsableCouponsRsp::~NotUsableCouponsRsp() throw() {
}


void NotUsableCouponsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void NotUsableCouponsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void NotUsableCouponsRsp::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void NotUsableCouponsRsp::__set_sellers(const std::map<int64_t, SellerInfo> & val) {
  this->sellers = val;
}

void NotUsableCouponsRsp::__set_usableCodes(const std::vector<std::string> & val) {
  this->usableCodes = val;
}

void NotUsableCouponsRsp::__set_notUsableCoupons(const std::vector< ::coupon::CacheCoupon> & val) {
  this->notUsableCoupons = val;
}

void NotUsableCouponsRsp::__set_page(const int32_t val) {
  this->page = val;
}

void NotUsableCouponsRsp::__set_count(const int32_t val) {
  this->count = val;
}

void NotUsableCouponsRsp::__set_total(const int32_t val) {
  this->total = val;
}

const char* NotUsableCouponsRsp::ascii_fingerprint = "110C49CEC4788C20864DFBD4E58392AB";
const uint8_t NotUsableCouponsRsp::binary_fingerprint[16] = {0x11,0x0C,0x49,0xCE,0xC4,0x78,0x8C,0x20,0x86,0x4D,0xFB,0xD4,0xE5,0x83,0x92,0xAB};

uint32_t NotUsableCouponsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast314;
          xfer += iprot->readI32(ecast314);
          this->error = ( ::coupon::Error::type)ecast314;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellers.clear();
            uint32_t _size315;
            ::apache::thrift::protocol::TType _ktype316;
            ::apache::thrift::protocol::TType _vtype317;
            xfer += iprot->readMapBegin(_ktype316, _vtype317, _size315);
            uint32_t _i319;
            for (_i319 = 0; _i319 < _size315; ++_i319)
            {
              int64_t _key320;
              xfer += iprot->readI64(_key320);
              SellerInfo& _val321 = this->sellers[_key320];
              xfer += _val321.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->usableCodes.clear();
            uint32_t _size322;
            ::apache::thrift::protocol::TType _etype325;
            xfer += iprot->readListBegin(_etype325, _size322);
            this->usableCodes.resize(_size322);
            uint32_t _i326;
            for (_i326 = 0; _i326 < _size322; ++_i326)
            {
              xfer += iprot->readString(this->usableCodes[_i326]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.usableCodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->notUsableCoupons.clear();
            uint32_t _size327;
            ::apache::thrift::protocol::TType _etype330;
            xfer += iprot->readListBegin(_etype330, _size327);
            this->notUsableCoupons.resize(_size327);
            uint32_t _i331;
            for (_i331 = 0; _i331 < _size327; ++_i331)
            {
              xfer += this->notUsableCoupons[_i331].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.notUsableCoupons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotUsableCouponsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NotUsableCouponsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellers", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sellers.size()));
    std::map<int64_t, SellerInfo> ::const_iterator _iter332;
    for (_iter332 = this->sellers.begin(); _iter332 != this->sellers.end(); ++_iter332)
    {
      xfer += oprot->writeI64(_iter332->first);
      xfer += _iter332->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usableCodes", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->usableCodes.size()));
    std::vector<std::string> ::const_iterator _iter333;
    for (_iter333 = this->usableCodes.begin(); _iter333 != this->usableCodes.end(); ++_iter333)
    {
      xfer += oprot->writeString((*_iter333));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notUsableCoupons", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->notUsableCoupons.size()));
    std::vector< ::coupon::CacheCoupon> ::const_iterator _iter334;
    for (_iter334 = this->notUsableCoupons.begin(); _iter334 != this->notUsableCoupons.end(); ++_iter334)
    {
      xfer += (*_iter334).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NotUsableCouponsRsp &a, NotUsableCouponsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.user_id, b.user_id);
  swap(a.sellers, b.sellers);
  swap(a.usableCodes, b.usableCodes);
  swap(a.notUsableCoupons, b.notUsableCoupons);
  swap(a.page, b.page);
  swap(a.count, b.count);
  swap(a.total, b.total);
  swap(a.__isset, b.__isset);
}

NotUsableCouponsRsp::NotUsableCouponsRsp(const NotUsableCouponsRsp& other335) {
  error = other335.error;
  errmsg = other335.errmsg;
  user_id = other335.user_id;
  sellers = other335.sellers;
  usableCodes = other335.usableCodes;
  notUsableCoupons = other335.notUsableCoupons;
  page = other335.page;
  count = other335.count;
  total = other335.total;
  __isset = other335.__isset;
}
NotUsableCouponsRsp& NotUsableCouponsRsp::operator=(const NotUsableCouponsRsp& other336) {
  error = other336.error;
  errmsg = other336.errmsg;
  user_id = other336.user_id;
  sellers = other336.sellers;
  usableCodes = other336.usableCodes;
  notUsableCoupons = other336.notUsableCoupons;
  page = other336.page;
  count = other336.count;
  total = other336.total;
  __isset = other336.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NotUsableCouponsRsp& obj) {
  using apache::thrift::to_string;
  out << "NotUsableCouponsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "sellers=" << to_string(obj.sellers);
  out << ", " << "usableCodes=" << to_string(obj.usableCodes);
  out << ", " << "notUsableCoupons=" << to_string(obj.notUsableCoupons);
  out << ", " << "page=" << to_string(obj.page);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "total=" << to_string(obj.total);
  out << ")";
  return out;
}


ApportionReq::~ApportionReq() throw() {
}


void ApportionReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void ApportionReq::__set_sellers(const std::map<int64_t, SellerInfo> & val) {
  this->sellers = val;
}

void ApportionReq::__set_plat_code(const std::string& val) {
  this->plat_code = val;
__isset.plat_code = true;
}

void ApportionReq::__set_sellerId_code_map(const std::map<int64_t, std::string> & val) {
  this->sellerId_code_map = val;
__isset.sellerId_code_map = true;
}

const char* ApportionReq::ascii_fingerprint = "80EF5E503BFEC9565BB00BF03B7F2578";
const uint8_t ApportionReq::binary_fingerprint[16] = {0x80,0xEF,0x5E,0x50,0x3B,0xFE,0xC9,0x56,0x5B,0xB0,0x0B,0xF0,0x3B,0x7F,0x25,0x78};

uint32_t ApportionReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user_id = false;
  bool isset_sellers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellers.clear();
            uint32_t _size337;
            ::apache::thrift::protocol::TType _ktype338;
            ::apache::thrift::protocol::TType _vtype339;
            xfer += iprot->readMapBegin(_ktype338, _vtype339, _size337);
            uint32_t _i341;
            for (_i341 = 0; _i341 < _size337; ++_i341)
            {
              int64_t _key342;
              xfer += iprot->readI64(_key342);
              SellerInfo& _val343 = this->sellers[_key342];
              xfer += _val343.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_sellers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plat_code);
          this->__isset.plat_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_code_map.clear();
            uint32_t _size344;
            ::apache::thrift::protocol::TType _ktype345;
            ::apache::thrift::protocol::TType _vtype346;
            xfer += iprot->readMapBegin(_ktype345, _vtype346, _size344);
            uint32_t _i348;
            for (_i348 = 0; _i348 < _size344; ++_i348)
            {
              int64_t _key349;
              xfer += iprot->readI64(_key349);
              std::string& _val350 = this->sellerId_code_map[_key349];
              xfer += iprot->readString(_val350);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_code_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sellers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApportionReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ApportionReq");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellers", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sellers.size()));
    std::map<int64_t, SellerInfo> ::const_iterator _iter351;
    for (_iter351 = this->sellers.begin(); _iter351 != this->sellers.end(); ++_iter351)
    {
      xfer += oprot->writeI64(_iter351->first);
      xfer += _iter351->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.plat_code) {
    xfer += oprot->writeFieldBegin("plat_code", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->plat_code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sellerId_code_map) {
    xfer += oprot->writeFieldBegin("sellerId_code_map", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->sellerId_code_map.size()));
      std::map<int64_t, std::string> ::const_iterator _iter352;
      for (_iter352 = this->sellerId_code_map.begin(); _iter352 != this->sellerId_code_map.end(); ++_iter352)
      {
        xfer += oprot->writeI64(_iter352->first);
        xfer += oprot->writeString(_iter352->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ApportionReq &a, ApportionReq &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.sellers, b.sellers);
  swap(a.plat_code, b.plat_code);
  swap(a.sellerId_code_map, b.sellerId_code_map);
  swap(a.__isset, b.__isset);
}

ApportionReq::ApportionReq(const ApportionReq& other353) {
  user_id = other353.user_id;
  sellers = other353.sellers;
  plat_code = other353.plat_code;
  sellerId_code_map = other353.sellerId_code_map;
  __isset = other353.__isset;
}
ApportionReq& ApportionReq::operator=(const ApportionReq& other354) {
  user_id = other354.user_id;
  sellers = other354.sellers;
  plat_code = other354.plat_code;
  sellerId_code_map = other354.sellerId_code_map;
  __isset = other354.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ApportionReq& obj) {
  using apache::thrift::to_string;
  out << "ApportionReq(";
  out << "user_id=" << to_string(obj.user_id);
  out << ", " << "sellers=" << to_string(obj.sellers);
  out << ", " << "plat_code="; (obj.__isset.plat_code ? (out << to_string(obj.plat_code)) : (out << "<null>"));
  out << ", " << "sellerId_code_map="; (obj.__isset.sellerId_code_map ? (out << to_string(obj.sellerId_code_map)) : (out << "<null>"));
  out << ")";
  return out;
}


ApportionRsp::~ApportionRsp() throw() {
}


void ApportionRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void ApportionRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void ApportionRsp::__set_usableCouponsRsp(const UsableCouponsRsp& val) {
  this->usableCouponsRsp = val;
}

void ApportionRsp::__set_toggle_cacheCoupon_map(const std::map<std::string,  ::coupon::CacheCoupon> & val) {
  this->toggle_cacheCoupon_map = val;
}

void ApportionRsp::__set_sellerId_cacheCoupon_map(const std::map<int64_t, std::vector< ::coupon::CacheCoupon> > & val) {
  this->sellerId_cacheCoupon_map = val;
}

const char* ApportionRsp::ascii_fingerprint = "5134086380D5E3915AD276681FA8D6D5";
const uint8_t ApportionRsp::binary_fingerprint[16] = {0x51,0x34,0x08,0x63,0x80,0xD5,0xE3,0x91,0x5A,0xD2,0x76,0x68,0x1F,0xA8,0xD6,0xD5};

uint32_t ApportionRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast355;
          xfer += iprot->readI32(ecast355);
          this->error = ( ::coupon::Error::type)ecast355;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->usableCouponsRsp.read(iprot);
          this->__isset.usableCouponsRsp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->toggle_cacheCoupon_map.clear();
            uint32_t _size356;
            ::apache::thrift::protocol::TType _ktype357;
            ::apache::thrift::protocol::TType _vtype358;
            xfer += iprot->readMapBegin(_ktype357, _vtype358, _size356);
            uint32_t _i360;
            for (_i360 = 0; _i360 < _size356; ++_i360)
            {
              std::string _key361;
              xfer += iprot->readString(_key361);
               ::coupon::CacheCoupon& _val362 = this->toggle_cacheCoupon_map[_key361];
              xfer += _val362.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.toggle_cacheCoupon_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->sellerId_cacheCoupon_map.clear();
            uint32_t _size363;
            ::apache::thrift::protocol::TType _ktype364;
            ::apache::thrift::protocol::TType _vtype365;
            xfer += iprot->readMapBegin(_ktype364, _vtype365, _size363);
            uint32_t _i367;
            for (_i367 = 0; _i367 < _size363; ++_i367)
            {
              int64_t _key368;
              xfer += iprot->readI64(_key368);
              std::vector< ::coupon::CacheCoupon> & _val369 = this->sellerId_cacheCoupon_map[_key368];
              {
                _val369.clear();
                uint32_t _size370;
                ::apache::thrift::protocol::TType _etype373;
                xfer += iprot->readListBegin(_etype373, _size370);
                _val369.resize(_size370);
                uint32_t _i374;
                for (_i374 = 0; _i374 < _size370; ++_i374)
                {
                  xfer += _val369[_i374].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.sellerId_cacheCoupon_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApportionRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ApportionRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usableCouponsRsp", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->usableCouponsRsp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toggle_cacheCoupon_map", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->toggle_cacheCoupon_map.size()));
    std::map<std::string,  ::coupon::CacheCoupon> ::const_iterator _iter375;
    for (_iter375 = this->toggle_cacheCoupon_map.begin(); _iter375 != this->toggle_cacheCoupon_map.end(); ++_iter375)
    {
      xfer += oprot->writeString(_iter375->first);
      xfer += _iter375->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellerId_cacheCoupon_map", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->sellerId_cacheCoupon_map.size()));
    std::map<int64_t, std::vector< ::coupon::CacheCoupon> > ::const_iterator _iter376;
    for (_iter376 = this->sellerId_cacheCoupon_map.begin(); _iter376 != this->sellerId_cacheCoupon_map.end(); ++_iter376)
    {
      xfer += oprot->writeI64(_iter376->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter376->second.size()));
        std::vector< ::coupon::CacheCoupon> ::const_iterator _iter377;
        for (_iter377 = _iter376->second.begin(); _iter377 != _iter376->second.end(); ++_iter377)
        {
          xfer += (*_iter377).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ApportionRsp &a, ApportionRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.usableCouponsRsp, b.usableCouponsRsp);
  swap(a.toggle_cacheCoupon_map, b.toggle_cacheCoupon_map);
  swap(a.sellerId_cacheCoupon_map, b.sellerId_cacheCoupon_map);
  swap(a.__isset, b.__isset);
}

ApportionRsp::ApportionRsp(const ApportionRsp& other378) {
  error = other378.error;
  errmsg = other378.errmsg;
  usableCouponsRsp = other378.usableCouponsRsp;
  toggle_cacheCoupon_map = other378.toggle_cacheCoupon_map;
  sellerId_cacheCoupon_map = other378.sellerId_cacheCoupon_map;
  __isset = other378.__isset;
}
ApportionRsp& ApportionRsp::operator=(const ApportionRsp& other379) {
  error = other379.error;
  errmsg = other379.errmsg;
  usableCouponsRsp = other379.usableCouponsRsp;
  toggle_cacheCoupon_map = other379.toggle_cacheCoupon_map;
  sellerId_cacheCoupon_map = other379.sellerId_cacheCoupon_map;
  __isset = other379.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ApportionRsp& obj) {
  using apache::thrift::to_string;
  out << "ApportionRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "usableCouponsRsp=" << to_string(obj.usableCouponsRsp);
  out << ", " << "toggle_cacheCoupon_map=" << to_string(obj.toggle_cacheCoupon_map);
  out << ", " << "sellerId_cacheCoupon_map=" << to_string(obj.sellerId_cacheCoupon_map);
  out << ")";
  return out;
}


CacheCouponGroupsReq::~CacheCouponGroupsReq() throw() {
}


void CacheCouponGroupsReq::__set_coupon_group_id_set(const std::set<int32_t> & val) {
  this->coupon_group_id_set = val;
}

const char* CacheCouponGroupsReq::ascii_fingerprint = "FF7335CAA8E1AFD6418DDE8FC093C053";
const uint8_t CacheCouponGroupsReq::binary_fingerprint[16] = {0xFF,0x73,0x35,0xCA,0xA8,0xE1,0xAF,0xD6,0x41,0x8D,0xDE,0x8F,0xC0,0x93,0xC0,0x53};

uint32_t CacheCouponGroupsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id_set = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->coupon_group_id_set.clear();
            uint32_t _size380;
            ::apache::thrift::protocol::TType _etype383;
            xfer += iprot->readSetBegin(_etype383, _size380);
            uint32_t _i384;
            for (_i384 = 0; _i384 < _size380; ++_i384)
            {
              int32_t _elem385;
              xfer += iprot->readI32(_elem385);
              this->coupon_group_id_set.insert(_elem385);
            }
            xfer += iprot->readSetEnd();
          }
          isset_coupon_group_id_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id_set)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CacheCouponGroupsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CacheCouponGroupsReq");

  xfer += oprot->writeFieldBegin("coupon_group_id_set", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->coupon_group_id_set.size()));
    std::set<int32_t> ::const_iterator _iter386;
    for (_iter386 = this->coupon_group_id_set.begin(); _iter386 != this->coupon_group_id_set.end(); ++_iter386)
    {
      xfer += oprot->writeI32((*_iter386));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CacheCouponGroupsReq &a, CacheCouponGroupsReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id_set, b.coupon_group_id_set);
}

CacheCouponGroupsReq::CacheCouponGroupsReq(const CacheCouponGroupsReq& other387) {
  coupon_group_id_set = other387.coupon_group_id_set;
}
CacheCouponGroupsReq& CacheCouponGroupsReq::operator=(const CacheCouponGroupsReq& other388) {
  coupon_group_id_set = other388.coupon_group_id_set;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CacheCouponGroupsReq& obj) {
  using apache::thrift::to_string;
  out << "CacheCouponGroupsReq(";
  out << "coupon_group_id_set=" << to_string(obj.coupon_group_id_set);
  out << ")";
  return out;
}


CacheCouponGroupsRsp::~CacheCouponGroupsRsp() throw() {
}


void CacheCouponGroupsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void CacheCouponGroupsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void CacheCouponGroupsRsp::__set_cacheCouponGroupList(const std::vector< ::coupon::CacheCouponGroup> & val) {
  this->cacheCouponGroupList = val;
}

const char* CacheCouponGroupsRsp::ascii_fingerprint = "FD84B558F4978C30045A2AE3235C001F";
const uint8_t CacheCouponGroupsRsp::binary_fingerprint[16] = {0xFD,0x84,0xB5,0x58,0xF4,0x97,0x8C,0x30,0x04,0x5A,0x2A,0xE3,0x23,0x5C,0x00,0x1F};

uint32_t CacheCouponGroupsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast389;
          xfer += iprot->readI32(ecast389);
          this->error = ( ::coupon::Error::type)ecast389;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cacheCouponGroupList.clear();
            uint32_t _size390;
            ::apache::thrift::protocol::TType _etype393;
            xfer += iprot->readListBegin(_etype393, _size390);
            this->cacheCouponGroupList.resize(_size390);
            uint32_t _i394;
            for (_i394 = 0; _i394 < _size390; ++_i394)
            {
              xfer += this->cacheCouponGroupList[_i394].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cacheCouponGroupList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CacheCouponGroupsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CacheCouponGroupsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cacheCouponGroupList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cacheCouponGroupList.size()));
    std::vector< ::coupon::CacheCouponGroup> ::const_iterator _iter395;
    for (_iter395 = this->cacheCouponGroupList.begin(); _iter395 != this->cacheCouponGroupList.end(); ++_iter395)
    {
      xfer += (*_iter395).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CacheCouponGroupsRsp &a, CacheCouponGroupsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.cacheCouponGroupList, b.cacheCouponGroupList);
  swap(a.__isset, b.__isset);
}

CacheCouponGroupsRsp::CacheCouponGroupsRsp(const CacheCouponGroupsRsp& other396) {
  error = other396.error;
  errmsg = other396.errmsg;
  cacheCouponGroupList = other396.cacheCouponGroupList;
  __isset = other396.__isset;
}
CacheCouponGroupsRsp& CacheCouponGroupsRsp::operator=(const CacheCouponGroupsRsp& other397) {
  error = other397.error;
  errmsg = other397.errmsg;
  cacheCouponGroupList = other397.cacheCouponGroupList;
  __isset = other397.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CacheCouponGroupsRsp& obj) {
  using apache::thrift::to_string;
  out << "CacheCouponGroupsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "cacheCouponGroupList=" << to_string(obj.cacheCouponGroupList);
  out << ")";
  return out;
}


RelatedCouponGroupsReq::~RelatedCouponGroupsReq() throw() {
}


void RelatedCouponGroupsReq::__set_coupon_group_id(const int32_t val) {
  this->coupon_group_id = val;
}

const char* RelatedCouponGroupsReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t RelatedCouponGroupsReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t RelatedCouponGroupsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coupon_group_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coupon_group_id);
          isset_coupon_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coupon_group_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RelatedCouponGroupsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RelatedCouponGroupsReq");

  xfer += oprot->writeFieldBegin("coupon_group_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->coupon_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RelatedCouponGroupsReq &a, RelatedCouponGroupsReq &b) {
  using ::std::swap;
  swap(a.coupon_group_id, b.coupon_group_id);
}

RelatedCouponGroupsReq::RelatedCouponGroupsReq(const RelatedCouponGroupsReq& other398) {
  coupon_group_id = other398.coupon_group_id;
}
RelatedCouponGroupsReq& RelatedCouponGroupsReq::operator=(const RelatedCouponGroupsReq& other399) {
  coupon_group_id = other399.coupon_group_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RelatedCouponGroupsReq& obj) {
  using apache::thrift::to_string;
  out << "RelatedCouponGroupsReq(";
  out << "coupon_group_id=" << to_string(obj.coupon_group_id);
  out << ")";
  return out;
}


RelatedCouponGroupsRsp::~RelatedCouponGroupsRsp() throw() {
}


void RelatedCouponGroupsRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void RelatedCouponGroupsRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void RelatedCouponGroupsRsp::__set_couponGroupList(const std::vector< ::coupon::CouponGroup> & val) {
  this->couponGroupList = val;
}

const char* RelatedCouponGroupsRsp::ascii_fingerprint = "6C75BDA8167BE8F5F9B6BE7F0CE142BF";
const uint8_t RelatedCouponGroupsRsp::binary_fingerprint[16] = {0x6C,0x75,0xBD,0xA8,0x16,0x7B,0xE8,0xF5,0xF9,0xB6,0xBE,0x7F,0x0C,0xE1,0x42,0xBF};

uint32_t RelatedCouponGroupsRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast400;
          xfer += iprot->readI32(ecast400);
          this->error = ( ::coupon::Error::type)ecast400;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->couponGroupList.clear();
            uint32_t _size401;
            ::apache::thrift::protocol::TType _etype404;
            xfer += iprot->readListBegin(_etype404, _size401);
            this->couponGroupList.resize(_size401);
            uint32_t _i405;
            for (_i405 = 0; _i405 < _size401; ++_i405)
            {
              xfer += this->couponGroupList[_i405].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.couponGroupList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RelatedCouponGroupsRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RelatedCouponGroupsRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("couponGroupList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->couponGroupList.size()));
    std::vector< ::coupon::CouponGroup> ::const_iterator _iter406;
    for (_iter406 = this->couponGroupList.begin(); _iter406 != this->couponGroupList.end(); ++_iter406)
    {
      xfer += (*_iter406).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RelatedCouponGroupsRsp &a, RelatedCouponGroupsRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.couponGroupList, b.couponGroupList);
  swap(a.__isset, b.__isset);
}

RelatedCouponGroupsRsp::RelatedCouponGroupsRsp(const RelatedCouponGroupsRsp& other407) {
  error = other407.error;
  errmsg = other407.errmsg;
  couponGroupList = other407.couponGroupList;
  __isset = other407.__isset;
}
RelatedCouponGroupsRsp& RelatedCouponGroupsRsp::operator=(const RelatedCouponGroupsRsp& other408) {
  error = other408.error;
  errmsg = other408.errmsg;
  couponGroupList = other408.couponGroupList;
  __isset = other408.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RelatedCouponGroupsRsp& obj) {
  using apache::thrift::to_string;
  out << "RelatedCouponGroupsRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "couponGroupList=" << to_string(obj.couponGroupList);
  out << ")";
  return out;
}


WareLabelReq::~WareLabelReq() throw() {
}


void WareLabelReq::__set_ware_label_id(const int32_t val) {
  this->ware_label_id = val;
}

const char* WareLabelReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t WareLabelReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t WareLabelReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ware_label_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ware_label_id);
          isset_ware_label_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ware_label_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WareLabelReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelReq");

  xfer += oprot->writeFieldBegin("ware_label_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ware_label_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelReq &a, WareLabelReq &b) {
  using ::std::swap;
  swap(a.ware_label_id, b.ware_label_id);
}

WareLabelReq::WareLabelReq(const WareLabelReq& other409) {
  ware_label_id = other409.ware_label_id;
}
WareLabelReq& WareLabelReq::operator=(const WareLabelReq& other410) {
  ware_label_id = other410.ware_label_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelReq& obj) {
  using apache::thrift::to_string;
  out << "WareLabelReq(";
  out << "ware_label_id=" << to_string(obj.ware_label_id);
  out << ")";
  return out;
}


WareLabelRsp::~WareLabelRsp() throw() {
}


void WareLabelRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void WareLabelRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void WareLabelRsp::__set_wareLabel(const  ::coupon::WareLabel& val) {
  this->wareLabel = val;
}

void WareLabelRsp::__set_waresList(const std::vector< ::coupon::WareLabelWares> & val) {
  this->waresList = val;
}

const char* WareLabelRsp::ascii_fingerprint = "ACA8411401D53BBB0DA6DF559A8DAEEB";
const uint8_t WareLabelRsp::binary_fingerprint[16] = {0xAC,0xA8,0x41,0x14,0x01,0xD5,0x3B,0xBB,0x0D,0xA6,0xDF,0x55,0x9A,0x8D,0xAE,0xEB};

uint32_t WareLabelRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast411;
          xfer += iprot->readI32(ecast411);
          this->error = ( ::coupon::Error::type)ecast411;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wareLabel.read(iprot);
          this->__isset.wareLabel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->waresList.clear();
            uint32_t _size412;
            ::apache::thrift::protocol::TType _etype415;
            xfer += iprot->readListBegin(_etype415, _size412);
            this->waresList.resize(_size412);
            uint32_t _i416;
            for (_i416 = 0; _i416 < _size412; ++_i416)
            {
              xfer += this->waresList[_i416].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.waresList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WareLabelRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WareLabelRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wareLabel", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->wareLabel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("waresList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->waresList.size()));
    std::vector< ::coupon::WareLabelWares> ::const_iterator _iter417;
    for (_iter417 = this->waresList.begin(); _iter417 != this->waresList.end(); ++_iter417)
    {
      xfer += (*_iter417).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WareLabelRsp &a, WareLabelRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.wareLabel, b.wareLabel);
  swap(a.waresList, b.waresList);
  swap(a.__isset, b.__isset);
}

WareLabelRsp::WareLabelRsp(const WareLabelRsp& other418) {
  error = other418.error;
  errmsg = other418.errmsg;
  wareLabel = other418.wareLabel;
  waresList = other418.waresList;
  __isset = other418.__isset;
}
WareLabelRsp& WareLabelRsp::operator=(const WareLabelRsp& other419) {
  error = other419.error;
  errmsg = other419.errmsg;
  wareLabel = other419.wareLabel;
  waresList = other419.waresList;
  __isset = other419.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WareLabelRsp& obj) {
  using apache::thrift::to_string;
  out << "WareLabelRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "wareLabel=" << to_string(obj.wareLabel);
  out << ", " << "waresList=" << to_string(obj.waresList);
  out << ")";
  return out;
}


ServerTimeReq::~ServerTimeReq() throw() {
}


void ServerTimeReq::__set_local_time(const int32_t val) {
  this->local_time = val;
}

const char* ServerTimeReq::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t ServerTimeReq::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t ServerTimeReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->local_time);
          this->__isset.local_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerTimeReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ServerTimeReq");

  xfer += oprot->writeFieldBegin("local_time", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->local_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ServerTimeReq &a, ServerTimeReq &b) {
  using ::std::swap;
  swap(a.local_time, b.local_time);
  swap(a.__isset, b.__isset);
}

ServerTimeReq::ServerTimeReq(const ServerTimeReq& other420) {
  local_time = other420.local_time;
  __isset = other420.__isset;
}
ServerTimeReq& ServerTimeReq::operator=(const ServerTimeReq& other421) {
  local_time = other421.local_time;
  __isset = other421.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ServerTimeReq& obj) {
  using apache::thrift::to_string;
  out << "ServerTimeReq(";
  out << "local_time=" << to_string(obj.local_time);
  out << ")";
  return out;
}


ServerTimeRsp::~ServerTimeRsp() throw() {
}


void ServerTimeRsp::__set_error(const  ::coupon::Error::type val) {
  this->error = val;
}

void ServerTimeRsp::__set_errmsg(const std::string& val) {
  this->errmsg = val;
}

void ServerTimeRsp::__set_local_time(const int32_t val) {
  this->local_time = val;
}

void ServerTimeRsp::__set_server_time(const int32_t val) {
  this->server_time = val;
}

const char* ServerTimeRsp::ascii_fingerprint = "31BFBC55E24CCAB83D9E1E9DED82F2A1";
const uint8_t ServerTimeRsp::binary_fingerprint[16] = {0x31,0xBF,0xBC,0x55,0xE2,0x4C,0xCA,0xB8,0x3D,0x9E,0x1E,0x9D,0xED,0x82,0xF2,0xA1};

uint32_t ServerTimeRsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast422;
          xfer += iprot->readI32(ecast422);
          this->error = ( ::coupon::Error::type)ecast422;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errmsg);
          this->__isset.errmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->local_time);
          this->__isset.local_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->server_time);
          this->__isset.server_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerTimeRsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ServerTimeRsp");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errmsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("local_time", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->local_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_time", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->server_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ServerTimeRsp &a, ServerTimeRsp &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errmsg, b.errmsg);
  swap(a.local_time, b.local_time);
  swap(a.server_time, b.server_time);
  swap(a.__isset, b.__isset);
}

ServerTimeRsp::ServerTimeRsp(const ServerTimeRsp& other423) {
  error = other423.error;
  errmsg = other423.errmsg;
  local_time = other423.local_time;
  server_time = other423.server_time;
  __isset = other423.__isset;
}
ServerTimeRsp& ServerTimeRsp::operator=(const ServerTimeRsp& other424) {
  error = other424.error;
  errmsg = other424.errmsg;
  local_time = other424.local_time;
  server_time = other424.server_time;
  __isset = other424.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ServerTimeRsp& obj) {
  using apache::thrift::to_string;
  out << "ServerTimeRsp(";
  out << "error=" << to_string(obj.error);
  out << ", " << "errmsg=" << to_string(obj.errmsg);
  out << ", " << "local_time=" << to_string(obj.local_time);
  out << ", " << "server_time=" << to_string(obj.server_time);
  out << ")";
  return out;
}

} // namespace
