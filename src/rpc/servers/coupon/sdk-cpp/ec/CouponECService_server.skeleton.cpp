// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CouponECService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::couponEC;

class CouponECServiceHandler : virtual public CouponECServiceIf {
 public:
  CouponECServiceHandler() {
    // Your initialization goes here
  }

  void getDefaultConfig(GetDefaultConfigRsp& _return, const GetDefaultConfigReq& getDefaultConfigReq) {
    // Your implementation goes here
    printf("getDefaultConfig\n");
  }

  void getDrawnCountToday(DrawnCountTodayRsp& _return, const DrawnCountTodayReq& drawnCountTodayReq) {
    // Your implementation goes here
    printf("getDrawnCountToday\n");
  }

  void getUserLeftCouponsCount(UserLeftCouponsCountRsp& _return, const UserLeftCouponsCountReq& userLeftCouponsCountReq) {
    // Your implementation goes here
    printf("getUserLeftCouponsCount\n");
  }

  void getClientCoupons(ClientCouponsRsp& _return, const ClientCouponsReq& clientCouponsReq) {
    // Your implementation goes here
    printf("getClientCoupons\n");
  }

  void decodeCode(DecodeCodeRsp& _return, const DecodeCodeReq& decodeCodeReq) {
    // Your implementation goes here
    printf("decodeCode\n");
  }

  void checkArgot(CheckArgotRsp& _return, const CheckArgotReq& checkArgotReq) {
    // Your implementation goes here
    printf("checkArgot\n");
  }

  void drawCoupon(DrawRsp& _return, const DrawReq& drawReq) {
    // Your implementation goes here
    printf("drawCoupon\n");
  }

  void freezeCoupon(FreezeRsp& _return, const FreezeReq& freezeReq) {
    // Your implementation goes here
    printf("freezeCoupon\n");
  }

  void rollbackCoupon(RollbackRsp& _return, const RollbackReq& rollbackReq) {
    // Your implementation goes here
    printf("rollbackCoupon\n");
  }

  void payCoupon(PayRsp& _return, const PayReq& payReq) {
    // Your implementation goes here
    printf("payCoupon\n");
  }

  void getUserCoupons(UserCouponsRsp& _return, const UserCouponsReq& userCouponsReq) {
    // Your implementation goes here
    printf("getUserCoupons\n");
  }

  void getWareActs(WareActsRsp& _return, const WareActsReq& wareActsReq) {
    // Your implementation goes here
    printf("getWareActs\n");
  }

  void getUsableCoupons(UsableCouponsRsp& _return, const UsableCouponsReq& usableCouponsReq) {
    // Your implementation goes here
    printf("getUsableCoupons\n");
  }

  void getNotUsableCoupons(NotUsableCouponsRsp& _return, const NotUsableCouponsReq& notUsableCouponsReq) {
    // Your implementation goes here
    printf("getNotUsableCoupons\n");
  }

  void getApportion(ApportionRsp& _return, const ApportionReq& apportionReq) {
    // Your implementation goes here
    printf("getApportion\n");
  }

  void getCacheCouponGroups(CacheCouponGroupsRsp& _return, const CacheCouponGroupsReq& cacheCouponGroupsReq) {
    // Your implementation goes here
    printf("getCacheCouponGroups\n");
  }

  void getRelatedCouponGroups(RelatedCouponGroupsRsp& _return, const RelatedCouponGroupsReq& relatedCouponGroupsReq) {
    // Your implementation goes here
    printf("getRelatedCouponGroups\n");
  }

  void getWareLabel(WareLabelRsp& _return, const WareLabelReq& wareLabelReq) {
    // Your implementation goes here
    printf("getWareLabel\n");
  }

  void getServerTime(ServerTimeRsp& _return, const ServerTimeReq& serverTimeReq) {
    // Your implementation goes here
    printf("getServerTime\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CouponECServiceHandler> handler(new CouponECServiceHandler());
  shared_ptr<TProcessor> processor(new CouponECServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

